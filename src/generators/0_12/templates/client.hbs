var request = require('request');

/**
 * ## Responses
 * Responses from this API with be wrapped in an envelope to assist the caller
 * in dealing with the various responses from the service. There are no types
 * to check against in JavaScript, so this facilitates that.
 *
 *    {
 *      status: 200,
 *      data: { name: "John", age: 29 }
 *    }
 *
 * ## Logging
 * To enable logging, use the NODE_DEBUG environment variable.
 *
 *    NODE_DEBUG=apidoc
 *
 * @constructor
 */
function {{constructorName}} (host) {
  var showLogMessages = process.env.NODE_DEBUG ? process.env.NODE_DEBUG.indexOf('apidoc') !== -1 : false;

  function log (message) {
    if (showLogMessages) {
      console.log('[apidoc] ' + message);
    }
  }

  function getQueryString (options) {
    var params = [];
    var qs = options.qs || {};

    for (var key in qs) {
      if (qs[key]) {
        params.push(key + '=' + qs[key]);
      }
    }

    return params.join('&');
  }

  function doRequest (options) {
    var startMs = Date.now();
    options = options || {};

    if (!options.json) {
      options.json = true;
    }

    options.qsStringifyOptions = {
      arrayFormat: 'repeat'
    };

    var queryString = getQueryString(options);
    var url = options.uri + (queryString ? '?' + queryString : '');

    log(options.method + ' ' + url);
    if (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH') {
      log('|--> With body:\n\t\t' + JSON.stringify(options.json));
    }

    return new Promise(function (resolve, reject) {
      request(options, function (err, response) {
        if (err) {
          reject(err);
          return;
        }

        var duration = Date.now() - startMs;
        var requestHref = response.request ? response.request.href : '<unknown url>';

        log('Completed ' + options.method + ' ' + requestHref + ' ' + response.statusCode + ' ' + duration + 'ms');

        resolve(response);
      });
    });
  }

  /**
   * Simple plain object check. This is actually really involved to be 100%
   * accurate
   */
  function isObject (obj) {
    return typeof obj === 'object' && !Array.isArray(obj);
  }

  {{#clients}}
  var {{objectName}} = (function {{objectName}}() {
    {{#methods}}
      /**
       * {{description}}
       * {{#functionParameters}}
       * @param {{type}} {{name}}{{#description}} - {{this}}{{/description}}{{#properties}}
       * @param {{type}} options.{{name}}{{#description}} - {{this}}{{/description}}{{/properties}}{{/functionParameters}}
       */
      function {{functionName}}({{functionParametersJs}}) {
        {{#if requiresOptions}}
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }
        {{/if}}

        {{#if requiresBody}}
        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }
        {{/if}}

        var url = host + {{{uriJs}}};
        var queryString = {
          {{#queryStringParameters}}
          {{name}}: options.{{nameCamelCase}},
          {{/queryStringParameters}}
        };
        var requestOpts = {
          qs: queryString,
          {{#if requestCanHaveBody}}
          json: options.data,
          {{/if}}
          uri: url,
          method: '{{method}}'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            {{#responses}}
            case {{code}}:
              {{#if isResolve}}
                {{#if isUnitType}}
              return Promise.resolve();
                {{else}}
              return Promise.resolve(serverResponse.body);
                {{/if}}
              {{else}}
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              {{/if}}
            {{/responses}}
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
    {{/methods}}

    return {
      {{#methods}}
      {{functionName}}: {{functionName}},
      {{/methods}}
    };
  }());

  {{/clients}}
  {{#clients}}
  this.{{objectName}} = {{objectName}};
  {{/clients}}
}



module.exports = {{constructorName}};
