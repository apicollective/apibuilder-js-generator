<%_ importDeclarations.forEach(({ defaultExport, namedExports, moduleName }) => { _%>
  <%_ if (defaultExport != null) { _%>
    import <%= defaultExport %> from '<%= moduleName %>';
  <%_ } else if (namedExports != null) { _%>
    import {
      <%_ namedExports.forEach((namedExport) => { _%>
      <%= namedExport %>,
      <%_ }) _%>
    } from '<%= moduleName %>';
  <%_ } else { _%>
    import '<%= moduleName %>';
  <%_ } _%>
<%_ }) _%>

import got from 'got';

const schema = new GraphQLSchema({
  query: new GraphQLObjectType({
    name: 'RootQueryType',
    fields: {
    <% config.queries.forEach(({ name, type, args, deprecationReason, description, pathParts, queryParts }) => { %>
      <%= name %>: {
        type: <%= type %>,
        <%_ if (args.length > 0) { _%>
        args: {
        <%_ args.forEach(({ name, type, defaultValue, description }) => { _%>
          <%= name %>: {
            type: <%= type %>, <%# TODO get real type %>
            <%_ if (defaultValue != null) { _%>
            defaultValue: <%- defaultValue %>,
            <%_ } _%>
            <%_ if (description != null) { _%>
            description: '<%= description %>',
            <%_ } _%>
          },
        <%_ }) _%>
        },
        <%_ } _%>
        <%_ if (deprecationReason != null) { _%>
          deprecationReason: '<%= deprecationReason %>',
        <%_ } _%>
        <%_ if (description != null) { _%>
          description: '<%= description %>',
        <%_ } _%>
        resolve: (parent, args, context) => {
          const path = [
            <%_ pathParts.forEach(part => { _%>
              <%_ if (part[0] === ':') { _%>
                args.<%= part.substring(1) %>,
              <%_ } else { _%>
                '<%= part %>',
              <%_ } _%>
            <%_ }) _%>
          ].join('/');

          const query = {};

          <%_ if (queryParts.length > 0) { _%>
            [
              <%_ queryParts.forEach(part => { _%>
                '<%= part %>',
              <%_ }) _%>
            ].forEach(key => {
              if (args.hasOwnProperty(key))
                query[key] = args[key];
            });
          <%_ } _%>

          return got(path, {
            json: true,
            query,
            headers: {
              authorization: context.headers.authorization
            }
          }).then(response => response.body);
        }
      },
    <% }) %>
    }
  }),
});

export default schema;