<%_ importDeclarations.forEach(({ defaultExport, namedExports, moduleName }) => { _%>
  <%_ if (defaultExport != null) { _%>
    import <%= defaultExport %> from '<%= moduleName %>';
  <%_ } else if (namedExports != null) { _%>
    import {
      <%_ namedExports.forEach((namedExport) => { _%>
      <%= namedExport %>,
      <%_ }) _%>
    } from '<%= moduleName %>';
  <%_ } else { _%>
    import '<%= moduleName %>';
  <%_ } _%>
<%_ }) _%>

import got from 'got';

const <%= object.name %> = new GraphQLObjectType({
  name: '<%= object.name %>',
  description: '<%= object.description %>',
  fields: () => ({
  <%_ Object.entries(object.fields).forEach(([key, field]) => { _%>
    <%= key %>: {
      type: <%= field.type %>,
      <%_ if (field.deprecationReason != null) { _%>
        deprecationReason: '<%= field.deprecationReason %>',
      <%_ } _%>
      <%_ if (field.description != null) { _%>
        description: '<%= field.description %>',
      <%_ } _%>
      resolve: (parent, args, context) => {
      <%_ if (field.isReference && field.referenceGetter.getter) { _%>
        <%_ const { getter, pathParts, queryParts } = field.referenceGetter; _%>

      <%_ } else if (field.isPrimitive) { _%>

      <%_ } else { _%>

        return 

      <%_ } _%>
      }

      <%_
      if (field.isReference) {
        const { getter, pathParts, queryParts } = field.referenceGetter;
        if (getter) {
      _%>
          resolve: (parent, args, context) => {
            const path = [
              <%_ pathParts.forEach(part => { _%>
                <%_ if (part[0] === ':') { _%>
                  parent.<%= key %>.<%= part.substring(1) %> || parent.__args.<%= part.substring(1) %>,
                <%_ } else { _%>
                  '<%= part %>',
                <%_ } _%>
              <%_ }) _%>
            ].join('/');

            const query = {};

            <%_ if (queryParts.length > 0) { _%>
              [
                <%_ queryParts.forEach(part => { _%>
                  '<%= part %>',
                <%_ }) _%>
              ].forEach((key) => {
                if (parent.<%= key %>.hasOwnProperty(key))
                  query[key] = parent.<%= key %>[key];
                else if (parent.__args.hasOwnProperty(key))
                  query[key] = parent.__args[key];
              });
            <%_ } _%>

            console.log(`${path}?${Object.entries(query).map(p => p.join('=')).join('?')}`);

            return got(path, {
              json: true,
              query,
              headers: {
                authorization: context.headers.authorization
              }
            }).then(response => response.body);
            // TODO add __args
          },
      <%_ 
        }
      }
      _%>
    },
  <%_ }) _%>
  }),
});

export default <%= object.name %>;