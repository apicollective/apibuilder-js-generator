<%- include('../../../partials/imports') %>

import got from 'got';

<%
  const getters = Object.values(object.fields).filter(field => field.isReference).map(field => field.referenceGetter.getter);
  if (getters.filter(getter => getter != null).length > 0) {
%>
    function searchParent(obj, key) {
      if (obj === undefined)
        return undefined;

      if (obj.__args[key])
        return obj.__args[key];

      if (obj.__parent && obj.__parent[key])
        return obj.__parent[key];

      return searchParent(obj.__parent);
    }
<% } %>

const <%= object.name %> = new GraphQLObjectType({
  name: '<%= object.name %>',
  description: '<%= object.description %>',
  fields: () => ({
  <%_ Object.entries(object.fields).forEach(([key, field]) => { _%>
    <%= key %>: {
      type: <%= field.type %>,
      <%_ if (field.deprecationReason != null) { _%>
        deprecationReason: '<%= field.deprecationReason %>',
      <%_ } _%>
      <%_ if (field.description != null) { _%>
        description: '<%= field.description %>',
      <%_ } _%>
      <%_
      if (field.isReference) {
        const { getter, pathParts, queryParts, isListType, isPrimitiveType } = field.referenceGetter;
        if (getter) {
      _%>
          resolve: (parent, args, context) => {
            const path = [
              <%_ pathParts.forEach(part => { _%>
                <%_ if (part[0] === ':') { _%>
                  parent.<%= key %>.<%= part.substring(1) %> || searchParent(parent, '<%= part.substring(1) %>'),
                <%_ } else { _%>
                  '<%= part %>',
                <%_ } _%>
              <%_ }) _%>
            ].join('/');

            const query = {};

            <%_ if (queryParts.length > 0) { _%>
              [
                <%_ queryParts.forEach(({ name, default: defaultValue, required }) => { _%>
                  <%_ if (!defaultValue && required) { _%>
                    '<%= name %>',
                  <%_ } _%>
                <%_ }) _%>
              ].forEach((key) => {
                if (parent.<%= key %>.hasOwnProperty(key))
                  query[key] = parent.<%= key %>[key];
                else if (parent.__args.hasOwnProperty(key))
                  query[key] = parent.__args[key];
              });

              <%_ queryParts.forEach(({ name, default: defaultValue }) => { _%>
                <%_ if (defaultValue) { _%>
                  query.<%= name %> = '<%= defaultValue %>';
                <%_ } _%>
              <%_ }); _%>
            <%_ } _%>

            console.log(`${path}?${Object.entries(query).map(p => p.join('=')).join('&')}`);

            return got(path, {
              json: true,
              query,
              headers: {
                authorization: context.headers.authorization
              }
            }).then(response =>
              <%_ if (isPrimitiveType) { _%>
                response.body
              <%_ } else if (isListType) { _%>
                response.body.map(elem => Object.assign({}, elem, {
                  __args: args,
                  __parent: parent,
                }))
              <%_ } else { _%>
                Object.assign({}, response.body, {
                  __args: args,
                  __parent: parent,
                })
              <%_ } _%>
            );
          },
      <%_ 
        }
      }
      _%>
    },
  <%_ }) _%>
  }),
});

export default <%= object.name %>;