// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`POST /invocations/:key js_isomorphic: applications.js 1`] = `
"import Client from './client';

export default class Applications extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  getMetadataAndVersionsByApplicationkey(orgKey, applicationKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/metadata/\${applicationKey}/versions\`, options);
  }

  getMetadataAndVersionsAndLatesttxtByApplicationkey(orgKey, applicationKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/metadata/\${applicationKey}/versions/latest.txt\`, options);
  }

  get(orgKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}\`, options);
  }

  post(orgKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}\`, {
      ...options,
       method: 'POST',
    });
  }

  putByApplicationkey(orgKey, applicationKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}\`, {
      ...options,
       method: 'PUT',
    });
  }

  deleteByApplicationkey(orgKey, applicationKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}\`, {
      ...options,
       method: 'DELETE',
    });
  }

  postMoveByApplicationkey(orgKey, applicationKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/move\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: attributes.js 1`] = `
"import Client from './client';

export default class Attributes extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/attributes\`, options);
  }

  getByName(name, options = {}) {
    return this.makeRequest(\`\${this.host}/attributes/\${name}\`, options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/attributes\`, {
      ...options,
       method: 'POST',
    });
  }

  deleteByName(name, options = {}) {
    return this.makeRequest(\`\${this.host}/attributes/\${name}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: authentications.js 1`] = `
"import Client from './client';

export default class Authentications extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  getSessionById(id, options = {}) {
    return this.makeRequest(\`\${this.host}/authentications/session/\${id}\`, options);
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: batch-download-applications.js 1`] = `
"import Client from './client';

export default class BatchDownloadApplications extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  post(orgKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/batch/download/applications\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: changes.js 1`] = `
"import Client from './client';

export default class Changes extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/changes\`, options);
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: client.js 1`] = `
"import EventEmitter from 'events';
import querystring from 'querystring';

let defaultFetch;
let base64Encode;

/**
 * Use the right implementation depending on the execution environment.
 *
 * NOTE: Consumer is expected to polyfill the browser environment when
 * implementation for btoa or fetch is not available.
 */
if (process.browser) {
  defaultFetch = window.fetch.bind(window);
  base64Encode = window.btoa;
} else {
  base64Encode = value => new Buffer(value).toString('base64');
  defaultFetch = require('node-fetch'); // eslint-disable-line global-require
}

export default class Client extends EventEmitter {
  static validateAuth(auth) {
    // string type === default to Basic auth.
    if (typeof auth === 'undefined' || typeof auth === 'string') {
      return;
    }

    if (Object.keys(auth).length !== 2
       || (!Object.prototype.hasOwnProperty.call(auth, 'type')
          || !Object.prototype.hasOwnProperty.call(auth, 'value'))) {
      // eslint-disable-next-line max-len
      throw new Error('Expected auth to be either a string or a valid auth object. Example: { type: \\"jwt\\", value: \\"<jwtToken>\\" } -- Valid types are: basic, bearer and jwt');
    }

    const validTypes = ['basic', 'bearer', 'jwt'];

    if (!validTypes.includes(auth.type)) {
      throw new Error('Auth type must be one of: basic, bearer, jwt');
    }
  }

  static getBasicAuthHeaderValue(auth) {
    return \`Basic \${base64Encode(auth)}\`;
  }

  static getFinalUrl(url, opts) {
    const queryStr = querystring.stringify(opts.params);
    const paramString = queryStr ? \`?\${queryStr}\` : '';
    return \`\${url}\${paramString}\`;
  }

  static possiblyConvertAuthorizationHeader(auth) {
    Client.validateAuth(auth);

    if (typeof auth === 'string') {
      return Client.getBasicAuthHeaderValue(auth);
    }

    if (auth.type === 'basic') {
      return Client.getBasicAuthHeaderValue(auth.value);
    }

    if (auth.type === 'bearer' || auth.type === 'jwt') {
      return \`Bearer \${auth.value}\`;
    }

    throw new Error(\`Cannot create authorization header of type[\${auth.type}]\`);
  }

  constructor(opts = {}) {
    super();

    const {
      serviceName,
      auth,
      host,
      headers = {},
      fetch = defaultFetch,
    } = opts;

    this.serviceName = serviceName;
    this.auth = auth;
    this.host = host;
    this.headers = headers;
    this.fetch = fetch

    // Convert auth if provided in constructor
    if (this.auth) {
      this.auth = Client.possiblyConvertAuthorizationHeader(this.auth);
    }
  }

  logRequest(opts) {
    this.emit('request', opts);
  }

  logResponse(response) {
    this.emit('response', response);
  }

  withAuth(auth) {
    if (auth) {
      this.auth = Client.possiblyConvertAuthorizationHeader(auth);
    }

    return this;
  }

  withHeaders(headers) {
    if (headers) {
      this.headers = { ...this.headers, ...headers };
    }

    return this;
  }

  calculateFinalHeaders(opts) {
    const headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    };

    if (this.auth) {
      headers.Authorization = this.auth;
    }

    return { ...headers, ...this.headers, ...opts.headers };
  }

  makeRequest(url, opts = {}) {
    const startTimeMs = new Date().getTime();
    const finalUrl = Client.getFinalUrl(url, opts);
    const headers = this.calculateFinalHeaders(opts);
    const body = opts.body && typeof opts.body !== 'string' ? JSON.stringify(opts.body) : opts.body;
    const options = {
      credentials: 'same-origin',
      ...opts,
      headers,
      body,
    };

    this.logRequest({ ...options, url });

    return this.fetch(finalUrl, options)
    .then((response) => {
      const endTimeMs = new Date().getTime();
      const roundTripMs = endTimeMs - startTimeMs;

      return new Promise((resolve, reject) => {
        response.text().then((text) => {
          let result = text;

          this.logResponse({
            status: response.status,
            body: result,
            time: roundTripMs,
            type: response.headers.get('content-type'),
          });

          // Return JSON if text can parse as such
          try {
            if (text.length > 0) {
              result = JSON.parse(text);
            }
          } catch (ex) {
            // do nothing, let it be plain text.
          }

          const envelope = {
            ok: response.ok,
            result,
            status: response.status,
          };

          resolve(envelope);
        })
        .catch(err => reject(err)); // Only reject on implementation error, not response
      });
    });
  }
}
"
`;

exports[`POST /invocations/:key js_isomorphic: code.js 1`] = `
"import Client from './client';

export default class Code extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  postForm(orgKey, applicationKey, version, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/form\`, {
      ...options,
       method: 'POST',
    });
  }

  getByGeneratorkey(orgKey, applicationKey, version, generatorKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/\${generatorKey}\`, options);
  }

  postByGeneratorkey(orgKey, applicationKey, version, generatorKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/\${generatorKey}\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: domains.js 1`] = `
"import Client from './client';

export default class Domains extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  post(orgKey, options = {}) {
    return this.makeRequest(\`\${this.host}/domains/\${orgKey}\`, {
      ...options,
       method: 'POST',
    });
  }

  deleteByName(orgKey, name, options = {}) {
    return this.makeRequest(\`\${this.host}/domains/\${orgKey}/\${name}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: email-verification-confirmation-forms.js 1`] = `
"import Client from './client';

export default class EmailVerificationConfirmationForms extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/email_verification_confirmations\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: generator-services.js 1`] = `
"import Client from './client';

export default class GeneratorServices extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/generator_services\`, options);
  }

  getByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/generator_services/\${guid}\`, options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/generator_services\`, {
      ...options,
       method: 'POST',
    });
  }

  deleteByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/generator_services/\${guid}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: generator-with-services.js 1`] = `
"import Client from './client';

export default class GeneratorWithServices extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/generators\`, options);
  }

  getByKey(key, options = {}) {
    return this.makeRequest(\`\${this.host}/generators/\${key}\`, options);
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: healthchecks.js 1`] = `
"import Client from './client';

export default class Healthchecks extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  getHealthcheck(options = {}) {
    return this.makeRequest(\`\${this.host}/_internal_/healthcheck\`, options);
  }

  getMigrate(options = {}) {
    return this.makeRequest(\`\${this.host}/_internal_/migrate\`, options);
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: index.js 1`] = `
"import Applications from './applications';
import Attributes from './attributes';
import Authentications from './authentications';
import BatchDownloadApplications from './batch-download-applications';
import Changes from './changes';
import Code from './code';
import Domains from './domains';
import EmailVerificationConfirmationForms from './email-verification-confirmation-forms';
import GeneratorServices from './generator-services';
import GeneratorWithServices from './generator-with-services';
import Healthchecks from './healthchecks';
import Items from './items';
import Memberships from './memberships';
import MembershipRequests from './membership-requests';
import Organizations from './organizations';
import PasswordResets from './password-resets';
import PasswordResetRequests from './password-reset-requests';
import Subscriptions from './subscriptions';
import Tokens from './tokens';
import Users from './users';
import Validations from './validations';
import Versions from './versions';
import Watches from './watches';


const enums = {
  appSortBy: ['name', 'created_at', 'updated_at', 'visibility'],
  originalType: ['api_json', 'avro_idl', 'service_json', 'swagger'],
  publication: ['membership_requests.create', 'memberships.create', 'applications.create', 'versions.create', 'versions.material_change'],
  sortOrder: ['asc', 'desc'],
  visibility: ['user', 'organization', 'public'],
};


export default class ApibuilderApiClient {
  constructor(opts) {
    let options = opts;
    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    this.enums = enums;

    this.applications = new Applications(options);
    this.attributes = new Attributes(options);
    this.authentications = new Authentications(options);
    this.batchDownloadApplications = new BatchDownloadApplications(options);
    this.changes = new Changes(options);
    this.code = new Code(options);
    this.domains = new Domains(options);
    this.emailVerificationConfirmationForms = new EmailVerificationConfirmationForms(options);
    this.generatorServices = new GeneratorServices(options);
    this.generatorWithServices = new GeneratorWithServices(options);
    this.healthchecks = new Healthchecks(options);
    this.items = new Items(options);
    this.memberships = new Memberships(options);
    this.membershipRequests = new MembershipRequests(options);
    this.organizations = new Organizations(options);
    this.passwordResets = new PasswordResets(options);
    this.passwordResetRequests = new PasswordResetRequests(options);
    this.subscriptions = new Subscriptions(options);
    this.tokens = new Tokens(options);
    this.users = new Users(options);
    this.validations = new Validations(options);
    this.versions = new Versions(options);
    this.watches = new Watches(options);
  }
}
"
`;

exports[`POST /invocations/:key js_isomorphic: items.js 1`] = `
"import Client from './client';

export default class Items extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/items\`, options);
  }

  getByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/items/\${guid}\`, options);
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: logger.js 1`] = `
"/* eslint-disable no-console */
export default class {
  constructor(dirRoot) {
    this.path = dirRoot
      .replace(process.cwd(), '')
      .replace(/\\\\//g, '.');

    if (this.path.startsWith('.')) {
      this.path = this.path.slice(1);
    }

    this.debugEnabled =
      process.env.NODE_DEBUG ?
      process.env.NODE_DEBUG.indexOf('node-sdk') !== -1 :
      false;
  }

  format(message) {
    return \`[apidoc:\${this.path}] \${message}\`;
  }

  debug(message, ...other) {
    if (!this.debugEnabled) return;
    console.info(this.format(message), ...other);
  }

  info(message, ...other) {
    console.info(this.format(message), ...other);
  }

  warn(message, ...other) {
    console.warn(this.format(message), ...other);
  }

  error(message, ...other) {
    console.error(this.format(message), ...other);
  }
}
"
`;

exports[`POST /invocations/:key js_isomorphic: membership-requests.js 1`] = `
"import Client from './client';

export default class MembershipRequests extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/membership_requests\`, options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/membership_requests\`, {
      ...options,
       method: 'POST',
    });
  }

  postAcceptByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/membership_requests/\${guid}/accept\`, {
      ...options,
       method: 'POST',
    });
  }

  postDeclineByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/membership_requests/\${guid}/decline\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: memberships.js 1`] = `
"import Client from './client';

export default class Memberships extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/memberships\`, options);
  }

  getByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/memberships/\${guid}\`, options);
  }

  deleteByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/memberships/\${guid}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: organizations.js 1`] = `
"import Client from './client';

export default class Organizations extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/organizations\`, options);
  }

  getByKey(key, options = {}) {
    return this.makeRequest(\`\${this.host}/organizations/\${key}\`, options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/organizations\`, {
      ...options,
       method: 'POST',
    });
  }

  putByKey(key, options = {}) {
    return this.makeRequest(\`\${this.host}/organizations/\${key}\`, {
      ...options,
       method: 'PUT',
    });
  }

  deleteByKey(key, options = {}) {
    return this.makeRequest(\`\${this.host}/organizations/\${key}\`, {
      ...options,
       method: 'DELETE',
    });
  }

  getAttributesByKey(key, options = {}) {
    return this.makeRequest(\`\${this.host}/organizations/\${key}/attributes\`, options);
  }

  getAttributesByKeyAndName(key, name, options = {}) {
    return this.makeRequest(\`\${this.host}/organizations/\${key}/attributes/\${name}\`, options);
  }

  putAttributesByKeyAndName(key, name, options = {}) {
    return this.makeRequest(\`\${this.host}/organizations/\${key}/attributes/\${name}\`, {
      ...options,
       method: 'PUT',
    });
  }

  deleteAttributesByKeyAndName(key, name, options = {}) {
    return this.makeRequest(\`\${this.host}/organizations/\${key}/attributes/\${name}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: password-reset-requests.js 1`] = `
"import Client from './client';

export default class PasswordResetRequests extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/password_reset_requests\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: password-resets.js 1`] = `
"import Client from './client';

export default class PasswordResets extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/password_resets\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: subscriptions.js 1`] = `
"import Client from './client';

export default class Subscriptions extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/subscriptions\`, options);
  }

  getByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/subscriptions/\${guid}\`, options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/subscriptions\`, {
      ...options,
       method: 'POST',
    });
  }

  deleteByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/subscriptions/\${guid}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: tokens.js 1`] = `
"import Client from './client';

export default class Tokens extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  getUsersByUserGuid(userGuid, options = {}) {
    return this.makeRequest(\`\${this.host}/tokens/users/\${userGuid}\`, options);
  }

  getCleartextByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/tokens/\${guid}/cleartext\`, options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/tokens\`, {
      ...options,
       method: 'POST',
    });
  }

  deleteByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/tokens/\${guid}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: users.js 1`] = `
"import Client from './client';

export default class Users extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/users\`, options);
  }

  getByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/users/\${guid}\`, options);
  }

  postAuthenticate(options = {}) {
    return this.makeRequest(\`\${this.host}/users/authenticate\`, {
      ...options,
       method: 'POST',
    });
  }

  postAuthenticateGithub(options = {}) {
    return this.makeRequest(\`\${this.host}/users/authenticate_github\`, {
      ...options,
       method: 'POST',
    });
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/users\`, {
      ...options,
       method: 'POST',
    });
  }

  putByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/users/\${guid}\`, {
      ...options,
       method: 'PUT',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: validations.js 1`] = `
"import Client from './client';

export default class Validations extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/validations\`, {
      ...options,
       method: 'POST',
    });
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: versions.js 1`] = `
"import Client from './client';

export default class Versions extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  getByApplicationkey(orgKey, applicationKey, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}\`, options);
  }

  getByApplicationkeyAndVersion(orgKey, applicationKey, version, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/\${version}\`, options);
  }

  postByVersion(orgKey, version, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${version}\`, {
      ...options,
       method: 'POST',
    });
  }

  putByApplicationkeyAndVersion(orgKey, applicationKey, version, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/\${version}\`, {
      ...options,
       method: 'PUT',
    });
  }

  deleteByApplicationkeyAndVersion(orgKey, applicationKey, version, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/\${version}\`, {
      ...options,
       method: 'DELETE',
    });
  }

  getExampleByApplicationkeyAndVersionAndTypeName(orgKey, applicationKey, version, typeName, options = {}) {
    return this.makeRequest(\`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/example/\${typeName}\`, options);
  }

}
"
`;

exports[`POST /invocations/:key js_isomorphic: watches.js 1`] = `
"import Client from './client';

export default class Watches extends Client {
  constructor(opts) {
    let options = opts;

    if (typeof opts === 'string') {
      options = { host: opts }; // convert host string to options object
    }

    options.serviceName = 'apibuilder api';

    super(options);
  }

  get(options = {}) {
    return this.makeRequest(\`\${this.host}/watches\`, options);
  }

  getByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/watches/\${guid}\`, options);
  }

  getCheck(options = {}) {
    return this.makeRequest(\`\${this.host}/watches/check\`, options);
  }

  post(options = {}) {
    return this.makeRequest(\`\${this.host}/watches\`, {
      ...options,
       method: 'POST',
    });
  }

  deleteByGuid(guid, options = {}) {
    return this.makeRequest(\`\${this.host}/watches/\${guid}\`, {
      ...options,
       method: 'DELETE',
    });
  }

}
"
`;

exports[`POST /invocations/:key jsdoc: ./index.js 1`] = `
"// -----------------------------------------------------------------------------
// Enum Typedefs
// -----------------------------------------------------------------------------

/**
 * @typedef {\\"name\\" | \\"created_at\\" | \\"updated_at\\" | \\"visibility\\"} AppSortBy
 */

/**
 * @typedef {\\"api_json\\" | \\"avro_idl\\" | \\"service_json\\" | \\"swagger\\"} OriginalType
 */

/**
 * A publication represents something that a user can subscribe to. An example would be subscribing to an email alert whenever a new version of an application is created.
 * @typedef {\\"membership_requests.create\\" | \\"memberships.create\\" | \\"applications.create\\" | \\"versions.create\\" | \\"versions.material_change\\"} Publication
 */

/**
 * @typedef {\\"asc\\" | \\"desc\\"} SortOrder
 */

/**
 * Controls who is able to view this version
 * @typedef {\\"user\\" | \\"organization\\" | \\"public\\"} Visibility
 */

// -----------------------------------------------------------------------------
// Model Typedefs
// -----------------------------------------------------------------------------

/**
 * An application has a name and multiple versions of its API.
 * @typedef {Object} Application
 * @property {string} guid Internal unique identifier for this application.
 * @property {Reference} organization
 * @property {string} name The unique name for this application.
 * @property {string} key Used as a unique key in the URL path. Key is automatically derived from the application name.
 * @property {Visibility} visibility Controls who is able to view this application
 * @property {string} [description]
 * @property {string} last_updated_at The updated_at of this application or created_at of it&#39;s latest version
 * @property {Audit} audit
 */

/**
 * @typedef {Object} ApplicationForm
 * @property {string} name
 * @property {string} [key] Defaults to a key generated from the application name
 * @property {string} [description]
 * @property {Visibility} visibility
 */

/**
 * @typedef {Object} ApplicationMetadata
 * @property {string} guid Internal unique identifier for this application.
 * @property {string} key Used as a unique key in the URL path. Key is automatically derived from the application name.
 */

/**
 * Describes the versions associated with a given application
 * @typedef {Object} ApplicationMetadataVersion
 * @property {string} version
 */

/**
 * Summary of an application sufficient for display and links
 * @typedef {Object} ApplicationSummary
 * @property {string} guid
 * @property {Reference} organization
 * @property {string} key
 */

/**
 * Attributes are globally unique key which allow users to specify additional content to pass in to the code generators.
 * @typedef {Object} Attribute
 * @property {string} guid Internal unique identifier for this attribute.
 * @property {string} name The name of the attribute. Globally unique and an &#39;identifier&#39; (lower case, url safe, etc.)
 * @property {string} [description] Optional description - a good description here will indicate which code generators it applies to and what effect it will have on those code generators.
 * @property {Audit} audit
 */

/**
 * @typedef {Object} AttributeForm
 * @property {string} name
 * @property {string} [description]
 */

/**
 * @typedef {Object} AttributeSummary
 * @property {string} guid Internal unique identifier for this attribute.
 * @property {string} name The name of the attribute. Globally unique and an &#39;identifier&#39; (lower case, url safe, etc.)
 */

/**
 * Attribute values can be set at different levels. Initially we support setting organization wide attributes, but in the future plan to support setting attribute values with each version of the application.
 * @typedef {Object} AttributeValue
 * @property {string} guid Internal unique identifier for this attribute value.
 * @property {AttributeSummary} attribute
 * @property {string} value
 * @property {Audit} audit
 */

/**
 * @typedef {Object} AttributeValueForm
 * @property {string} value
 */

/**
 * Represents the result of a successful authorization
 * @typedef {Object} Authentication
 * @property {User} user
 * @property {Session} session
 */

/**
 * @typedef {Object} BatchDownloadApplicationForm
 * @property {string} application_key
 * @property {string} version
 */

/**
 * @typedef {Object} BatchDownloadApplications
 * @property {Version[]} applications
 */

/**
 * @typedef {Object} BatchDownloadApplicationsForm
 * @property {BatchDownloadApplicationForm[]} applications
 */

/**
 * Represents a single change from one version of a service to another
 * @typedef {Object} Change
 * @property {string} guid
 * @property {Reference} organization
 * @property {Reference} application
 * @property {ChangeVersion} from_version
 * @property {ChangeVersion} to_version
 * @property {Diff} diff
 * @property {string} changed_at Records the timestamp of when the actual change occurred (vs. when we created the changed record)
 * @property {UserSummary} changed_by Records who made the actual change
 * @property {Audit} audit
 */

/**
 * Represents a simpler model of a version specifically for the use case of displaying changes
 * @typedef {Object} ChangeVersion
 * @property {string} guid
 * @property {string} version
 */

/**
 * Separate resource used only for the few actions that require the full token.
 * @typedef {Object} CleartextToken
 * @property {string} token The actual token. Guaranteed to be globally unique.
 */

/**
 * Generated source code.
 * @typedef {Object} Code
 * @property {GeneratorWithService} generator
 * @property {string} source The actual source code.
 * @property {File[]} files A collection of source files
 */

/**
 * @typedef {Object} CodeForm
 * @property {Attribute[]} attributes
 */

/**
 * Represents a single breaking diff of an application version. A breaking diff indicates that it is possible for an existing client to now experience an error or invalid data due to the diff.
 * @typedef {Object} DiffBreaking
 * @property {string} description
 * @property {boolean} is_material
 */

/**
 * Represents a single NON breaking diff of an application version.
 * @typedef {Object} DiffNonBreaking
 * @property {string} description
 * @property {boolean} is_material
 */

/**
 * Represents a single domain name (e.g. www.apibuilder.io). When a new user registers and confirms their email, we automatically associate that user with a member of the organization associated with their domain. For example, if you confirm your account with an email address of example@somedomain.com, we will automatically create a membership request on your behalf to join the organization with domain somedomain.com.
 * @typedef {Object} Domain
 * @property {string} name The domain name
 */

/**
 * Data used to confirm an email address. The token is an internal unique identifier used to lookup the specific email address and user account for which we sent an email verification email.
 * @typedef {Object} EmailVerificationConfirmationForm
 * @property {string} token
 */

/**
 * @typedef {Object} Error
 * @property {string} code Machine readable code for this specific error message
 * @property {string} message Description of the error
 */

/**
 * @typedef {Object} GeneratorForm
 * @property {string} service_guid
 * @property {Generator} generator
 */

/**
 * Defines a service that provides one or more code generators
 * @typedef {Object} GeneratorService
 * @property {string} guid
 * @property {string} uri
 * @property {Audit} audit
 */

/**
 * @typedef {Object} GeneratorServiceForm
 * @property {string} uri
 */

/**
 * Wraps a service and a generator providing easier access for applications.
 * @typedef {Object} GeneratorWithService
 * @property {GeneratorService} service
 * @property {Generator} generator
 */

/**
 * When searching for content, the results of the search will be a list of items. Each item will have enough information to render for the user, including a type and item_guid to enable creating the appropriate link.
 * @typedef {Object} Item
 * @property {string} guid Unique identifer for this item. By using a UUID, you can combine with the type to figure out the URI for the resource
 * @property {ItemDetail} detail
 * @property {string} label
 * @property {string} [description]
 */

/**
 * A membership represents a user in a specific role to an organization. Memberships cannot be created directly. Instead you first create a membership request, then that request is either accepted or declined.
 * @typedef {Object} Membership
 * @property {string} guid Internal unique identifier for this membership.
 * @property {User} user
 * @property {Organization} organization
 * @property {string} role The role this user plays for this organization. Typically member or admin.
 * @property {Audit} audit
 */

/**
 * A membership request represents a user requesting to join an organization with a specific role (e.g. as a member or an admin). Membership requests can be reviewed by any current admin of the organization who can either accept or decline the request.
 * @typedef {Object} MembershipRequest
 * @property {string} guid Internal unique identifier for this membership request.
 * @property {User} user
 * @property {Organization} organization
 * @property {string} role The requested role for membership to this organization. Typically member or admin.
 * @property {Audit} audit
 */

/**
 * @typedef {Object} MoveForm
 * @property {string} org_key The key of the organization to which we are moving this item
 */

/**
 * An organization is used to group a set of applications together.
 * @typedef {Object} Organization
 * @property {string} guid Internal unique identifier for this organization.
 * @property {string} key Used as a unique key in the URL path. Key is automatically derived from the organization name.
 * @property {string} name The name of this organization.
 * @property {string} namespace Global namespace for this organization.
 * @property {Visibility} visibility
 * @property {Domain[]} domains
 * @property {Audit} audit
 */

/**
 * @typedef {Object} OrganizationForm
 * @property {string} name
 * @property {string} [key] Defaults to a url friendy version of the name
 * @property {string} namespace Global namespace for this organization.
 * @property {Visibility} visibility Public organizations will be listed in apibuilder directory. Organizations with visibility organization will only be visible to members of that org.
 * @property {string[]} [domains]
 */

/**
 * Represents the original input used to create an application version
 * @typedef {Object} Original
 * @property {OriginalType} type
 * @property {string} data
 */

/**
 * @typedef {Object} OriginalForm
 * @property {OriginalType} [type] If not specified, we set the type by inspecting the data
 * @property {string} data
 */

/**
 * Allows a user to change their password with authentication from a token.
 * @typedef {Object} PasswordReset
 * @property {string} token Unique one time use token to change a password
 * @property {string} password
 */

/**
 * Create a password reset request - e.g. an email containing a one time URL to change a password
 * @typedef {Object} PasswordResetRequest
 * @property {string} email The email address for which we generate the password reset.
 */

/**
 * Represents a user sessions (e.g. user logged into site)
 * @typedef {Object} Session
 * @property {string} id Cryptographically secure session id
 * @property {string} expires_at
 */

/**
 * Represents a user that is currently subscribed to a publication
 * @typedef {Object} Subscription
 * @property {string} guid Internal unique identifier for this subscription record
 * @property {Organization} organization
 * @property {User} user
 * @property {Publication} publication
 * @property {Audit} audit
 */

/**
 * @typedef {Object} SubscriptionForm
 * @property {string} organization_key
 * @property {string} user_guid
 * @property {Publication} publication
 */

/**
 * A token gives a user access to the API.
 * @typedef {Object} Token
 * @property {string} guid Internal unique identifier for this token.
 * @property {User} user The user to which this token belongs.
 * @property {string} masked_token The masked from of the token.
 * @property {string} [description] optional description to help the user manage the token.
 * @property {Audit} audit
 */

/**
 * @typedef {Object} TokenForm
 * @property {string} user_guid The user for which we are creating the token.
 * @property {string} [description]
 */

/**
 * A user is a top level person interacting with the api doc server.
 * @typedef {Object} User
 * @property {string} guid Internal unique identifier for this user.
 * @property {string} email
 * @property {string} nickname Public unique identifier for this user.
 * @property {string} [name]
 * @property {Audit} audit
 */

/**
 * @typedef {Object} UserForm
 * @property {string} email
 * @property {string} password
 * @property {string} [nickname] Defaults to a unique identifier based on email address
 * @property {string} [name]
 */

/**
 * Summary of a user sufficient for display
 * @typedef {Object} UserSummary
 * @property {string} guid
 * @property {string} nickname
 */

/**
 * @typedef {Object} UserUpdateForm
 * @property {string} email
 * @property {string} nickname
 * @property {string} [name]
 */

/**
 * Used only to validate json files - used as a resource where http status code defines success
 * @typedef {Object} Validation
 * @property {boolean} valid If true, the json schema is valid. If false, there is at least one validation error.
 * @property {string[]} errors Contains any validation errors that result from parsing the json document. If empty, the document is valid.
 */

/**
 * Represents a unique version of the application.
 * @typedef {Object} Version
 * @property {string} guid Internal unique identifier for this version.
 * @property {Reference} organization
 * @property {Reference} application
 * @property {string} version The tag for this version. Can be anything, but if semver style version number is used, we automatically correctly sort by version number to find latest. Otherwise latest version is considered to be the most recently created.
 * @property {Original} [original] The original uploaded file describing this version, if available
 * @property {Service} service spec/spec.json description of this API
 * @property {Audit} audit
 */

/**
 * @typedef {Object} VersionForm
 * @property {OriginalForm} original_form
 * @property {Visibility} [visibility] If provided, updates the visibility for all versions of this application
 */

/**
 * Users can watch individual applications which enables features like receiving an email notification when there is a new version of an application.
 * @typedef {Object} Watch
 * @property {string} guid Internal unique identifier for this watch
 * @property {User} user
 * @property {Organization} organization
 * @property {Application} application
 * @property {Audit} audit
 */

/**
 * @typedef {Object} WatchForm
 * @property {string} user_guid
 * @property {string} organization_key
 * @property {string} application_key
 */

// -----------------------------------------------------------------------------
// Union Typedefs
// -----------------------------------------------------------------------------

/**
 * Represents a single diff in an application
 * @typedef {(DiffBreaking & { type: \\"diff_breaking\\" } | DiffNonBreaking & { type: \\"diff_non_breaking\\" })} Diff
 */

/**
 * Identifies the specific type of item that was indexed by search
 * @typedef {(ApplicationSummary & { type: \\"application_summary\\" })} ItemDetail
 */
"
`;

exports[`POST /invocations/:key node_0_12: app/api/apibuilder api/apibuilder api.js 1`] = `
"var request = require('request');

/**
 * ## Responses
 * Responses from this API with be wrapped in an envelope to assist the caller
 * in dealing with the various responses from the service. There are no types
 * to check against in JavaScript, so this facilitates that.
 *
 *    {
 *      status: 200,
 *      data: { name: \\"John\\", age: 29 }
 *    }
 *
 * ## Logging
 * To enable logging, use the NODE_DEBUG environment variable.
 *
 *    NODE_DEBUG=apidoc
 *
 * @constructor
 */
function Apibuilderapi (host) {
  var showLogMessages = process.env.NODE_DEBUG ? process.env.NODE_DEBUG.indexOf('apidoc') !== -1 : false;

  function log (message) {
    if (showLogMessages) {
      console.log('[apidoc] ' + message);
    }
  }

  function getQueryString (options) {
    var params = [];
    var qs = options.qs || {};

    for (var key in qs) {
      if (qs[key]) {
        params.push(key + '=' + qs[key]);
      }
    }

    return params.join('&');
  }

  function doRequest (options) {
    var startMs = Date.now();
    options = options || {};

    if (!options.json) {
      options.json = true;
    }

    options.qsStringifyOptions = {
      arrayFormat: 'repeat'
    };

    var queryString = getQueryString(options);
    var url = options.uri + (queryString ? '?' + queryString : '');

    log(options.method + ' ' + url);
    if (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH') {
      log('|--> With body:\\\\n\\\\t\\\\t' + JSON.stringify(options.json));
    }

    return new Promise(function (resolve, reject) {
      request(options, function (err, response) {
        if (err) {
          reject(err);
          return;
        }

        var duration = Date.now() - startMs;
        var requestHref = response.request ? response.request.href : '<unknown url>';

        log('Completed ' + options.method + ' ' + requestHref + ' ' + response.statusCode + ' ' + duration + 'ms');

        resolve(response);
      });
    });
  }

  /**
   * Simple plain object check. This is actually really involved to be 100%
   * accurate
   */
  function isObject (obj) {
    return typeof obj === 'object' && !Array.isArray(obj);
  }

  var Applications = (function Applications() {
      /**
       * Returns the versions assocoated with the specified application. The latest version is the first result returned.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {Object} options
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function getMetadataVersionsByApplicationKey(orgKey, applicationKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/' + orgKey + '/metadata/' + applicationKey + '/versions';
        var queryString = {
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns the latest version number as a string
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       */
      function getMetadataVersionsLatestTxtByApplicationKey(orgKey, applicationKey) {


        var url = host + '/' + orgKey + '/metadata/' + applicationKey + '/versions/latest.txt';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Search all applications. Results are always paginated.
       * 
       * @param {string} orgKey
       * @param {Object} options
       * @param {string} options.name
       * @param {string} options.guid
       * @param {string} options.key
       * @param {boolean} options.hasVersion
       * @param {number} options.limit
       * @param {number} options.offset
       * @param {*} options.sortBy
       * @param {*} options.order
       */
      function get(orgKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/' + orgKey + '';
        var queryString = {
          name: options.name,
          guid: options.guid,
          key: options.key,
          has_version: options.hasVersion,
          limit: options.limit,
          offset: options.offset,
          sort_by: options.sortBy,
          order: options.order,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create an application.
       * 
       * @param {string} orgKey
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(orgKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Updates an application.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function putByApplicationKey(orgKey, applicationKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '/' + applicationKey + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'PUT'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Deletes a specific application and its associated versions.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       */
      function deleteByApplicationKey(orgKey, applicationKey) {


        var url = host + '/' + orgKey + '/' + applicationKey + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Moves application to a new organization.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postMoveByApplicationKey(orgKey, applicationKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '/' + applicationKey + '/move';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      getMetadataVersionsByApplicationKey: getMetadataVersionsByApplicationKey,
      getMetadataVersionsLatestTxtByApplicationKey: getMetadataVersionsLatestTxtByApplicationKey,
      get: get,
      post: post,
      putByApplicationKey: putByApplicationKey,
      deleteByApplicationKey: deleteByApplicationKey,
      postMoveByApplicationKey: postMoveByApplicationKey,
    };
  }());

  var Attributes = (function Attributes() {
      /**
       * Search all attributes. Results are always paginated.
       * 
       * @param {Object} options
       * @param {string} options.guid
       * @param {string} options.name
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/attributes';
        var queryString = {
          guid: options.guid,
          name: options.name,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns the attribute with this name.
       * 
       * @param {string} name
       */
      function getByName(name) {


        var url = host + '/attributes/' + name + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a new attribute.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/attributes';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              return Promise.resolve(serverResponse.body);
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Deletes the attribute with this name. Only the user who created an attribute can delete it.
       * 
       * @param {string} name
       */
      function deleteByName(name) {


        var url = host + '/attributes/' + name + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByName: getByName,
      post: post,
      deleteByName: deleteByName,
    };
  }());

  var Authentications = (function Authentications() {
      /**
       * 
       * 
       * @param {string} id
       */
      function getSessionById(id) {


        var url = host + '/authentications/session/' + id + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      getSessionById: getSessionById,
    };
  }());

  var BatchDownloadApplications = (function BatchDownloadApplications() {
      /**
       * Retrieve multiple applications in one api call.
       * 
       * @param {string} orgKey
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postBatchDownloadApplications(orgKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '/batch/download/applications';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      postBatchDownloadApplications: postBatchDownloadApplications,
    };
  }());

  var Changes = (function Changes() {
      /**
       * 
       * 
       * @param {Object} options
       * @param {string} options.orgKey
       * @param {string} options.applicationKey
       * @param {string} options.from
       * @param {string} options.to
       * @param {string} options.type
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/changes';
        var queryString = {
          org_key: options.orgKey,
          application_key: options.applicationKey,
          from: options.from,
          to: options.to,
          type: options.type,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
    };
  }());

  var Code = (function Code() {
      /**
       * Create an invocation form. This is useful primarily for debugging when you want to see exactly what content is being forwarded to the generator
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {string} version
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postFormByApplicationKeyAndVersion(orgKey, applicationKey, version, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '/' + applicationKey + '/' + version + '/form';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Generate code for a specific version of an application.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {string} version
       * @param {string} generatorKey
       */
      function getByApplicationKeyAndVersionAndGeneratorKey(orgKey, applicationKey, version, generatorKey) {


        var url = host + '/' + orgKey + '/' + applicationKey + '/' + version + '/' + generatorKey + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Generate code for a specific version of an application.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {string} version
       * @param {string} generatorKey
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postByApplicationKeyAndVersionAndGeneratorKey(orgKey, applicationKey, version, generatorKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '/' + applicationKey + '/' + version + '/' + generatorKey + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      postFormByApplicationKeyAndVersion: postFormByApplicationKeyAndVersion,
      getByApplicationKeyAndVersionAndGeneratorKey: getByApplicationKeyAndVersionAndGeneratorKey,
      postByApplicationKeyAndVersionAndGeneratorKey: postByApplicationKeyAndVersionAndGeneratorKey,
    };
  }());

  var Domains = (function Domains() {
      /**
       * Add a domain to this organization
       * 
       * @param {string} orgKey
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postByOrgKey(orgKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/domains/' + orgKey + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Remove this domain from this organization
       * 
       * @param {string} orgKey
       * @param {string} name
       */
      function deleteByOrgKeyAndName(orgKey, name) {


        var url = host + '/domains/' + orgKey + '/' + name + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      postByOrgKey: postByOrgKey,
      deleteByOrgKeyAndName: deleteByOrgKeyAndName,
    };
  }());

  var EmailVerificationConfirmationForms = (function EmailVerificationConfirmationForms() {
      /**
       * Validate an email address using a token.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/email_verification_confirmations';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      post: post,
    };
  }());

  var GeneratorServices = (function GeneratorServices() {
      /**
       * List all generator services
       * 
       * @param {Object} options
       * @param {string} options.guid
       * @param {string} options.uri
       * @param {string} options.generatorKey
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/generator_services';
        var queryString = {
          guid: options.guid,
          uri: options.uri,
          generator_key: options.generatorKey,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} guid
       */
      function getByGuid(guid) {


        var url = host + '/generator_services/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/generator_services';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Deletes a generator service.
       * 
       * @param {string} guid
       */
      function deleteByGuid(guid) {


        var url = host + '/generator_services/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByGuid: getByGuid,
      post: post,
      deleteByGuid: deleteByGuid,
    };
  }());

  var GeneratorWithServices = (function GeneratorWithServices() {
      /**
       * List all available generators
       * 
       * @param {Object} options
       * @param {string} options.guid
       * @param {string} options.serviceGuid
       * @param {string} options.serviceUri
       * @param {string} options.attributeName
       * @param {string} options.key
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/generators';
        var queryString = {
          guid: options.guid,
          service_guid: options.serviceGuid,
          service_uri: options.serviceUri,
          attribute_name: options.attributeName,
          key: options.key,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} key
       */
      function getByKey(key) {


        var url = host + '/generators/' + key + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByKey: getByKey,
    };
  }());

  var Healthchecks = (function Healthchecks() {
      /**
       * 
       * 
       */
      function getHealthcheck() {


        var url = host + '/_internal_/healthcheck';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       */
      function getMigrate() {


        var url = host + '/_internal_/migrate';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      getHealthcheck: getHealthcheck,
      getMigrate: getMigrate,
    };
  }());

  var Items = (function Items() {
      /**
       * 
       * 
       * @param {Object} options
       * @param {string} options.q
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/items';
        var queryString = {
          q: options.q,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} guid
       */
      function getByGuid(guid) {


        var url = host + '/items/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByGuid: getByGuid,
    };
  }());

  var Memberships = (function Memberships() {
      /**
       * Search all memberships. Results are always paginated.
       * 
       * @param {Object} options
       * @param {string} options.orgGuid
       * @param {string} options.orgKey
       * @param {string} options.userGuid
       * @param {string} options.role
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/memberships';
        var queryString = {
          org_guid: options.orgGuid,
          org_key: options.orgKey,
          user_guid: options.userGuid,
          role: options.role,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} guid
       */
      function getByGuid(guid) {


        var url = host + '/memberships/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} guid
       */
      function deleteByGuid(guid) {


        var url = host + '/memberships/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByGuid: getByGuid,
      deleteByGuid: deleteByGuid,
    };
  }());

  var MembershipRequests = (function MembershipRequests() {
      /**
       * Search all membership requests. Results are always paginated.
       * 
       * @param {Object} options
       * @param {string} options.orgGuid
       * @param {string} options.orgKey
       * @param {string} options.userGuid
       * @param {string} options.role
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/membership_requests';
        var queryString = {
          org_guid: options.orgGuid,
          org_key: options.orgKey,
          user_guid: options.userGuid,
          role: options.role,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a membership request
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/membership_requests';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Accepts this membership request. User will become a member of the specified organization.
       * 
       * @param {string} guid
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postAcceptByGuid(guid, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/membership_requests/' + guid + '/accept';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Declines this membership request. User will NOT become a member of the specified organization.
       * 
       * @param {string} guid
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postDeclineByGuid(guid, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/membership_requests/' + guid + '/decline';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      post: post,
      postAcceptByGuid: postAcceptByGuid,
      postDeclineByGuid: postDeclineByGuid,
    };
  }());

  var Organizations = (function Organizations() {
      /**
       * Search all organizations. Results are always paginated.
       * 
       * @param {Object} options
       * @param {string} options.guid
       * @param {string} options.userGuid
       * @param {string} options.key
       * @param {string} options.name
       * @param {string} options.namespace
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/organizations';
        var queryString = {
          guid: options.guid,
          user_guid: options.userGuid,
          key: options.key,
          name: options.name,
          namespace: options.namespace,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns the organization with this key.
       * 
       * @param {string} key
       */
      function getByKey(key) {


        var url = host + '/organizations/' + key + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a new organization.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/organizations';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Update an organization.
       * 
       * @param {string} key
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function putByKey(key, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/organizations/' + key + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'PUT'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Deletes an organization and all of its associated applications.
       * 
       * @param {string} key
       */
      function deleteByKey(key) {


        var url = host + '/organizations/' + key + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns all attribute values for this organization. Results are always paginated.
       * 
       * @param {string} key
       * @param {Object} options
       * @param {string} options.name
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function getAttributesByKey(key, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/organizations/' + key + '/attributes';
        var queryString = {
          name: options.name,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns the attribute value with this name.
       * 
       * @param {string} key
       * @param {string} name
       */
      function getAttributesByKeyAndName(key, name) {


        var url = host + '/organizations/' + key + '/attributes/' + name + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create or update a new attribute value.
       * 
       * @param {string} key
       * @param {string} name
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function putAttributesByKeyAndName(key, name, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/organizations/' + key + '/attributes/' + name + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'PUT'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 201:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Deletes the attribute value with the specified name. Only the user who created an attribute value can delete it.
       * 
       * @param {string} key
       * @param {string} name
       */
      function deleteAttributesByKeyAndName(key, name) {


        var url = host + '/organizations/' + key + '/attributes/' + name + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByKey: getByKey,
      post: post,
      putByKey: putByKey,
      deleteByKey: deleteByKey,
      getAttributesByKey: getAttributesByKey,
      getAttributesByKeyAndName: getAttributesByKeyAndName,
      putAttributesByKeyAndName: putAttributesByKeyAndName,
      deleteAttributesByKeyAndName: deleteAttributesByKeyAndName,
    };
  }());

  var PasswordResets = (function PasswordResets() {
      /**
       * Change the password for this token. If the token is invalid, has been used, or otherwise no longer can be applied, errors will be returned as 409s. A 204 represents that the user has successfully changed their password.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/password_resets';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      post: post,
    };
  }());

  var PasswordResetRequests = (function PasswordResetRequests() {
      /**
       * Create a new password reset. This will send the user an email with a link to reset their password.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/password_reset_requests';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      post: post,
    };
  }());

  var Subscriptions = (function Subscriptions() {
      /**
       * Search subscriptions. Always paginated.
       * 
       * @param {Object} options
       * @param {string} options.guid
       * @param {string} options.organizationKey
       * @param {string} options.userGuid
       * @param {*} options.publication
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/subscriptions';
        var queryString = {
          guid: options.guid,
          organization_key: options.organizationKey,
          user_guid: options.userGuid,
          publication: options.publication,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns information about a specific subscription.
       * 
       * @param {string} guid
       */
      function getByGuid(guid) {


        var url = host + '/subscriptions/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a new subscription.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/subscriptions';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} guid
       */
      function deleteByGuid(guid) {


        var url = host + '/subscriptions/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByGuid: getByGuid,
      post: post,
      deleteByGuid: deleteByGuid,
    };
  }());

  var Tokens = (function Tokens() {
      /**
       * 
       * 
       * @param {string} userGuid
       * @param {Object} options
       * @param {string} options.guid
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function getUsersByUserGuid(userGuid, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/tokens/users/' + userGuid + '';
        var queryString = {
          guid: options.guid,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Used to fetch the clear text token.
       * 
       * @param {string} guid
       */
      function getCleartextByGuid(guid) {


        var url = host + '/tokens/' + guid + '/cleartext';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a new API token for this user
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/tokens';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} guid
       */
      function deleteByGuid(guid) {


        var url = host + '/tokens/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      getUsersByUserGuid: getUsersByUserGuid,
      getCleartextByGuid: getCleartextByGuid,
      post: post,
      deleteByGuid: deleteByGuid,
    };
  }());

  var Users = (function Users() {
      /**
       * Search for a specific user. You must specify at least 1 parameter - either a guid, email or token - and will receive back either 0 or 1 users.
       * 
       * @param {Object} options
       * @param {string} options.guid
       * @param {string} options.email
       * @param {string} options.nickname
       * @param {string} options.token
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/users';
        var queryString = {
          guid: options.guid,
          email: options.email,
          nickname: options.nickname,
          token: options.token,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns information about the user with this guid.
       * 
       * @param {string} guid
       */
      function getByGuid(guid) {


        var url = host + '/users/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Used to authenticate a user with an email address and password. Successful authentication returns an instance of the user model. Failed authorizations of any kind are returned as a generic error with code user_authorization_failed.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postAuthenticate(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/users/authenticate';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Used to authenticate a user using a github access token. This is equivalent to running the following command to get the user info: curl -H &#x27;Authorization: Bearer code&#x27; https://api.github.com/user
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postAuthenticateGithub(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/users/authenticate_github';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a new user.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/users';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Updates information about the user with the specified guid.
       * 
       * @param {string} guid
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function putByGuid(guid, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/users/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'PUT'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByGuid: getByGuid,
      postAuthenticate: postAuthenticate,
      postAuthenticateGithub: postAuthenticateGithub,
      post: post,
      putByGuid: putByGuid,
    };
  }());

  var Validations = (function Validations() {
      /**
       * 
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/validations';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      post: post,
    };
  }());

  var Versions = (function Versions() {
      /**
       * Search all versions of this application. Results are always paginated.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {Object} options
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function getByApplicationKey(orgKey, applicationKey, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/' + orgKey + '/' + applicationKey + '';
        var queryString = {
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Retrieve a specific version of an application.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {string} version
       */
      function getByApplicationKeyAndVersion(orgKey, applicationKey, version) {


        var url = host + '/' + orgKey + '/' + applicationKey + '/' + version + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a new version for an application
       * 
       * @param {string} orgKey
       * @param {string} version
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function postByVersion(orgKey, version, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '/' + version + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Upsert a version of an application
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {string} version
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function putByApplicationKeyAndVersion(orgKey, applicationKey, version, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/' + orgKey + '/' + applicationKey + '/' + version + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'PUT'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Deletes a specific version.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {string} version
       */
      function deleteByApplicationKeyAndVersion(orgKey, applicationKey, version) {


        var url = host + '/' + orgKey + '/' + applicationKey + '/' + version + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Generates an example JSON document of the type with the specified name.
       * 
       * @param {string} orgKey
       * @param {string} applicationKey
       * @param {string} version
       * @param {string} typeName
       * @param {Object} options
       * @param {string} options.subTypeName
       * @param {boolean} options.optionalFields
       */
      function getExampleByApplicationKeyAndVersionAndTypeName(orgKey, applicationKey, version, typeName, options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/' + orgKey + '/' + applicationKey + '/' + version + '/example/' + typeName + '';
        var queryString = {
          sub_type_name: options.subTypeName,
          optional_fields: options.optionalFields,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      getByApplicationKey: getByApplicationKey,
      getByApplicationKeyAndVersion: getByApplicationKeyAndVersion,
      postByVersion: postByVersion,
      putByApplicationKeyAndVersion: putByApplicationKeyAndVersion,
      deleteByApplicationKeyAndVersion: deleteByApplicationKeyAndVersion,
      getExampleByApplicationKeyAndVersionAndTypeName: getExampleByApplicationKeyAndVersionAndTypeName,
    };
  }());

  var Watches = (function Watches() {
      /**
       * Search attributes. Always paginated.
       * 
       * @param {Object} options
       * @param {string} options.guid
       * @param {string} options.userGuid
       * @param {string} options.organizationKey
       * @param {string} options.applicationKey
       * @param {number} options.limit
       * @param {number} options.offset
       */
      function get(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/watches';
        var queryString = {
          guid: options.guid,
          user_guid: options.userGuid,
          organization_key: options.organizationKey,
          application_key: options.applicationKey,
          limit: options.limit,
          offset: options.offset,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Returns information about a specific watch.
       * 
       * @param {string} guid
       */
      function getByGuid(guid) {


        var url = host + '/watches/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Quick check if a user is watching a specific application.
       * 
       * @param {Object} options
       * @param {string} options.userGuid
       * @param {string} options.organizationKey
       * @param {string} options.applicationKey
       */
      function getCheck(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }


        var url = host + '/watches/check';
        var queryString = {
          user_guid: options.userGuid,
          organization_key: options.organizationKey,
          application_key: options.applicationKey,
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'GET'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              return Promise.resolve(serverResponse.body);
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * Create a new watch.
       * 
       * @param {Object} options
       * @param {Object} options.data - The request body
       */
      function post(options) {
        // if options is not defined, set it
        options = options || {};

        // otherwise if it's not the kind of object we want...
        if (!isObject(options)) {
          return Promise.reject(new Error('options parameter is required and must be a plain object'));
        }

        if (!options.data) {
          return Promise.reject(new Error('options.data property is required.'));
        }

        var url = host + '/watches';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          json: options.data,
          uri: url,
          method: 'POST'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              return Promise.resolve(serverResponse.body);
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }
      /**
       * 
       * 
       * @param {string} guid
       */
      function deleteByGuid(guid) {


        var url = host + '/watches/' + guid + '';
        var queryString = {
        };
        var requestOpts = {
          qs: queryString,
          uri: url,
          method: 'DELETE'
        };

        return doRequest(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      }

    return {
      get: get,
      getByGuid: getByGuid,
      getCheck: getCheck,
      post: post,
      deleteByGuid: deleteByGuid,
    };
  }());

  this.Applications = Applications;
  this.Attributes = Attributes;
  this.Authentications = Authentications;
  this.BatchDownloadApplications = BatchDownloadApplications;
  this.Changes = Changes;
  this.Code = Code;
  this.Domains = Domains;
  this.EmailVerificationConfirmationForms = EmailVerificationConfirmationForms;
  this.GeneratorServices = GeneratorServices;
  this.GeneratorWithServices = GeneratorWithServices;
  this.Healthchecks = Healthchecks;
  this.Items = Items;
  this.Memberships = Memberships;
  this.MembershipRequests = MembershipRequests;
  this.Organizations = Organizations;
  this.PasswordResets = PasswordResets;
  this.PasswordResetRequests = PasswordResetRequests;
  this.Subscriptions = Subscriptions;
  this.Tokens = Tokens;
  this.Users = Users;
  this.Validations = Validations;
  this.Versions = Versions;
  this.Watches = Watches;
}



module.exports = Apibuilderapi;
"
`;

exports[`POST /invocations/:key node_5_es5: applications.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"getMetadataAndVersionsByApplicationkey\\",
    value: function getMetadataAndVersionsByApplicationkey(orgKey, applicationKey, options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/\\" + orgKey + \\"/metadata/\\" + applicationKey + \\"/versions\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getMetadataAndVersionsAndLatesttxtByApplicationkey\\",
    value: function getMetadataAndVersionsAndLatesttxtByApplicationkey(orgKey, applicationKey, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/\\" + orgKey + \\"/metadata/\\" + applicationKey + \\"/versions/latest.txt\\";
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"get\\",
    value: function get(orgKey, options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"name\\",
          \\"nameCamelCase\\": \\"name\\"
        }, {
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"key\\",
          \\"nameCamelCase\\": \\"key\\"
        }, {
          \\"name\\": \\"has_version\\",
          \\"nameCamelCase\\": \\"hasVersion\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }, {
          \\"name\\": \\"sort_by\\",
          \\"nameCamelCase\\": \\"sortBy\\"
        }, {
          \\"name\\": \\"order\\",
          \\"nameCamelCase\\": \\"order\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/\\" + orgKey;
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(orgKey, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"application_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/\\" + orgKey;
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"putByApplicationkey\\",
    value: function putByApplicationkey(orgKey, applicationKey, options) {
      var _this5 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"application_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"PUT\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this5.host + \\"/\\" + orgKey + \\"/\\" + applicationKey;
        var auth = opts.auth || _this5.auth;
        var headers = _this5.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByApplicationkey\\",
    value: function deleteByApplicationkey(orgKey, applicationKey, options) {
      var _this6 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this6.host + \\"/\\" + orgKey + \\"/\\" + applicationKey;
        var auth = opts.auth || _this6.auth;
        var headers = _this6.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"postMoveByApplicationkey\\",
    value: function postMoveByApplicationkey(orgKey, applicationKey, options) {
      var _this7 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"move_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this7.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/move\\";
        var auth = opts.auth || _this7.auth;
        var headers = _this7.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: attributes.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"name\\",
          \\"nameCamelCase\\": \\"name\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/attributes\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByName\\",
    value: function getByName(name, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/attributes/\\" + name;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"attribute_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/attributes\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByName\\",
    value: function deleteByName(name, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/attributes/\\" + name;
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: authentications.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"getSessionById\\",
    value: function getSessionById(id, options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/authentications/session/\\" + id;
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: batch_download_applications.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"post\\",
    value: function post(orgKey, options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"batch_download_applications_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/\\" + orgKey + \\"/batch/download/applications\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: changes.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"org_key\\",
          \\"nameCamelCase\\": \\"orgKey\\"
        }, {
          \\"name\\": \\"application_key\\",
          \\"nameCamelCase\\": \\"applicationKey\\"
        }, {
          \\"name\\": \\"from\\",
          \\"nameCamelCase\\": \\"from\\"
        }, {
          \\"name\\": \\"to\\",
          \\"nameCamelCase\\": \\"to\\"
        }, {
          \\"name\\": \\"type\\",
          \\"nameCamelCase\\": \\"type\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/changes\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: client.js 1`] = `
"'use strict';

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _applications = require('./applications');

var _applications2 = _interopRequireDefault(_applications);

var _attributes = require('./attributes');

var _attributes2 = _interopRequireDefault(_attributes);

var _authentications = require('./authentications');

var _authentications2 = _interopRequireDefault(_authentications);

var _batch_download_applications = require('./batch_download_applications');

var _batch_download_applications2 = _interopRequireDefault(_batch_download_applications);

var _changes = require('./changes');

var _changes2 = _interopRequireDefault(_changes);

var _code = require('./code');

var _code2 = _interopRequireDefault(_code);

var _domains = require('./domains');

var _domains2 = _interopRequireDefault(_domains);

var _email_verification_confirmation_forms = require('./email_verification_confirmation_forms');

var _email_verification_confirmation_forms2 = _interopRequireDefault(_email_verification_confirmation_forms);

var _generator_services = require('./generator_services');

var _generator_services2 = _interopRequireDefault(_generator_services);

var _generator_with_services = require('./generator_with_services');

var _generator_with_services2 = _interopRequireDefault(_generator_with_services);

var _healthchecks = require('./healthchecks');

var _healthchecks2 = _interopRequireDefault(_healthchecks);

var _items = require('./items');

var _items2 = _interopRequireDefault(_items);

var _memberships = require('./memberships');

var _memberships2 = _interopRequireDefault(_memberships);

var _membership_requests = require('./membership_requests');

var _membership_requests2 = _interopRequireDefault(_membership_requests);

var _organizations = require('./organizations');

var _organizations2 = _interopRequireDefault(_organizations);

var _password_resets = require('./password_resets');

var _password_resets2 = _interopRequireDefault(_password_resets);

var _password_reset_requests = require('./password_reset_requests');

var _password_reset_requests2 = _interopRequireDefault(_password_reset_requests);

var _subscriptions = require('./subscriptions');

var _subscriptions2 = _interopRequireDefault(_subscriptions);

var _tokens = require('./tokens');

var _tokens2 = _interopRequireDefault(_tokens);

var _users = require('./users');

var _users2 = _interopRequireDefault(_users);

var _validations = require('./validations');

var _validations2 = _interopRequireDefault(_validations);

var _versions = require('./versions');

var _versions2 = _interopRequireDefault(_versions);

var _watches = require('./watches');

var _watches2 = _interopRequireDefault(_watches);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.Applications = new _applications2.default(host, auth, headers);
    this.Attributes = new _attributes2.default(host, auth, headers);
    this.Authentications = new _authentications2.default(host, auth, headers);
    this.BatchDownloadApplications = new _batch_download_applications2.default(host, auth, headers);
    this.Changes = new _changes2.default(host, auth, headers);
    this.Code = new _code2.default(host, auth, headers);
    this.Domains = new _domains2.default(host, auth, headers);
    this.EmailVerificationConfirmationForms = new _email_verification_confirmation_forms2.default(host, auth, headers);
    this.GeneratorServices = new _generator_services2.default(host, auth, headers);
    this.GeneratorWithServices = new _generator_with_services2.default(host, auth, headers);
    this.Healthchecks = new _healthchecks2.default(host, auth, headers);
    this.Items = new _items2.default(host, auth, headers);
    this.Memberships = new _memberships2.default(host, auth, headers);
    this.MembershipRequests = new _membership_requests2.default(host, auth, headers);
    this.Organizations = new _organizations2.default(host, auth, headers);
    this.PasswordResets = new _password_resets2.default(host, auth, headers);
    this.PasswordResetRequests = new _password_reset_requests2.default(host, auth, headers);
    this.Subscriptions = new _subscriptions2.default(host, auth, headers);
    this.Tokens = new _tokens2.default(host, auth, headers);
    this.Users = new _users2.default(host, auth, headers);
    this.Validations = new _validations2.default(host, auth, headers);
    this.Versions = new _versions2.default(host, auth, headers);
    this.Watches = new _watches2.default(host, auth, headers);
  }

  _createClass(_class, [{
    key: 'getHost',
    value: function getHost() {
      return this.host;
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: code.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"postForm\\",
    value: function postForm(orgKey, applicationKey, version, options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"code_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/\\" + version + \\"/form\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByGeneratorkey\\",
    value: function getByGeneratorkey(orgKey, applicationKey, version, generatorKey, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/\\" + version + \\"/\\" + generatorKey;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"postByGeneratorkey\\",
    value: function postByGeneratorkey(orgKey, applicationKey, version, generatorKey, options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"code_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/\\" + version + \\"/\\" + generatorKey;
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: domains.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"post\\",
    value: function post(orgKey, options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"domain\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/domains/\\" + orgKey;
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByName\\",
    value: function deleteByName(orgKey, name, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/domains/\\" + orgKey + \\"/\\" + name;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: email_verification_confirmation_forms.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"post\\",
    value: function post(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"email_verification_confirmation_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/email_verification_confirmations\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: generator_services.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"uri\\",
          \\"nameCamelCase\\": \\"uri\\"
        }, {
          \\"name\\": \\"generator_key\\",
          \\"nameCamelCase\\": \\"generatorKey\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/generator_services\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByGuid\\",
    value: function getByGuid(guid, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/generator_services/\\" + guid;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"generator_service_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/generator_services\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByGuid\\",
    value: function deleteByGuid(guid, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/generator_services/\\" + guid;
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: generator_with_services.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"service_guid\\",
          \\"nameCamelCase\\": \\"serviceGuid\\"
        }, {
          \\"name\\": \\"service_uri\\",
          \\"nameCamelCase\\": \\"serviceUri\\"
        }, {
          \\"name\\": \\"attribute_name\\",
          \\"nameCamelCase\\": \\"attributeName\\"
        }, {
          \\"name\\": \\"key\\",
          \\"nameCamelCase\\": \\"key\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/generators\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByKey\\",
    value: function getByKey(key, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/generators/\\" + key;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: healthchecks.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"getHealthcheck\\",
    value: function getHealthcheck(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/_internal_/healthcheck\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getMigrate\\",
    value: function getMigrate(options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/_internal_/migrate\\";
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: items.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"q\\",
          \\"nameCamelCase\\": \\"q\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/items\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByGuid\\",
    value: function getByGuid(guid, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/items/\\" + guid;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: membership_requests.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"org_guid\\",
          \\"nameCamelCase\\": \\"orgGuid\\"
        }, {
          \\"name\\": \\"org_key\\",
          \\"nameCamelCase\\": \\"orgKey\\"
        }, {
          \\"name\\": \\"user_guid\\",
          \\"nameCamelCase\\": \\"userGuid\\"
        }, {
          \\"name\\": \\"role\\",
          \\"nameCamelCase\\": \\"role\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/membership_requests\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": true,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/membership_requests\\";
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"postAcceptByGuid\\",
    value: function postAcceptByGuid(guid, options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": true,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/membership_requests/\\" + guid + \\"/accept\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"postDeclineByGuid\\",
    value: function postDeclineByGuid(guid, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": true,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/membership_requests/\\" + guid + \\"/decline\\";
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: memberships.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"org_guid\\",
          \\"nameCamelCase\\": \\"orgGuid\\"
        }, {
          \\"name\\": \\"org_key\\",
          \\"nameCamelCase\\": \\"orgKey\\"
        }, {
          \\"name\\": \\"user_guid\\",
          \\"nameCamelCase\\": \\"userGuid\\"
        }, {
          \\"name\\": \\"role\\",
          \\"nameCamelCase\\": \\"role\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/memberships\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByGuid\\",
    value: function getByGuid(guid, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/memberships/\\" + guid;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByGuid\\",
    value: function deleteByGuid(guid, options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/memberships/\\" + guid;
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: organizations.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"user_guid\\",
          \\"nameCamelCase\\": \\"userGuid\\"
        }, {
          \\"name\\": \\"key\\",
          \\"nameCamelCase\\": \\"key\\"
        }, {
          \\"name\\": \\"name\\",
          \\"nameCamelCase\\": \\"name\\"
        }, {
          \\"name\\": \\"namespace\\",
          \\"nameCamelCase\\": \\"namespace\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/organizations\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByKey\\",
    value: function getByKey(key, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/organizations/\\" + key;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"organization_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/organizations\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"putByKey\\",
    value: function putByKey(key, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"organization_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"PUT\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/organizations/\\" + key;
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByKey\\",
    value: function deleteByKey(key, options) {
      var _this5 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this5.host + \\"/organizations/\\" + key;
        var auth = opts.auth || _this5.auth;
        var headers = _this5.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getAttributesByKey\\",
    value: function getAttributesByKey(key, options) {
      var _this6 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"name\\",
          \\"nameCamelCase\\": \\"name\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this6.host + \\"/organizations/\\" + key + \\"/attributes\\";
        var auth = opts.auth || _this6.auth;
        var headers = _this6.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getAttributesByKeyAndName\\",
    value: function getAttributesByKeyAndName(key, name, options) {
      var _this7 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this7.host + \\"/organizations/\\" + key + \\"/attributes/\\" + name;
        var auth = opts.auth || _this7.auth;
        var headers = _this7.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"putAttributesByKeyAndName\\",
    value: function putAttributesByKeyAndName(key, name, options) {
      var _this8 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"attribute_value_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"PUT\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this8.host + \\"/organizations/\\" + key + \\"/attributes/\\" + name;
        var auth = opts.auth || _this8.auth;
        var headers = _this8.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 201:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteAttributesByKeyAndName\\",
    value: function deleteAttributesByKeyAndName(key, name, options) {
      var _this9 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this9.host + \\"/organizations/\\" + key + \\"/attributes/\\" + name;
        var auth = opts.auth || _this9.auth;
        var headers = _this9.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: package.json 1`] = `
"{
  \\"name\\": \\"apibuilder api\\",
  \\"version\\": \\"0.15.47\\",
  \\"main\\": \\"client.js\\",
  \\"description\\": \\"Node 5 apibuilder client\\",
  \\"author\\": \\"apidoc.me\\"
}"
`;

exports[`POST /invocations/:key node_5_es5: password_reset_requests.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"post\\",
    value: function post(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"password_reset_request\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/password_reset_requests\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: password_resets.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"post\\",
    value: function post(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"password_reset\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/password_resets\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: subscriptions.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"organization_key\\",
          \\"nameCamelCase\\": \\"organizationKey\\"
        }, {
          \\"name\\": \\"user_guid\\",
          \\"nameCamelCase\\": \\"userGuid\\"
        }, {
          \\"name\\": \\"publication\\",
          \\"nameCamelCase\\": \\"publication\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/subscriptions\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByGuid\\",
    value: function getByGuid(guid, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/subscriptions/\\" + guid;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"subscription_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/subscriptions\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByGuid\\",
    value: function deleteByGuid(guid, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/subscriptions/\\" + guid;
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: tokens.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"getUsersByUserGuid\\",
    value: function getUsersByUserGuid(userGuid, options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/tokens/users/\\" + userGuid;
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getCleartextByGuid\\",
    value: function getCleartextByGuid(guid, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/tokens/\\" + guid + \\"/cleartext\\";
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"token_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/tokens\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByGuid\\",
    value: function deleteByGuid(guid, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/tokens/\\" + guid;
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: users.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"email\\",
          \\"nameCamelCase\\": \\"email\\"
        }, {
          \\"name\\": \\"nickname\\",
          \\"nameCamelCase\\": \\"nickname\\"
        }, {
          \\"name\\": \\"token\\",
          \\"nameCamelCase\\": \\"token\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/users\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByGuid\\",
    value: function getByGuid(guid, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/users/\\" + guid;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"postAuthenticate\\",
    value: function postAuthenticate(options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": true,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/users/authenticate\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"postAuthenticateGithub\\",
    value: function postAuthenticateGithub(options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": true,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/users/authenticate_github\\";
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this5 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"user_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this5.host + \\"/users\\";
        var auth = opts.auth || _this5.auth;
        var headers = _this5.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"putByGuid\\",
    value: function putByGuid(guid, options) {
      var _this6 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"user_update_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"PUT\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this6.host + \\"/users/\\" + guid;
        var auth = opts.auth || _this6.auth;
        var headers = _this6.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: utils.js 1`] = `
"'use strict';

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _typeof = typeof Symbol === \\"function\\" && typeof Symbol.iterator === \\"symbol\\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \\"function\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\"symbol\\" : typeof obj; };

exports.getRequestOptions = getRequestOptions;
exports.dataIsAndCanBePrimitive = dataIsAndCanBePrimitive;
exports.getApidocTypeForPrimitive = getApidocTypeForPrimitive;
exports.getTypesForUnion = getTypesForUnion;
exports.isObject = isObject;
exports.getQueryString = getQueryString;
exports.doRequest = doRequest;

var _request = require('request');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var showLogMessages = process.env.NODE_DEBUG ? process.env.NODE_DEBUG.indexOf('apidoc') !== -1 : false;
var enums = [{ \\"name\\": \\"app_sort_by\\", \\"plural\\": \\"app_sort_bies\\", \\"description\\": null, \\"deprecation\\": null, \\"values\\": [{ \\"name\\": \\"name\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"created_at\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"updated_at\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"visibility\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }], \\"attributes\\": [] }, { \\"name\\": \\"original_type\\", \\"plural\\": \\"original_types\\", \\"description\\": null, \\"deprecation\\": null, \\"values\\": [{ \\"name\\": \\"api_json\\", \\"description\\": \\"The original is in the api.json format\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"avro_idl\\", \\"description\\": \\"The original is in Avro Idl format\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"service_json\\", \\"description\\": \\"This is the canonical service spec for apibuilder itself. See https://www.apibuilder.io/apicollective/apibuilder-spec/latest#model-service\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"swagger\\", \\"description\\": \\"The original in the Swagger JSON or YAML format\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }], \\"attributes\\": [] }, { \\"name\\": \\"publication\\", \\"plural\\": \\"publications\\", \\"description\\": \\"A publication represents something that a user can subscribe to. An example would be subscribing to an email alert whenever a new version of an application is created.\\", \\"deprecation\\": null, \\"values\\": [{ \\"name\\": \\"membership_requests.create\\", \\"description\\": \\"For organizations for which I am an administrator, email me whenever a user applies to join the org.\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"memberships.create\\", \\"description\\": \\"For organizations for which I am a member, email me whenever a user joins the org.\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"applications.create\\", \\"description\\": \\"For organizations for which I am a member, email me whenever an application is created.\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"versions.create\\", \\"description\\": \\"For applications that I watch, email me whenever a version is created.\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"versions.material_change\\", \\"description\\": \\"For applications that I watch, email me whenever there is a material change. Generally, this means avoiding email for simple changes (like only a version change).\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }], \\"attributes\\": [] }, { \\"name\\": \\"sort_order\\", \\"plural\\": \\"sort_orders\\", \\"description\\": null, \\"deprecation\\": null, \\"values\\": [{ \\"name\\": \\"asc\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"desc\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }], \\"attributes\\": [] }, { \\"name\\": \\"visibility\\", \\"plural\\": \\"visibilities\\", \\"description\\": \\"Controls who is able to view this version\\", \\"deprecation\\": null, \\"values\\": [{ \\"name\\": \\"user\\", \\"description\\": \\"Only the creator can view this application\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"organization\\", \\"description\\": \\"Any member of the organization can view this application\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }, { \\"name\\": \\"public\\", \\"description\\": \\"Anybody, including non logged in users, can view this application\\", \\"deprecation\\": null, \\"attributes\\": [], \\"value\\": null }], \\"attributes\\": [] }];
var unions = [{ \\"name\\": \\"diff\\", \\"plural\\": \\"diffs\\", \\"discriminator\\": \\"type\\", \\"description\\": \\"Represents a single diff in an application\\", \\"deprecation\\": null, \\"types\\": [{ \\"type\\": \\"diff_breaking\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"default\\": null, \\"discriminator_value\\": \\"diff_breaking\\" }, { \\"type\\": \\"diff_non_breaking\\", \\"description\\": null, \\"deprecation\\": null, \\"attributes\\": [], \\"default\\": null, \\"discriminator_value\\": \\"diff_non_breaking\\" }], \\"attributes\\": [], \\"interfaces\\": [\\"diff\\"] }, { \\"name\\": \\"item_detail\\", \\"plural\\": \\"item_details\\", \\"discriminator\\": \\"type\\", \\"description\\": \\"Identifies the specific type of item that was indexed by search\\", \\"deprecation\\": null, \\"types\\": [{ \\"type\\": \\"application_summary\\", \\"description\\": \\"Represents that the item indexed was an application\\", \\"deprecation\\": null, \\"attributes\\": [], \\"default\\": null, \\"discriminator_value\\": \\"application_summary\\" }], \\"attributes\\": [], \\"interfaces\\": [] }];

function getRequestOptions(settings, userOptions) {
  return new Promise(function (resolve, reject) {
    if (!isObject(userOptions || {})) {
      reject(new Error('options parameter is required and must be a plain object'));
      return;
    }

    // Don't mutate the options the user provided
    var options = Object.assign({}, userOptions);

    // Handle the body of the request (options.data as provided by the user)
    if (settings.requiresBody) {
      if (!options.data) {
        reject(new Error('options.data property is required.'));
        return;
      }

      if (settings.discriminator) {
        if (dataIsAndCanBePrimitive(settings.bodyType, options.data)) {
          var _dataUpdate;

          var dataUpdate = (_dataUpdate = {}, _defineProperty(_dataUpdate, settings.discriminator, getApidocTypeForPrimitive(settings.bodyType, options.data)), _defineProperty(_dataUpdate, 'value', options.data), _dataUpdate);
          options.data = Object.assign({}, dataUpdate);
        }

        if (!options.data[settings.discriminator]) {
          reject(new Error('options.data.' + settings.discriminator + ' must be defined. Available options for [' + settings.bodyType + '] are: ' + getTypesForUnion(settings.bodyType).join(', ')));
          return;
        }
      }
    }

    var qs = {};
    settings.queryParams.forEach(function (param) {
      if (options[param.nameCamelCase]) {
        qs[param.name] = options[param.nameCamelCase];
      }
    });

    var json = settings.isApplicationJson ? options.data : undefined;
    var form = settings.isFormUrlEncoded ? options.data : undefined;
    var method = settings.method;

    resolve(Object.assign(options, {
      json: json,
      form: form,
      method: method,
      qs: qs
    }));
  });
}

function dataIsAndCanBePrimitive(bodyType, data) {
  var typesForUnion = getTypesForUnion(bodyType);
  var dataType = typeof data === 'undefined' ? 'undefined' : _typeof(data);

  if (dataType === 'string') {
    return typesForUnion.indexOf('string') != -1;
  } else if (dataType === 'number') {
    return typesForUnion.indexOf('decimal') != -1 || typesForUnion.indexOf('double') != -1 || typesForUnion.indexOf('integer') != -1 || typesForUnion.indexOf('long') != -1;
  } else {
    return false;
  }
}

// Within the context of a union type
function getApidocTypeForPrimitive(bodyType, data) {
  var typesForUnion = getTypesForUnion(bodyType);
  var dataType = typeof data === 'undefined' ? 'undefined' : _typeof(data);

  if (dataType === 'string') {
    // Check if data matches an enum. Use the enum name if it does.
    var enumForData = enums.find(function (e) {
      return !!e.values.find(function (v) {
        return v.name === data;
      });
    });

    if (enumForData) {
      return enumForData.name;
    }

    // default to 'string'
    return dataType;
  } else if (dataType === 'number') {
    var containsDecimalPoint = data.toString().indexOf('.') !== -1;
    var possibleApidocTypes = containsDecimalPoint ? ['decimal', 'double'] : ['integer', 'long'];

    // Return the first one found. Buggy in that this code should know the
    // difference between each of the apidoc types. They are all 'number' in
    // JavaScript though.
    return typesForUnion.find(function (t) {
      return possibleApidocTypes.indexOf(t) !== -1;
    });
  }
}

function getTypesForUnion(unionType) {
  var ut = unions.find(function (u) {
    return u.name === unionType;
  });
  if (ut) {
    return ut.types.map(function (t) {
      return t.type;
    });
  }

  return [];
}

/**
 * Simple plain object check. This is actually really involved to be 100%
 * accurate
 */
function isObject(obj) {
  return (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && !Array.isArray(obj);
}

function log(message) {
  if (showLogMessages) {
    console.log('[apidoc] ' + message);
  }
}

function getQueryString(options) {
  var qs = options.qs || {};
  var params = Object.keys(qs).reduce(function (kvPairs, key) {
    return kvPairs.concat(key + '=' + qs[key]);
  }, []);
  return params.join('&');
}

function doRequest(options) {
  var startMs = Date.now();
  options = options || {};

  options.qsStringifyOptions = {
    arrayFormat: 'repeat'
  };

  var queryString = getQueryString(options);
  var url = options.uri + (queryString ? '?' + queryString : '');

  log(options.method + ' ' + url);
  if (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH') {
    log('|--> With body:\\\\n\\\\t\\\\t' + JSON.stringify(options.json));
  }

  return new Promise(function (resolve, reject) {
    (0, _request2.default)(options, function (err, response) {
      if (err) {
        reject(err);
        return;
      }

      var duration = Date.now() - startMs;
      var requestHref = response.request ? response.request.href : '<unknown url>';

      log('Completed ' + options.method + ' ' + requestHref + ' ' + response.statusCode + ' ' + duration + 'ms');

      resolve(response);
    });
  });
}"
`;

exports[`POST /invocations/:key node_5_es5: validations.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"post\\",
    value: function post(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"string\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/validations\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: versions.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"getByApplicationkey\\",
    value: function getByApplicationkey(orgKey, applicationKey, options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/\\" + orgKey + \\"/\\" + applicationKey;
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByApplicationkeyAndVersion\\",
    value: function getByApplicationkeyAndVersion(orgKey, applicationKey, version, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/\\" + version;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"postByVersion\\",
    value: function postByVersion(orgKey, version, options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"version_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/\\" + orgKey + \\"/\\" + version;
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"putByApplicationkeyAndVersion\\",
    value: function putByApplicationkeyAndVersion(orgKey, applicationKey, version, options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"version_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"PUT\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/\\" + version;
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByApplicationkeyAndVersion\\",
    value: function deleteByApplicationkeyAndVersion(orgKey, applicationKey, version, options) {
      var _this5 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this5.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/\\" + version;
        var auth = opts.auth || _this5.auth;
        var headers = _this5.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getExampleByApplicationkeyAndVersionAndTypeName\\",
    value: function getExampleByApplicationkeyAndVersionAndTypeName(orgKey, applicationKey, version, typeName, options) {
      var _this6 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"sub_type_name\\",
          \\"nameCamelCase\\": \\"subTypeName\\"
        }, {
          \\"name\\": \\"optional_fields\\",
          \\"nameCamelCase\\": \\"optionalFields\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this6.host + \\"/\\" + orgKey + \\"/\\" + applicationKey + \\"/\\" + version + \\"/example/\\" + typeName;
        var auth = opts.auth || _this6.auth;
        var headers = _this6.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es5: watches.js 1`] = `
"\\"use strict\\";

Object.defineProperty(exports, \\"__esModule\\", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require(\\"./utils\\");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

var _class = function () {
  function _class(host, auth, headers) {
    _classCallCheck(this, _class);

    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

  _createClass(_class, [{
    key: \\"get\\",
    value: function get(options) {
      var _this = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"guid\\",
          \\"nameCamelCase\\": \\"guid\\"
        }, {
          \\"name\\": \\"user_guid\\",
          \\"nameCamelCase\\": \\"userGuid\\"
        }, {
          \\"name\\": \\"organization_key\\",
          \\"nameCamelCase\\": \\"organizationKey\\"
        }, {
          \\"name\\": \\"application_key\\",
          \\"nameCamelCase\\": \\"applicationKey\\"
        }, {
          \\"name\\": \\"limit\\",
          \\"nameCamelCase\\": \\"limit\\"
        }, {
          \\"name\\": \\"offset\\",
          \\"nameCamelCase\\": \\"offset\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this.host + \\"/watches\\";
        var auth = opts.auth || _this.auth;
        var headers = _this.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getByGuid\\",
    value: function getByGuid(guid, options) {
      var _this2 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this2.host + \\"/watches/\\" + guid;
        var auth = opts.auth || _this2.auth;
        var headers = _this2.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"getCheck\\",
    value: function getCheck(options) {
      var _this3 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [{
          \\"name\\": \\"user_guid\\",
          \\"nameCamelCase\\": \\"userGuid\\"
        }, {
          \\"name\\": \\"organization_key\\",
          \\"nameCamelCase\\": \\"organizationKey\\"
        }, {
          \\"name\\": \\"application_key\\",
          \\"nameCamelCase\\": \\"applicationKey\\"
        }],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"GET\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this3.host + \\"/watches/check\\";
        var auth = opts.auth || _this3.auth;
        var headers = _this3.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 200:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"post\\",
    value: function post(options) {
      var _this4 = this;

      var operationSettings = {
        \\"requiresBody\\": true,
        \\"bodyType\\": \\"watch_form\\",
        \\"queryParams\\": [],
        \\"isApplicationJson\\": true,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"POST\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this4.host + \\"/watches\\";
        var auth = opts.auth || _this4.auth;
        var headers = _this4.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 201:
              if (requestOpts.json) {
                return Promise.resolve(serverResponse.body);
              } else {
                return Promise.resolve(JSON.parse(serverResponse.body));
              }
            case 409:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }, {
    key: \\"deleteByGuid\\",
    value: function deleteByGuid(guid, options) {
      var _this5 = this;

      var operationSettings = {
        \\"requiresBody\\": false,
        \\"queryParams\\": [],
        \\"isApplicationJson\\": false,
        \\"isFormUrlEncoded\\": false,
        \\"method\\": \\"DELETE\\"
      };

      return (0, _utils.getRequestOptions)(operationSettings, options).then(function (opts) {
        var uri = _this5.host + \\"/watches/\\" + guid;
        var auth = opts.auth || _this5.auth;
        var headers = _this5.headers || {};

        // Layer in some options local to this class
        var requestOpts = Object.assign({ headers: headers }, opts, {
          auth: auth,
          uri: uri
        });

        return (0, _utils.doRequest)(requestOpts).then(function (serverResponse) {
          switch (serverResponse.statusCode) {
            case 204:
              return Promise.resolve();
            case 401:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            case 404:
              return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
            default:
              return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
          }
        });
      });
    }
  }]);

  return _class;
}();

exports.default = _class;"
`;

exports[`POST /invocations/:key node_5_es6: applications.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    getMetadataAndVersionsByApplicationkey (orgKey, applicationKey, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/metadata/\${applicationKey}/versions\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getMetadataAndVersionsAndLatesttxtByApplicationkey (orgKey, applicationKey, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/metadata/\${applicationKey}/versions/latest.txt\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    get (orgKey, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"name\\",
      \\"nameCamelCase\\": \\"name\\"
    },
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"key\\",
      \\"nameCamelCase\\": \\"key\\"
    },
    {
      \\"name\\": \\"has_version\\",
      \\"nameCamelCase\\": \\"hasVersion\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    },
    {
      \\"name\\": \\"sort_by\\",
      \\"nameCamelCase\\": \\"sortBy\\"
    },
    {
      \\"name\\": \\"order\\",
      \\"nameCamelCase\\": \\"order\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (orgKey, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"application_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    putByApplicationkey (orgKey, applicationKey, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"application_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"PUT\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByApplicationkey (orgKey, applicationKey, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    postMoveByApplicationkey (orgKey, applicationKey, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"move_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/move\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: attributes.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"name\\",
      \\"nameCamelCase\\": \\"name\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/attributes\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByName (name, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/attributes/\${name}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"attribute_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/attributes\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 201:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByName (name, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/attributes/\${name}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: authentications.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    getSessionById (id, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/authentications/session/\${id}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: batch_download_applications.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    post (orgKey, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"batch_download_applications_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/batch/download/applications\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 201:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: changes.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"org_key\\",
      \\"nameCamelCase\\": \\"orgKey\\"
    },
    {
      \\"name\\": \\"application_key\\",
      \\"nameCamelCase\\": \\"applicationKey\\"
    },
    {
      \\"name\\": \\"from\\",
      \\"nameCamelCase\\": \\"from\\"
    },
    {
      \\"name\\": \\"to\\",
      \\"nameCamelCase\\": \\"to\\"
    },
    {
      \\"name\\": \\"type\\",
      \\"nameCamelCase\\": \\"type\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/changes\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: client.js 1`] = `
"import Applications from './applications';
import Attributes from './attributes';
import Authentications from './authentications';
import BatchDownloadApplications from './batch_download_applications';
import Changes from './changes';
import Code from './code';
import Domains from './domains';
import EmailVerificationConfirmationForms from './email_verification_confirmation_forms';
import GeneratorServices from './generator_services';
import GeneratorWithServices from './generator_with_services';
import Healthchecks from './healthchecks';
import Items from './items';
import Memberships from './memberships';
import MembershipRequests from './membership_requests';
import Organizations from './organizations';
import PasswordResets from './password_resets';
import PasswordResetRequests from './password_reset_requests';
import Subscriptions from './subscriptions';
import Tokens from './tokens';
import Users from './users';
import Validations from './validations';
import Versions from './versions';
import Watches from './watches';

export default class {
 constructor (host, auth, headers) {
   this.host = host;
   this.Applications = new Applications(host, auth, headers);
   this.Attributes = new Attributes(host, auth, headers);
   this.Authentications = new Authentications(host, auth, headers);
   this.BatchDownloadApplications = new BatchDownloadApplications(host, auth, headers);
   this.Changes = new Changes(host, auth, headers);
   this.Code = new Code(host, auth, headers);
   this.Domains = new Domains(host, auth, headers);
   this.EmailVerificationConfirmationForms = new EmailVerificationConfirmationForms(host, auth, headers);
   this.GeneratorServices = new GeneratorServices(host, auth, headers);
   this.GeneratorWithServices = new GeneratorWithServices(host, auth, headers);
   this.Healthchecks = new Healthchecks(host, auth, headers);
   this.Items = new Items(host, auth, headers);
   this.Memberships = new Memberships(host, auth, headers);
   this.MembershipRequests = new MembershipRequests(host, auth, headers);
   this.Organizations = new Organizations(host, auth, headers);
   this.PasswordResets = new PasswordResets(host, auth, headers);
   this.PasswordResetRequests = new PasswordResetRequests(host, auth, headers);
   this.Subscriptions = new Subscriptions(host, auth, headers);
   this.Tokens = new Tokens(host, auth, headers);
   this.Users = new Users(host, auth, headers);
   this.Validations = new Validations(host, auth, headers);
   this.Versions = new Versions(host, auth, headers);
   this.Watches = new Watches(host, auth, headers);
 }

 getHost () {
   return this.host;
 }

}
"
`;

exports[`POST /invocations/:key node_5_es6: code.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    postForm (orgKey, applicationKey, version, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"code_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/form\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByGeneratorkey (orgKey, applicationKey, version, generatorKey, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/\${generatorKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    postByGeneratorkey (orgKey, applicationKey, version, generatorKey, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"code_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/\${generatorKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: domains.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    post (orgKey, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"domain\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/domains/\${orgKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByName (orgKey, name, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/domains/\${orgKey}/\${name}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: email_verification_confirmation_forms.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"email_verification_confirmation_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/email_verification_confirmations\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: generator_services.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"uri\\",
      \\"nameCamelCase\\": \\"uri\\"
    },
    {
      \\"name\\": \\"generator_key\\",
      \\"nameCamelCase\\": \\"generatorKey\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/generator_services\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/generator_services/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"generator_service_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/generator_services\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/generator_services/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: generator_with_services.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"service_guid\\",
      \\"nameCamelCase\\": \\"serviceGuid\\"
    },
    {
      \\"name\\": \\"service_uri\\",
      \\"nameCamelCase\\": \\"serviceUri\\"
    },
    {
      \\"name\\": \\"attribute_name\\",
      \\"nameCamelCase\\": \\"attributeName\\"
    },
    {
      \\"name\\": \\"key\\",
      \\"nameCamelCase\\": \\"key\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/generators\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByKey (key, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/generators/\${key}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: healthchecks.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    getHealthcheck (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/_internal_/healthcheck\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getMigrate (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/_internal_/migrate\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: items.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"q\\",
      \\"nameCamelCase\\": \\"q\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/items\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/items/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: membership_requests.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"org_guid\\",
      \\"nameCamelCase\\": \\"orgGuid\\"
    },
    {
      \\"name\\": \\"org_key\\",
      \\"nameCamelCase\\": \\"orgKey\\"
    },
    {
      \\"name\\": \\"user_guid\\",
      \\"nameCamelCase\\": \\"userGuid\\"
    },
    {
      \\"name\\": \\"role\\",
      \\"nameCamelCase\\": \\"role\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/membership_requests\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": true,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/membership_requests\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    postAcceptByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": true,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/membership_requests/\${guid}/accept\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    postDeclineByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": true,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/membership_requests/\${guid}/decline\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: memberships.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"org_guid\\",
      \\"nameCamelCase\\": \\"orgGuid\\"
    },
    {
      \\"name\\": \\"org_key\\",
      \\"nameCamelCase\\": \\"orgKey\\"
    },
    {
      \\"name\\": \\"user_guid\\",
      \\"nameCamelCase\\": \\"userGuid\\"
    },
    {
      \\"name\\": \\"role\\",
      \\"nameCamelCase\\": \\"role\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/memberships\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/memberships/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/memberships/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: organizations.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"user_guid\\",
      \\"nameCamelCase\\": \\"userGuid\\"
    },
    {
      \\"name\\": \\"key\\",
      \\"nameCamelCase\\": \\"key\\"
    },
    {
      \\"name\\": \\"name\\",
      \\"nameCamelCase\\": \\"name\\"
    },
    {
      \\"name\\": \\"namespace\\",
      \\"nameCamelCase\\": \\"namespace\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByKey (key, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations/\${key}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"organization_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    putByKey (key, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"organization_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"PUT\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations/\${key}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByKey (key, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations/\${key}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getAttributesByKey (key, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"name\\",
      \\"nameCamelCase\\": \\"name\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations/\${key}/attributes\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getAttributesByKeyAndName (key, name, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations/\${key}/attributes/\${name}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    putAttributesByKeyAndName (key, name, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"attribute_value_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"PUT\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations/\${key}/attributes/\${name}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 201:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteAttributesByKeyAndName (key, name, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/organizations/\${key}/attributes/\${name}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: package.json 1`] = `
"{
  \\"name\\": \\"apibuilder api\\",
  \\"version\\": \\"0.15.47\\",
  \\"main\\": \\"client.js\\",
  \\"description\\": \\"Node 5 apibuilder client\\",
  \\"author\\": \\"apidoc.me\\"
}"
`;

exports[`POST /invocations/:key node_5_es6: password_reset_requests.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"password_reset_request\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/password_reset_requests\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: password_resets.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"password_reset\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/password_resets\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: subscriptions.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"organization_key\\",
      \\"nameCamelCase\\": \\"organizationKey\\"
    },
    {
      \\"name\\": \\"user_guid\\",
      \\"nameCamelCase\\": \\"userGuid\\"
    },
    {
      \\"name\\": \\"publication\\",
      \\"nameCamelCase\\": \\"publication\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/subscriptions\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/subscriptions/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"subscription_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/subscriptions\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 201:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/subscriptions/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: tokens.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    getUsersByUserGuid (userGuid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/tokens/users/\${userGuid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getCleartextByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/tokens/\${guid}/cleartext\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"token_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/tokens\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 201:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/tokens/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: users.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"email\\",
      \\"nameCamelCase\\": \\"email\\"
    },
    {
      \\"name\\": \\"nickname\\",
      \\"nameCamelCase\\": \\"nickname\\"
    },
    {
      \\"name\\": \\"token\\",
      \\"nameCamelCase\\": \\"token\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/users\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/users/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    postAuthenticate (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": true,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/users/authenticate\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    postAuthenticateGithub (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": true,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/users/authenticate_github\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"user_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/users\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    putByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"user_update_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"PUT\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/users/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: utils.js 1`] = `
"import request from 'request';

const showLogMessages = process.env.NODE_DEBUG ? process.env.NODE_DEBUG.indexOf('apidoc') !== -1 : false;
const enums = [{\\"name\\":\\"app_sort_by\\",\\"plural\\":\\"app_sort_bies\\",\\"description\\":null,\\"deprecation\\":null,\\"values\\":[{\\"name\\":\\"name\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"created_at\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"updated_at\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"visibility\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null}],\\"attributes\\":[]},{\\"name\\":\\"original_type\\",\\"plural\\":\\"original_types\\",\\"description\\":null,\\"deprecation\\":null,\\"values\\":[{\\"name\\":\\"api_json\\",\\"description\\":\\"The original is in the api.json format\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"avro_idl\\",\\"description\\":\\"The original is in Avro Idl format\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"service_json\\",\\"description\\":\\"This is the canonical service spec for apibuilder itself. See https://www.apibuilder.io/apicollective/apibuilder-spec/latest#model-service\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"swagger\\",\\"description\\":\\"The original in the Swagger JSON or YAML format\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null}],\\"attributes\\":[]},{\\"name\\":\\"publication\\",\\"plural\\":\\"publications\\",\\"description\\":\\"A publication represents something that a user can subscribe to. An example would be subscribing to an email alert whenever a new version of an application is created.\\",\\"deprecation\\":null,\\"values\\":[{\\"name\\":\\"membership_requests.create\\",\\"description\\":\\"For organizations for which I am an administrator, email me whenever a user applies to join the org.\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"memberships.create\\",\\"description\\":\\"For organizations for which I am a member, email me whenever a user joins the org.\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"applications.create\\",\\"description\\":\\"For organizations for which I am a member, email me whenever an application is created.\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"versions.create\\",\\"description\\":\\"For applications that I watch, email me whenever a version is created.\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"versions.material_change\\",\\"description\\":\\"For applications that I watch, email me whenever there is a material change. Generally, this means avoiding email for simple changes (like only a version change).\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null}],\\"attributes\\":[]},{\\"name\\":\\"sort_order\\",\\"plural\\":\\"sort_orders\\",\\"description\\":null,\\"deprecation\\":null,\\"values\\":[{\\"name\\":\\"asc\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"desc\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null}],\\"attributes\\":[]},{\\"name\\":\\"visibility\\",\\"plural\\":\\"visibilities\\",\\"description\\":\\"Controls who is able to view this version\\",\\"deprecation\\":null,\\"values\\":[{\\"name\\":\\"user\\",\\"description\\":\\"Only the creator can view this application\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"organization\\",\\"description\\":\\"Any member of the organization can view this application\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null},{\\"name\\":\\"public\\",\\"description\\":\\"Anybody, including non logged in users, can view this application\\",\\"deprecation\\":null,\\"attributes\\":[],\\"value\\":null}],\\"attributes\\":[]}];
const unions = [{\\"name\\":\\"diff\\",\\"plural\\":\\"diffs\\",\\"discriminator\\":\\"type\\",\\"description\\":\\"Represents a single diff in an application\\",\\"deprecation\\":null,\\"types\\":[{\\"type\\":\\"diff_breaking\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"default\\":null,\\"discriminator_value\\":\\"diff_breaking\\"},{\\"type\\":\\"diff_non_breaking\\",\\"description\\":null,\\"deprecation\\":null,\\"attributes\\":[],\\"default\\":null,\\"discriminator_value\\":\\"diff_non_breaking\\"}],\\"attributes\\":[],\\"interfaces\\":[\\"diff\\"]},{\\"name\\":\\"item_detail\\",\\"plural\\":\\"item_details\\",\\"discriminator\\":\\"type\\",\\"description\\":\\"Identifies the specific type of item that was indexed by search\\",\\"deprecation\\":null,\\"types\\":[{\\"type\\":\\"application_summary\\",\\"description\\":\\"Represents that the item indexed was an application\\",\\"deprecation\\":null,\\"attributes\\":[],\\"default\\":null,\\"discriminator_value\\":\\"application_summary\\"}],\\"attributes\\":[],\\"interfaces\\":[]}];

export function getRequestOptions (settings, userOptions) {
  return new Promise ((resolve, reject) => {
    if (!isObject(userOptions || {})) {
      reject(new Error('options parameter is required and must be a plain object'));
      return;
    }

    // Don't mutate the options the user provided
    var options = Object.assign({}, userOptions);

    // Handle the body of the request (options.data as provided by the user)
    if (settings.requiresBody) {
      if (!options.data) {
        reject(new Error('options.data property is required.'));
        return;
      }

      if (settings.discriminator) {
        if(dataIsAndCanBePrimitive(settings.bodyType, options.data)) {
          const dataUpdate = {
            [settings.discriminator]: getApidocTypeForPrimitive(settings.bodyType, options.data),
            value: options.data
          };
          options.data = Object.assign({}, dataUpdate);
        }

        if (!options.data[settings.discriminator]) {
          reject(new Error(\`options.data.\${settings.discriminator} must be defined. Available options for [\${settings.bodyType}] are: \${getTypesForUnion(settings.bodyType).join(', ')}\`));
          return;
        }
      }
    }

    var qs = {};
    settings.queryParams.forEach((param) => {
      if (options[param.nameCamelCase]) {
        qs[param.name] = options[param.nameCamelCase];
      }
    });

    const json = settings.isApplicationJson ? options.data : undefined;
    const form = settings.isFormUrlEncoded ? options.data : undefined;
    const method = settings.method;

    resolve(Object.assign(options, {
      json,
      form,
      method,
      qs
    }));
  });
}

export function dataIsAndCanBePrimitive (bodyType, data) {
  const typesForUnion = getTypesForUnion(bodyType);
  const dataType = typeof data;

  if (dataType === 'string') {
    return typesForUnion.indexOf('string') != -1;
  } else if (dataType === 'number') {
    return typesForUnion.indexOf('decimal') != -1
      || typesForUnion.indexOf('double') != -1
      || typesForUnion.indexOf('integer') != -1
      || typesForUnion.indexOf('long') != -1;
  } else {
    return false;
  }
}

// Within the context of a union type
export function getApidocTypeForPrimitive (bodyType, data) {
  const typesForUnion = getTypesForUnion(bodyType);
  const dataType = typeof data;

  if (dataType === 'string') {
    // Check if data matches an enum. Use the enum name if it does.
    const enumForData = enums.find((e) => {
      return !!e.values.find((v) => {
        return v.name === data;
      });
    });

    if (enumForData) {
        return enumForData.name;
    }

    // default to 'string'
    return dataType;
  } else if (dataType === 'number') {
    const containsDecimalPoint = data.toString().indexOf('.') !== -1;
    const possibleApidocTypes =
      containsDecimalPoint ? ['decimal', 'double'] : ['integer', 'long'];


    // Return the first one found. Buggy in that this code should know the
    // difference between each of the apidoc types. They are all 'number' in
    // JavaScript though.
    return typesForUnion.find((t) => {
      return possibleApidocTypes.indexOf(t) !== -1;
    });
  }
}

export function getTypesForUnion (unionType) {
   const ut = unions.find((u) => u.name === unionType);
   if (ut) {
     return ut.types.map((t) => t.type);
   }

   return [];
}

/**
 * Simple plain object check. This is actually really involved to be 100%
 * accurate
 */
export function isObject (obj) {
  return typeof obj === 'object' && !Array.isArray(obj);
}

function log (message) {
  if (showLogMessages) {
    console.log('[apidoc] ' + message);
  }
}

export function getQueryString (options) {
  const qs = options.qs || {};
  const params = Object.keys(qs).reduce((kvPairs, key) => {
    return kvPairs.concat(\`\${key}=\${qs[key]}\`);
  }, []);
  return params.join('&');
}

export function doRequest (options) {
  var startMs = Date.now();
  options = options || {};

  options.qsStringifyOptions = {
    arrayFormat: 'repeat'
  };

  var queryString = getQueryString(options);
  var url = options.uri + (queryString ? '?' + queryString : '');

  log(options.method + ' ' + url);
  if (options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH') {
    log('|--> With body:\\\\n\\\\t\\\\t' + JSON.stringify(options.json));
  }

  return new Promise(function (resolve, reject) {
    request(options, function (err, response) {
      if (err) {
        reject(err);
        return;
      }

      var duration = Date.now() - startMs;
      var requestHref = response.request ? response.request.href : '<unknown url>';

      log('Completed ' + options.method + ' ' + requestHref + ' ' + response.statusCode + ' ' + duration + 'ms');

      resolve(response);
    });
  });
}
"
`;

exports[`POST /invocations/:key node_5_es6: validations.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"string\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/validations\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: versions.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    getByApplicationkey (orgKey, applicationKey, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByApplicationkeyAndVersion (orgKey, applicationKey, version, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/\${version}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    postByVersion (orgKey, version, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"version_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${version}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    putByApplicationkeyAndVersion (orgKey, applicationKey, version, options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"version_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"PUT\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/\${version}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByApplicationkeyAndVersion (orgKey, applicationKey, version, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/\${version}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getExampleByApplicationkeyAndVersionAndTypeName (orgKey, applicationKey, version, typeName, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"sub_type_name\\",
      \\"nameCamelCase\\": \\"subTypeName\\"
    },
    {
      \\"name\\": \\"optional_fields\\",
      \\"nameCamelCase\\": \\"optionalFields\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/\${orgKey}/\${applicationKey}/\${version}/example/\${typeName}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key node_5_es6: watches.js 1`] = `
"import { isObject,
          doRequest,
          getRequestOptions } from './utils';

export default class {
  constructor (host, auth, headers) {
    this.host = host;
    this.auth = auth;
    this.headers = headers;
  }

    get (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"guid\\",
      \\"nameCamelCase\\": \\"guid\\"
    },
    {
      \\"name\\": \\"user_guid\\",
      \\"nameCamelCase\\": \\"userGuid\\"
    },
    {
      \\"name\\": \\"organization_key\\",
      \\"nameCamelCase\\": \\"organizationKey\\"
    },
    {
      \\"name\\": \\"application_key\\",
      \\"nameCamelCase\\": \\"applicationKey\\"
    },
    {
      \\"name\\": \\"limit\\",
      \\"nameCamelCase\\": \\"limit\\"
    },
    {
      \\"name\\": \\"offset\\",
      \\"nameCamelCase\\": \\"offset\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/watches\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/watches/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    getCheck (options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [
    {
      \\"name\\": \\"user_guid\\",
      \\"nameCamelCase\\": \\"userGuid\\"
    },
    {
      \\"name\\": \\"organization_key\\",
      \\"nameCamelCase\\": \\"organizationKey\\"
    },
    {
      \\"name\\": \\"application_key\\",
      \\"nameCamelCase\\": \\"applicationKey\\"
    }
  ],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"GET\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/watches/check\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 200:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    post (options) {
      const operationSettings = {
  \\"requiresBody\\": true,
  \\"bodyType\\": \\"watch_form\\",
  \\"queryParams\\": [],
  \\"isApplicationJson\\": true,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"POST\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/watches\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 201:
                if (requestOpts.json) {
                  return Promise.resolve(serverResponse.body);
                } else {
                  return Promise.resolve(JSON.parse(serverResponse.body));
                }
              case 409:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

    deleteByGuid (guid, options) {
      const operationSettings = {
  \\"requiresBody\\": false,
  \\"queryParams\\": [],
  \\"isApplicationJson\\": false,
  \\"isFormUrlEncoded\\": false,
  \\"method\\": \\"DELETE\\"
};

      return getRequestOptions(operationSettings, options)
        .then((opts) => {
          const uri = \`\${this.host}/watches/\${guid}\`;
          const auth = opts.auth || this.auth;
          const headers = this.headers || {};

          // Layer in some options local to this class
          const requestOpts = Object.assign({ headers }, opts, {
            auth,
            uri
          });

          return doRequest(requestOpts).then(function (serverResponse) {
            switch (serverResponse.statusCode) {
              case 204:
                return Promise.resolve();
              case 401:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              case 404:
                return Promise.reject({ status: serverResponse.statusCode, data: serverResponse.body });
              default:
                return Promise.reject(new Error('Unknown response code: ' + serverResponse.statusCode));
            }
          });
        });
    }

}
"
`;

exports[`POST /invocations/:key openapi: openapi.json 1`] = `
"{
  \\"components\\": {
    \\"schemas\\": {
      \\"application\\": {
        \\"description\\": \\"An application has a name and multiple versions of its API.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this application.\\"
          },
          \\"organization\\": {},
          \\"name\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The unique name for this application.\\"
          },
          \\"key\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Used as a unique key in the URL path. Key is automatically derived from the application name.\\"
          },
          \\"visibility\\": {
            \\"$ref\\": \\"#/components/schemas/visibility\\",
            \\"description\\": \\"Controls who is able to view this application\\"
          },
          \\"description\\": {
            \\"type\\": \\"string\\"
          },
          \\"last_updated_at\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"date-time\\",
            \\"description\\": \\"The updated_at of this application or created_at of it's latest version\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"organization\\",
          \\"name\\",
          \\"key\\",
          \\"visibility\\",
          \\"last_updated_at\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"application_form\\": {
        \\"properties\\": {
          \\"name\\": {
            \\"type\\": \\"string\\"
          },
          \\"key\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Defaults to a key generated from the application name\\"
          },
          \\"description\\": {
            \\"type\\": \\"string\\"
          },
          \\"visibility\\": {
            \\"$ref\\": \\"#/components/schemas/visibility\\"
          }
        },
        \\"required\\": [
          \\"name\\",
          \\"visibility\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"application_metadata\\": {
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this application.\\"
          },
          \\"key\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Used as a unique key in the URL path. Key is automatically derived from the application name.\\"
          }
        },
        \\"required\\": [
          \\"guid\\",
          \\"key\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"application_metadata_version\\": {
        \\"description\\": \\"Describes the versions associated with a given application\\",
        \\"properties\\": {
          \\"version\\": {
            \\"type\\": \\"string\\",
            \\"example\\": \\"0.2.5\\"
          }
        },
        \\"required\\": [
          \\"version\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"application_summary\\": {
        \\"description\\": \\"Summary of an application sufficient for display and links\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"organization\\": {},
          \\"key\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"guid\\",
          \\"organization\\",
          \\"key\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"attribute\\": {
        \\"description\\": \\"Attributes are globally unique key which allow users to specify additional content to pass in to the code generators.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this attribute.\\"
          },
          \\"name\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The name of the attribute. Globally unique and an 'identifier' (lower case, url safe, etc.)\\"
          },
          \\"description\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Optional description - a good description here will indicate which code generators it applies to and what effect it will have on those code generators.\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"name\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"attribute_form\\": {
        \\"properties\\": {
          \\"name\\": {
            \\"type\\": \\"string\\"
          },
          \\"description\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"name\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"attribute_summary\\": {
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this attribute.\\"
          },
          \\"name\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The name of the attribute. Globally unique and an 'identifier' (lower case, url safe, etc.)\\"
          }
        },
        \\"required\\": [
          \\"guid\\",
          \\"name\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"attribute_value\\": {
        \\"description\\": \\"Attribute values can be set at different levels. Initially we support setting organization wide attributes, but in the future plan to support setting attribute values with each version of the application.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this attribute value.\\"
          },
          \\"attribute\\": {
            \\"$ref\\": \\"#/components/schemas/attribute_summary\\"
          },
          \\"value\\": {
            \\"type\\": \\"string\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"attribute\\",
          \\"value\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"attribute_value_form\\": {
        \\"properties\\": {
          \\"value\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"value\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"authentication\\": {
        \\"description\\": \\"Represents the result of a successful authorization\\",
        \\"properties\\": {
          \\"user\\": {
            \\"$ref\\": \\"#/components/schemas/user\\"
          },
          \\"session\\": {
            \\"$ref\\": \\"#/components/schemas/session\\"
          }
        },
        \\"required\\": [
          \\"user\\",
          \\"session\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"batch_download_application_form\\": {
        \\"properties\\": {
          \\"application_key\\": {
            \\"type\\": \\"string\\"
          },
          \\"version\\": {
            \\"type\\": \\"string\\",
            \\"default\\": \\"latest\\"
          }
        },
        \\"required\\": [
          \\"application_key\\",
          \\"version\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"batch_download_applications\\": {
        \\"properties\\": {
          \\"applications\\": {
            \\"items\\": {
              \\"$ref\\": \\"#/components/schemas/version\\"
            },
            \\"type\\": \\"array\\"
          }
        },
        \\"required\\": [
          \\"applications\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"batch_download_applications_form\\": {
        \\"properties\\": {
          \\"applications\\": {
            \\"items\\": {
              \\"$ref\\": \\"#/components/schemas/batch_download_application_form\\"
            },
            \\"type\\": \\"array\\"
          }
        },
        \\"required\\": [
          \\"applications\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"change\\": {
        \\"description\\": \\"Represents a single change from one version of a service to another\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"organization\\": {},
          \\"application\\": {},
          \\"from_version\\": {
            \\"$ref\\": \\"#/components/schemas/change_version\\"
          },
          \\"to_version\\": {
            \\"$ref\\": \\"#/components/schemas/change_version\\"
          },
          \\"diff\\": {
            \\"$ref\\": \\"#/components/schemas/diff\\"
          },
          \\"changed_at\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"date-time\\",
            \\"description\\": \\"Records the timestamp of when the actual change occurred (vs. when we created the changed record)\\"
          },
          \\"changed_by\\": {
            \\"$ref\\": \\"#/components/schemas/user_summary\\",
            \\"description\\": \\"Records who made the actual change\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"organization\\",
          \\"application\\",
          \\"from_version\\",
          \\"to_version\\",
          \\"diff\\",
          \\"changed_at\\",
          \\"changed_by\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"change_version\\": {
        \\"description\\": \\"Represents a simpler model of a version specifically for the use case of displaying changes\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"version\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"guid\\",
          \\"version\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"cleartext_token\\": {
        \\"description\\": \\"Separate resource used only for the few actions that require the full token.\\",
        \\"properties\\": {
          \\"token\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The actual token. Guaranteed to be globally unique.\\"
          }
        },
        \\"required\\": [
          \\"token\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"code\\": {
        \\"description\\": \\"Generated source code.\\",
        \\"properties\\": {
          \\"generator\\": {
            \\"$ref\\": \\"#/components/schemas/generator_with_service\\"
          },
          \\"source\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The actual source code.\\",
            \\"deprecated\\": true
          },
          \\"files\\": {
            \\"items\\": {},
            \\"type\\": \\"array\\",
            \\"description\\": \\"A collection of source files\\",
            \\"default\\": \\"[]\\"
          }
        },
        \\"required\\": [
          \\"generator\\",
          \\"source\\",
          \\"files\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"code_form\\": {
        \\"properties\\": {
          \\"attributes\\": {
            \\"items\\": {},
            \\"type\\": \\"array\\"
          }
        },
        \\"required\\": [
          \\"attributes\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"diff_breaking\\": {
        \\"description\\": \\"Represents a single breaking diff of an application version. A breaking diff indicates that it is possible for an existing client to now experience an error or invalid data due to the diff.\\",
        \\"properties\\": {
          \\"description\\": {
            \\"type\\": \\"string\\",
            \\"example\\": \\"model removed: user\\"
          },
          \\"is_material\\": {
            \\"type\\": \\"boolean\\",
            \\"example\\": \\"True if this is a material change (eg something important). False otherwise. This is used to drive the publication 'versions.material_change'\\"
          }
        },
        \\"required\\": [
          \\"description\\",
          \\"is_material\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"diff_non_breaking\\": {
        \\"description\\": \\"Represents a single NON breaking diff of an application version.\\",
        \\"properties\\": {
          \\"description\\": {
            \\"type\\": \\"string\\",
            \\"example\\": \\"model: user optional field 'name' added\\"
          },
          \\"is_material\\": {
            \\"type\\": \\"boolean\\",
            \\"example\\": \\"True if this is a material change (eg something important). False otherwise. This is used to drive the publication 'versions.material_change'\\"
          }
        },
        \\"required\\": [
          \\"description\\",
          \\"is_material\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"domain\\": {
        \\"description\\": \\"Represents a single domain name (e.g. www.apibuilder.io). When a new user registers and confirms their email, we automatically associate that user with a member of the organization associated with their domain. For example, if you confirm your account with an email address of example@somedomain.com, we will automatically create a membership request on your behalf to join the organization with domain somedomain.com.\\",
        \\"properties\\": {
          \\"name\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The domain name\\",
            \\"example\\": \\"www.apibuilder.io\\"
          }
        },
        \\"required\\": [
          \\"name\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"email_verification_confirmation_form\\": {
        \\"description\\": \\"Data used to confirm an email address. The token is an internal unique identifier used to lookup the specific email address and user account for which we sent an email verification email.\\",
        \\"properties\\": {
          \\"token\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"token\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"error\\": {
        \\"properties\\": {
          \\"code\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Machine readable code for this specific error message\\"
          },
          \\"message\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Description of the error\\"
          }
        },
        \\"required\\": [
          \\"code\\",
          \\"message\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"generator_form\\": {
        \\"properties\\": {
          \\"service_guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"generator\\": {}
        },
        \\"required\\": [
          \\"service_guid\\",
          \\"generator\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"generator_service\\": {
        \\"description\\": \\"Defines a service that provides one or more code generators\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"uri\\": {
            \\"type\\": \\"string\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"uri\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"generator_service_form\\": {
        \\"properties\\": {
          \\"uri\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"uri\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"generator_with_service\\": {
        \\"description\\": \\"Wraps a service and a generator providing easier access for applications.\\",
        \\"properties\\": {
          \\"service\\": {
            \\"$ref\\": \\"#/components/schemas/generator_service\\"
          },
          \\"generator\\": {}
        },
        \\"required\\": [
          \\"service\\",
          \\"generator\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"item\\": {
        \\"description\\": \\"When searching for content, the results of the search will be a list of items. Each item will have enough information to render for the user, including a type and item_guid to enable creating the appropriate link.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Unique identifer for this item. By using a UUID, you can combine with the type to figure out the URI for the resource\\"
          },
          \\"detail\\": {
            \\"$ref\\": \\"#/components/schemas/item_detail\\"
          },
          \\"label\\": {
            \\"type\\": \\"string\\"
          },
          \\"description\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"guid\\",
          \\"detail\\",
          \\"label\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"membership\\": {
        \\"description\\": \\"A membership represents a user in a specific role to an organization. Memberships cannot be created directly. Instead you first create a membership request, then that request is either accepted or declined.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this membership.\\"
          },
          \\"user\\": {
            \\"$ref\\": \\"#/components/schemas/user\\"
          },
          \\"organization\\": {
            \\"$ref\\": \\"#/components/schemas/organization\\"
          },
          \\"role\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The role this user plays for this organization. Typically member or admin.\\",
            \\"example\\": \\"member\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"user\\",
          \\"organization\\",
          \\"role\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"membership_request\\": {
        \\"description\\": \\"A membership request represents a user requesting to join an organization with a specific role (e.g. as a member or an admin). Membership requests can be reviewed by any current admin of the organization who can either accept or decline the request.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this membership request.\\"
          },
          \\"user\\": {
            \\"$ref\\": \\"#/components/schemas/user\\"
          },
          \\"organization\\": {
            \\"$ref\\": \\"#/components/schemas/organization\\"
          },
          \\"role\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The requested role for membership to this organization. Typically member or admin.\\",
            \\"example\\": \\"member\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"user\\",
          \\"organization\\",
          \\"role\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"move_form\\": {
        \\"properties\\": {
          \\"org_key\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The key of the organization to which we are moving this item\\"
          }
        },
        \\"required\\": [
          \\"org_key\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"organization\\": {
        \\"description\\": \\"An organization is used to group a set of applications together.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this organization.\\"
          },
          \\"key\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Used as a unique key in the URL path. Key is automatically derived from the organization name.\\"
          },
          \\"name\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The name of this organization.\\"
          },
          \\"namespace\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Global namespace for this organization.\\",
            \\"example\\": \\"io.apicollective\\"
          },
          \\"visibility\\": {
            \\"$ref\\": \\"#/components/schemas/visibility\\"
          },
          \\"domains\\": {
            \\"items\\": {
              \\"$ref\\": \\"#/components/schemas/domain\\"
            },
            \\"type\\": \\"array\\",
            \\"default\\": \\"[]\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"key\\",
          \\"name\\",
          \\"namespace\\",
          \\"visibility\\",
          \\"domains\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"organization_form\\": {
        \\"properties\\": {
          \\"name\\": {
            \\"type\\": \\"string\\"
          },
          \\"key\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Defaults to a url friendy version of the name\\"
          },
          \\"namespace\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Global namespace for this organization.\\",
            \\"example\\": \\"io.apicollective\\"
          },
          \\"visibility\\": {
            \\"$ref\\": \\"#/components/schemas/visibility\\",
            \\"description\\": \\"Public organizations will be listed in apibuilder directory. Organizations with visibility organization will only be visible to members of that org.\\",
            \\"default\\": \\"organization\\"
          },
          \\"domains\\": {
            \\"items\\": {
              \\"type\\": \\"string\\"
            },
            \\"type\\": \\"array\\",
            \\"example\\": \\"apibuilder.io\\"
          }
        },
        \\"required\\": [
          \\"name\\",
          \\"namespace\\",
          \\"visibility\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"original\\": {
        \\"description\\": \\"Represents the original input used to create an application version\\",
        \\"properties\\": {
          \\"type\\": {
            \\"$ref\\": \\"#/components/schemas/original_type\\"
          },
          \\"data\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"type\\",
          \\"data\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"original_form\\": {
        \\"properties\\": {
          \\"type\\": {
            \\"$ref\\": \\"#/components/schemas/original_type\\",
            \\"description\\": \\"If not specified, we set the type by inspecting the data\\"
          },
          \\"data\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"data\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"password_reset\\": {
        \\"description\\": \\"Allows a user to change their password with authentication from a token.\\",
        \\"properties\\": {
          \\"token\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Unique one time use token to change a password\\"
          },
          \\"password\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"token\\",
          \\"password\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"password_reset_request\\": {
        \\"description\\": \\"Create a password reset request - e.g. an email containing a one time URL to change a password\\",
        \\"properties\\": {
          \\"email\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The email address for which we generate the password reset.\\"
          }
        },
        \\"required\\": [
          \\"email\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"session\\": {
        \\"description\\": \\"Represents a user sessions (e.g. user logged into site)\\",
        \\"properties\\": {
          \\"id\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Cryptographically secure session id\\"
          },
          \\"expires_at\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"date-time\\"
          }
        },
        \\"required\\": [
          \\"id\\",
          \\"expires_at\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"subscription\\": {
        \\"description\\": \\"Represents a user that is currently subscribed to a publication\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this subscription record\\"
          },
          \\"organization\\": {
            \\"$ref\\": \\"#/components/schemas/organization\\"
          },
          \\"user\\": {
            \\"$ref\\": \\"#/components/schemas/user\\"
          },
          \\"publication\\": {
            \\"$ref\\": \\"#/components/schemas/publication\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"organization\\",
          \\"user\\",
          \\"publication\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"subscription_form\\": {
        \\"properties\\": {
          \\"organization_key\\": {
            \\"type\\": \\"string\\"
          },
          \\"user_guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"publication\\": {
            \\"$ref\\": \\"#/components/schemas/publication\\"
          }
        },
        \\"required\\": [
          \\"organization_key\\",
          \\"user_guid\\",
          \\"publication\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"token\\": {
        \\"description\\": \\"A token gives a user access to the API.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this token.\\"
          },
          \\"user\\": {
            \\"$ref\\": \\"#/components/schemas/user\\",
            \\"description\\": \\"The user to which this token belongs.\\"
          },
          \\"masked_token\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The masked from of the token.\\"
          },
          \\"description\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"optional description to help the user manage the token.\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"user\\",
          \\"masked_token\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"token_form\\": {
        \\"properties\\": {
          \\"user_guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"The user for which we are creating the token.\\"
          },
          \\"description\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"user_guid\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"user\\": {
        \\"description\\": \\"A user is a top level person interacting with the api doc server.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this user.\\"
          },
          \\"email\\": {
            \\"type\\": \\"string\\"
          },
          \\"nickname\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Public unique identifier for this user.\\"
          },
          \\"name\\": {
            \\"type\\": \\"string\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"email\\",
          \\"nickname\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"user_form\\": {
        \\"properties\\": {
          \\"email\\": {
            \\"type\\": \\"string\\"
          },
          \\"password\\": {
            \\"type\\": \\"string\\"
          },
          \\"nickname\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"Defaults to a unique identifier based on email address\\"
          },
          \\"name\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"email\\",
          \\"password\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"user_summary\\": {
        \\"description\\": \\"Summary of a user sufficient for display\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"nickname\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"guid\\",
          \\"nickname\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"user_update_form\\": {
        \\"properties\\": {
          \\"email\\": {
            \\"type\\": \\"string\\"
          },
          \\"nickname\\": {
            \\"type\\": \\"string\\"
          },
          \\"name\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"email\\",
          \\"nickname\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"validation\\": {
        \\"description\\": \\"Used only to validate json files - used as a resource where http status code defines success\\",
        \\"properties\\": {
          \\"valid\\": {
            \\"type\\": \\"boolean\\",
            \\"description\\": \\"If true, the json schema is valid. If false, there is at least one validation error.\\"
          },
          \\"errors\\": {
            \\"items\\": {
              \\"type\\": \\"string\\"
            },
            \\"type\\": \\"array\\",
            \\"description\\": \\"Contains any validation errors that result from parsing the json document. If empty, the document is valid.\\",
            \\"default\\": \\"[]\\"
          }
        },
        \\"required\\": [
          \\"valid\\",
          \\"errors\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"version\\": {
        \\"description\\": \\"Represents a unique version of the application.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this version.\\"
          },
          \\"organization\\": {},
          \\"application\\": {},
          \\"version\\": {
            \\"type\\": \\"string\\",
            \\"description\\": \\"The tag for this version. Can be anything, but if semver style version number is used, we automatically correctly sort by version number to find latest. Otherwise latest version is considered to be the most recently created.\\",
            \\"example\\": \\"1.0.0\\"
          },
          \\"original\\": {
            \\"$ref\\": \\"#/components/schemas/original\\",
            \\"description\\": \\"The original uploaded file describing this version, if available\\"
          },
          \\"service\\": {
            \\"description\\": \\"spec/spec.json description of this API\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"organization\\",
          \\"application\\",
          \\"version\\",
          \\"service\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"version_form\\": {
        \\"properties\\": {
          \\"original_form\\": {
            \\"$ref\\": \\"#/components/schemas/original_form\\"
          },
          \\"visibility\\": {
            \\"$ref\\": \\"#/components/schemas/visibility\\",
            \\"description\\": \\"If provided, updates the visibility for all versions of this application\\"
          }
        },
        \\"required\\": [
          \\"original_form\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"watch\\": {
        \\"description\\": \\"Users can watch individual applications which enables features like receiving an email notification when there is a new version of an application.\\",
        \\"properties\\": {
          \\"guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\",
            \\"description\\": \\"Internal unique identifier for this watch\\"
          },
          \\"user\\": {
            \\"$ref\\": \\"#/components/schemas/user\\"
          },
          \\"organization\\": {
            \\"$ref\\": \\"#/components/schemas/organization\\"
          },
          \\"application\\": {
            \\"$ref\\": \\"#/components/schemas/application\\"
          },
          \\"audit\\": {}
        },
        \\"required\\": [
          \\"guid\\",
          \\"user\\",
          \\"organization\\",
          \\"application\\",
          \\"audit\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"watch_form\\": {
        \\"properties\\": {
          \\"user_guid\\": {
            \\"type\\": \\"string\\",
            \\"format\\": \\"uuid\\"
          },
          \\"organization_key\\": {
            \\"type\\": \\"string\\"
          },
          \\"application_key\\": {
            \\"type\\": \\"string\\"
          }
        },
        \\"required\\": [
          \\"user_guid\\",
          \\"organization_key\\",
          \\"application_key\\"
        ],
        \\"type\\": \\"object\\"
      },
      \\"app_sort_by\\": {
        \\"description\\": \\"Possible values: name,created_at,updated_at,visibility.\\",
        \\"enum\\": [
          \\"name\\",
          \\"created_at\\",
          \\"updated_at\\",
          \\"visibility\\"
        ],
        \\"type\\": \\"string\\"
      },
      \\"original_type\\": {
        \\"description\\": \\"Possible values: api_json,avro_idl,service_json,swagger.\\",
        \\"enum\\": [
          \\"api_json\\",
          \\"avro_idl\\",
          \\"service_json\\",
          \\"swagger\\"
        ],
        \\"type\\": \\"string\\"
      },
      \\"publication\\": {
        \\"description\\": \\"A publication represents something that a user can subscribe to. An example would be subscribing to an email alert whenever a new version of an application is created. Possible values: membership_requests.create,memberships.create,applications.create,versions.create,versions.material_change.\\",
        \\"enum\\": [
          \\"membership_requests.create\\",
          \\"memberships.create\\",
          \\"applications.create\\",
          \\"versions.create\\",
          \\"versions.material_change\\"
        ],
        \\"type\\": \\"string\\"
      },
      \\"sort_order\\": {
        \\"description\\": \\"Possible values: asc,desc.\\",
        \\"enum\\": [
          \\"asc\\",
          \\"desc\\"
        ],
        \\"type\\": \\"string\\"
      },
      \\"visibility\\": {
        \\"description\\": \\"Controls who is able to view this version. Possible values: user,organization,public.\\",
        \\"enum\\": [
          \\"user\\",
          \\"organization\\",
          \\"public\\"
        ],
        \\"type\\": \\"string\\"
      },
      \\"diff\\": {
        \\"description\\": \\"Represents a single diff in an application\\",
        \\"oneOf\\": [
          {
            \\"$ref\\": \\"#/components/schemas/diff_breaking\\"
          },
          {
            \\"$ref\\": \\"#/components/schemas/diff_non_breaking\\"
          }
        ],
        \\"discriminator\\": {
          \\"mapping\\": {
            \\"diff_breaking\\": \\"#/components/schemas/diff_breaking\\",
            \\"diff_non_breaking\\": \\"#/components/schemas/diff_non_breaking\\"
          },
          \\"propertyName\\": \\"type\\"
        }
      },
      \\"item_detail\\": {
        \\"description\\": \\"Identifies the specific type of item that was indexed by search\\",
        \\"oneOf\\": [
          {
            \\"$ref\\": \\"#/components/schemas/application_summary\\"
          }
        ],
        \\"discriminator\\": {
          \\"mapping\\": {
            \\"application_summary\\": \\"#/components/schemas/application_summary\\"
          },
          \\"propertyName\\": \\"type\\"
        }
      }
    }
  },
  \\"info\\": {
    \\"contact\\": {
      \\"name\\": \\"Michael Bryzek\\",
      \\"url\\": \\"http://twitter.com/mbryzek\\",
      \\"email\\": \\"mbryzek@alum.mit.edu\\"
    },
    \\"description\\": \\"Host API documentation for applications providing REST APIs, facilitating the design of good resource first APIs.\\",
    \\"license\\": {
      \\"name\\": \\"MIT\\",
      \\"url\\": \\"http://opensource.org/licenses/MIT\\"
    },
    \\"termsOfService\\": \\"\\",
    \\"title\\": \\"apibuilder api\\",
    \\"version\\": \\"0.15.47\\"
  },
  \\"openapi\\": \\"3.0.2\\",
  \\"paths\\": {
    \\"/:orgKey/metadata/:applicationKey/versions\\": {
      \\"get\\": {
        \\"description\\": \\"Returns the versions assocoated with the specified application. The latest version is the first result returned.\\",
        \\"operationId\\": \\"get--orgKey-metadata-applicationKey-versions\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.application_metadata_version]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/application_metadata_version\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"application\\"
        ]
      }
    },
    \\"/:orgKey/metadata/:applicationKey/versions/latest.txt\\": {
      \\"get\\": {
        \\"description\\": \\"Returns the latest version number as a string\\",
        \\"operationId\\": \\"get--orgKey-metadata-applicationKey-versions-latesttxt\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"string\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"string\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"application\\"
        ]
      }
    },
    \\"/:orgKey\\": {
      \\"get\\": {
        \\"description\\": \\"Search all applications. Results are always paginated.\\",
        \\"operationId\\": \\"get--orgKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The organization key for which to search applications\\",
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The name of an application. Case in-sensitive. Exact match\\",
            \\"name\\": \\"name\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"The guid of an application. Exact match\\",
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The key of an application. Case in-sensitive. Exact match\\",
            \\"name\\": \\"key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"boolean\\"
            },
            \\"description\\": \\"If true, we return applications that have at least one version. If false, we return applications that have no versions in the system\\",
            \\"name\\": \\"has_version\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"$ref\\": \\"#/components/schemas/app_sort_by\\"
            },
            \\"name\\": \\"sort_by\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"$ref\\": \\"#/components/schemas/sort_order\\"
            },
            \\"name\\": \\"order\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.application]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/application\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"application\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Create an application.\\",
        \\"operationId\\": \\"post--orgKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/application_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.application\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/application\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"application\\"
        ]
      }
    },
    \\"/:orgKey/:applicationKey\\": {
      \\"put\\": {
        \\"description\\": \\"Updates an application.\\",
        \\"operationId\\": \\"put--orgKey-applicationKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/application_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.application\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/application\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"application\\"
        ]
      },
      \\"delete\\": {
        \\"description\\": \\"Deletes a specific application and its associated versions.\\",
        \\"operationId\\": \\"delete--orgKey-applicationKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"application\\"
        ]
      },
      \\"get\\": {
        \\"description\\": \\"Search all versions of this application. Results are always paginated.\\",
        \\"operationId\\": \\"get--orgKey-applicationKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The organization key for which to search versions\\",
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The application key for which to search versions\\",
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.version]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/version\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"version\\"
        ]
      }
    },
    \\"/:orgKey/:applicationKey/move\\": {
      \\"post\\": {
        \\"description\\": \\"Moves application to a new organization.\\",
        \\"operationId\\": \\"post--orgKey-applicationKey-move\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/move_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.application\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/application\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"application\\"
        ]
      }
    },
    \\"/attributes\\": {
      \\"get\\": {
        \\"description\\": \\"Search all attributes. Results are always paginated.\\",
        \\"operationId\\": \\"get--attributes\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Find the watch with this guid.\\",
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find attributes with this name. Case in-sensitive. Exact match\\",
            \\"name\\": \\"name\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.attribute]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/attribute\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"attribute\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Create a new attribute.\\",
        \\"operationId\\": \\"post--attributes\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/attribute_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"201\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.attribute\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/attribute\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"attribute\\"
        ]
      }
    },
    \\"/attributes/:name\\": {
      \\"get\\": {
        \\"description\\": \\"Returns the attribute with this name.\\",
        \\"operationId\\": \\"get--attributes-name\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"name\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.attribute\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/attribute\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"attribute\\"
        ]
      },
      \\"delete\\": {
        \\"description\\": \\"Deletes the attribute with this name. Only the user who created an attribute can delete it.\\",
        \\"operationId\\": \\"delete--attributes-name\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"name\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"attribute\\"
        ]
      }
    },
    \\"/authentications/session/:id\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--authentications-session-id\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"id\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.authentication\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/authentication\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"authentication\\"
        ]
      }
    },
    \\"/:orgKey/batch/download/applications\\": {
      \\"post\\": {
        \\"description\\": \\"Retrieve multiple applications in one api call.\\",
        \\"operationId\\": \\"post--orgKey-batch-download-applications\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/batch_download_applications_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"201\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.batch_download_applications\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/batch_download_applications\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"batch_download_applications\\"
        ]
      }
    },
    \\"/changes\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--changes\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Filter changes to those made for the organization with this key.\\",
            \\"name\\": \\"org_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Filter changes to those made for the application with this key.\\",
            \\"name\\": \\"application_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Filter changes to those made from this version.\\",
            \\"name\\": \\"from\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Filter changes to those made to this version.\\",
            \\"name\\": \\"to\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The type of diff to return.\\",
            \\"name\\": \\"type\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.change]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/change\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"change\\"
        ]
      }
    },
    \\"/:orgKey/:applicationKey/:version/form\\": {
      \\"post\\": {
        \\"description\\": \\"Create an invocation form. This is useful primarily for debugging when you want to see exactly what content is being forwarded to the generator\\",
        \\"operationId\\": \\"post--orgKey-applicationKey-version-form\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"version\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/code_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.generator.v0.models.invocation_form\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {}
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"code\\"
        ]
      }
    },
    \\"/:orgKey/:applicationKey/:version/:generatorKey\\": {
      \\"get\\": {
        \\"description\\": \\"Generate code for a specific version of an application.\\",
        \\"operationId\\": \\"get--orgKey-applicationKey-version-generatorKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The organization key for which to generate code\\",
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The application key for which to generate code\\",
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The version of this application. Can be 'latest'\\",
            \\"name\\": \\"version\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The key of the generator to invoke\\",
            \\"name\\": \\"generatorKey\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.code\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/code\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"If the target, version, and/or generator are invalid.\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"code\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Generate code for a specific version of an application.\\",
        \\"operationId\\": \\"post--orgKey-applicationKey-version-generatorKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The organization key for which to generate code\\",
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The application key for which to generate code\\",
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The version of this application. Can be 'latest'\\",
            \\"name\\": \\"version\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The key of the generator to invoke\\",
            \\"name\\": \\"generatorKey\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/code_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.code\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/code\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"If the target, version, and/or generator are invalid.\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"code\\"
        ]
      }
    },
    \\"/domains/:orgKey\\": {
      \\"post\\": {
        \\"description\\": \\"Add a domain to this organization\\",
        \\"operationId\\": \\"post--domains-orgKey\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/domain\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.domain\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/domain\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"domain\\"
        ]
      }
    },
    \\"/domains/:orgKey/:name\\": {
      \\"delete\\": {
        \\"description\\": \\"Remove this domain from this organization\\",
        \\"operationId\\": \\"delete--domains-orgKey-name\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"name\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"domain\\"
        ]
      }
    },
    \\"/email_verification_confirmations\\": {
      \\"post\\": {
        \\"description\\": \\"Validate an email address using a token.\\",
        \\"operationId\\": \\"post--email_verification_confirmations\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/email_verification_confirmation_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"email_verification_confirmation_form\\"
        ]
      }
    },
    \\"/generator_services\\": {
      \\"get\\": {
        \\"description\\": \\"List all generator services\\",
        \\"operationId\\": \\"get--generator_services\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"uri\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"generator_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"100\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.generator_service]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/generator_service\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"generator_service\\"
        ]
      },
      \\"post\\": {
        \\"operationId\\": \\"post--generator_services\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/generator_service_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.generator_service\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/generator_service\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"generator_service\\"
        ]
      }
    },
    \\"/generator_services/:guid\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--generator_services-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.generator_service\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/generator_service\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"generator_service\\"
        ]
      },
      \\"delete\\": {
        \\"description\\": \\"Deletes a generator service.\\",
        \\"operationId\\": \\"delete--generator_services-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"generator_service\\"
        ]
      }
    },
    \\"/generators\\": {
      \\"get\\": {
        \\"description\\": \\"List all available generators\\",
        \\"operationId\\": \\"get--generators\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Filter to generator with this guid\\",
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Filter to generator from this service\\",
            \\"name\\": \\"service_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Filter to generator from this service URI\\",
            \\"name\\": \\"service_uri\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Filter to generators that use this attribute\\",
            \\"name\\": \\"attribute_name\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Filter to generator with this key\\",
            \\"name\\": \\"key\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"100\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.generator_with_service]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/generator_with_service\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"generator_with_service\\"
        ]
      }
    },
    \\"/generators/:key\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--generators-key\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.generator_with_service\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/generator_with_service\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"generator_with_service\\"
        ]
      }
    },
    \\"/_internal_/healthcheck\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--_internal_-healthcheck\\",
        \\"parameters\\": [],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.generator.v0.models.healthcheck\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {}
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"io.apibuilder.generator.v0.models.healthcheck\\"
        ]
      }
    },
    \\"/_internal_/migrate\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--_internal_-migrate\\",
        \\"parameters\\": [],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"map[string]\\",
            \\"content\\": {
              \\"application/json\\": {}
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"io.apibuilder.generator.v0.models.healthcheck\\"
        ]
      }
    },
    \\"/items\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--items\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The search query. At the moment, we do case insensitive exact match search.\\",
            \\"name\\": \\"q\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.item]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/item\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"item\\"
        ]
      }
    },
    \\"/items/:guid\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--items-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.item\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/item\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"item\\"
        ]
      }
    },
    \\"/memberships\\": {
      \\"get\\": {
        \\"description\\": \\"Search all memberships. Results are always paginated.\\",
        \\"operationId\\": \\"get--memberships\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"org_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"org_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"role\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.membership]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/membership\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"membership\\"
        ]
      }
    },
    \\"/memberships/:guid\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--memberships-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.membership\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/membership\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"membership\\"
        ]
      },
      \\"delete\\": {
        \\"operationId\\": \\"delete--memberships-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"membership\\"
        ]
      }
    },
    \\"/membership_requests\\": {
      \\"get\\": {
        \\"description\\": \\"Search all membership requests. Results are always paginated.\\",
        \\"operationId\\": \\"get--membership_requests\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"org_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"org_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"role\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.membership_request]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/membership_request\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"membership_request\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Create a membership request\\",
        \\"operationId\\": \\"post--membership_requests\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"header\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"nullApibuilder defined this parameter location as \\\\\\"Form\\\\\\" which is incompatible with the OpenAPI spec.\\",
            \\"name\\": \\"org_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"header\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"nullApibuilder defined this parameter location as \\\\\\"Form\\\\\\" which is incompatible with the OpenAPI spec.\\",
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"header\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"nullApibuilder defined this parameter location as \\\\\\"Form\\\\\\" which is incompatible with the OpenAPI spec.\\",
            \\"name\\": \\"role\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.membership_request\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/membership_request\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"membership_request\\"
        ]
      }
    },
    \\"/membership_requests/:guid/accept\\": {
      \\"post\\": {
        \\"description\\": \\"Accepts this membership request. User will become a member of the specified organization.\\",
        \\"operationId\\": \\"post--membership_requests-guid-accept\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"membership_request\\"
        ]
      }
    },
    \\"/membership_requests/:guid/decline\\": {
      \\"post\\": {
        \\"description\\": \\"Declines this membership request. User will NOT become a member of the specified organization.\\",
        \\"operationId\\": \\"post--membership_requests-guid-decline\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"membership_request\\"
        ]
      }
    },
    \\"/organizations\\": {
      \\"get\\": {
        \\"description\\": \\"Search all organizations. Results are always paginated.\\",
        \\"operationId\\": \\"get--organizations\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Finds the organization with this guid, if any\\",
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"If specified, restricts to organizations that this user is specifically a member of (e.g. will exclude public organizations with which the user does not have a direct membership).\\",
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find organizations with this key. Case in-sensitive. Exact match\\",
            \\"name\\": \\"key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find organizations with this name. Case in-sensitive. Exact match\\",
            \\"name\\": \\"name\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find organizations with this namespace. Case in-sensitive. Exact match\\",
            \\"name\\": \\"namespace\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.organization]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/organization\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Create a new organization.\\",
        \\"operationId\\": \\"post--organizations\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/organization_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.organization\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/organization\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      }
    },
    \\"/organizations/:key\\": {
      \\"get\\": {
        \\"description\\": \\"Returns the organization with this key.\\",
        \\"operationId\\": \\"get--organizations-key\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.organization\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/organization\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      },
      \\"put\\": {
        \\"description\\": \\"Update an organization.\\",
        \\"operationId\\": \\"put--organizations-key\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/organization_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.organization\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/organization\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      },
      \\"delete\\": {
        \\"description\\": \\"Deletes an organization and all of its associated applications.\\",
        \\"operationId\\": \\"delete--organizations-key\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      }
    },
    \\"/organizations/:key/attributes\\": {
      \\"get\\": {
        \\"description\\": \\"Returns all attribute values for this organization. Results are always paginated.\\",
        \\"operationId\\": \\"get--organizations-key-attributes\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find the values for the attribute with this name.\\",
            \\"name\\": \\"name\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.attribute_value]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/attribute_value\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      }
    },
    \\"/organizations/:key/attributes/:name\\": {
      \\"get\\": {
        \\"description\\": \\"Returns the attribute value with this name.\\",
        \\"operationId\\": \\"get--organizations-key-attributes-name\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"name\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.attribute_value\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/attribute_value\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      },
      \\"put\\": {
        \\"description\\": \\"Create or update a new attribute value.\\",
        \\"operationId\\": \\"put--organizations-key-attributes-name\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"name\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/attribute_value_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.attribute_value\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/attribute_value\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"201\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.attribute_value\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/attribute_value\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      },
      \\"delete\\": {
        \\"description\\": \\"Deletes the attribute value with the specified name. Only the user who created an attribute value can delete it.\\",
        \\"operationId\\": \\"delete--organizations-key-attributes-name\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"name\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"organization\\"
        ]
      }
    },
    \\"/password_resets\\": {
      \\"post\\": {
        \\"description\\": \\"Change the password for this token. If the token is invalid, has been used, or otherwise no longer can be applied, errors will be returned as 409s. A 204 represents that the user has successfully changed their password.\\",
        \\"operationId\\": \\"post--password_resets\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/password_reset\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.authentication\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/authentication\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"password_reset\\"
        ]
      }
    },
    \\"/password_reset_requests\\": {
      \\"post\\": {
        \\"description\\": \\"Create a new password reset. This will send the user an email with a link to reset their password.\\",
        \\"operationId\\": \\"post--password_reset_requests\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/password_reset_request\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"password_reset_request\\"
        ]
      }
    },
    \\"/subscriptions\\": {
      \\"get\\": {
        \\"description\\": \\"Search subscriptions. Always paginated.\\",
        \\"operationId\\": \\"get--subscriptions\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Find the subscription with this guid.\\",
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find subscriptions for this organization.\\",
            \\"name\\": \\"organization_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Find subscriptions for this user.\\",
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"$ref\\": \\"#/components/schemas/publication\\"
            },
            \\"description\\": \\"Find subscriptions for this publication.\\",
            \\"name\\": \\"publication\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.subscription]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/subscription\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"subscription\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Create a new subscription.\\",
        \\"operationId\\": \\"post--subscriptions\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/subscription_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"201\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.subscription\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/subscription\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"subscription\\"
        ]
      }
    },
    \\"/subscriptions/:guid\\": {
      \\"get\\": {
        \\"description\\": \\"Returns information about a specific subscription.\\",
        \\"operationId\\": \\"get--subscriptions-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.subscription\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/subscription\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"subscription\\"
        ]
      },
      \\"delete\\": {
        \\"operationId\\": \\"delete--subscriptions-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"subscription\\"
        ]
      }
    },
    \\"/tokens/users/:user_guid\\": {
      \\"get\\": {
        \\"operationId\\": \\"get--tokens-users-user_guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.token]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/token\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"token\\"
        ]
      }
    },
    \\"/tokens/:guid/cleartext\\": {
      \\"get\\": {
        \\"description\\": \\"Used to fetch the clear text token.\\",
        \\"operationId\\": \\"get--tokens-guid-cleartext\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.cleartext_token\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/cleartext_token\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"token\\"
        ]
      }
    },
    \\"/tokens\\": {
      \\"post\\": {
        \\"description\\": \\"Create a new API token for this user\\",
        \\"operationId\\": \\"post--tokens\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/token_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"201\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.token\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/token\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"token\\"
        ]
      }
    },
    \\"/tokens/:guid\\": {
      \\"delete\\": {
        \\"operationId\\": \\"delete--tokens-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"token\\"
        ]
      }
    },
    \\"/users\\": {
      \\"get\\": {
        \\"description\\": \\"Search for a specific user. You must specify at least 1 parameter - either a guid, email or token - and will receive back either 0 or 1 users.\\",
        \\"operationId\\": \\"get--users\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Find user with this guid. Exact match\\",
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find user with this email address. Case in-sensitive. Exact match\\",
            \\"name\\": \\"email\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find user with the specified nickname. For users that register via GitHub, this will be their GitHub username. Case in-sensitive. Exact match\\",
            \\"name\\": \\"nickname\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find the user with this API token. Exact match\\",
            \\"name\\": \\"token\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.user]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/user\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"user\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Create a new user.\\",
        \\"operationId\\": \\"post--users\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/user_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.user\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/user\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"user\\"
        ]
      }
    },
    \\"/users/:guid\\": {
      \\"get\\": {
        \\"description\\": \\"Returns information about the user with this guid.\\",
        \\"operationId\\": \\"get--users-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.user\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/user\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"user\\"
        ]
      },
      \\"put\\": {
        \\"description\\": \\"Updates information about the user with the specified guid.\\",
        \\"operationId\\": \\"put--users-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/user_update_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.user\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/user\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"user\\"
        ]
      }
    },
    \\"/users/authenticate\\": {
      \\"post\\": {
        \\"description\\": \\"Used to authenticate a user with an email address and password. Successful authentication returns an instance of the user model. Failed authorizations of any kind are returned as a generic error with code user_authorization_failed.\\",
        \\"operationId\\": \\"post--users-authenticate\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"header\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"nullApibuilder defined this parameter location as \\\\\\"Form\\\\\\" which is incompatible with the OpenAPI spec.\\",
            \\"name\\": \\"email\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"header\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"nullApibuilder defined this parameter location as \\\\\\"Form\\\\\\" which is incompatible with the OpenAPI spec.\\",
            \\"name\\": \\"password\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.authentication\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/authentication\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"user\\"
        ]
      }
    },
    \\"/users/authenticate_github\\": {
      \\"post\\": {
        \\"description\\": \\"Used to authenticate a user using a github access token. This is equivalent to running the following command to get the user info: curl -H 'Authorization: Bearer code' https://api.github.com/user\\",
        \\"operationId\\": \\"post--users-authenticate_github\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"header\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The GitHub assigned oauth tokenApibuilder defined this parameter location as \\\\\\"Form\\\\\\" which is incompatible with the OpenAPI spec.\\",
            \\"name\\": \\"token\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.authentication\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/authentication\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"user\\"
        ]
      }
    },
    \\"/validations\\": {
      \\"post\\": {
        \\"operationId\\": \\"post--validations\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"type\\": \\"string\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.validation\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/validation\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"validation\\"
        ]
      }
    },
    \\"/:orgKey/:applicationKey/:version\\": {
      \\"get\\": {
        \\"description\\": \\"Retrieve a specific version of an application.\\",
        \\"operationId\\": \\"get--orgKey-applicationKey-version\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The version of tthis application to download, or the keyword latest to get the latest version\\",
            \\"name\\": \\"version\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.version\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/version\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"version\\"
        ]
      },
      \\"put\\": {
        \\"description\\": \\"Upsert a version of an application\\",
        \\"operationId\\": \\"put--orgKey-applicationKey-version\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"version\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/version_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.version\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/version\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"version\\"
        ]
      },
      \\"delete\\": {
        \\"description\\": \\"Deletes a specific version.\\",
        \\"operationId\\": \\"delete--orgKey-applicationKey-version\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"version\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"version\\"
        ]
      }
    },
    \\"/:orgKey/:version\\": {
      \\"post\\": {
        \\"description\\": \\"Create a new version for an application\\",
        \\"operationId\\": \\"post--orgKey-version\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"version\\"
          }
        ],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/version_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.version\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/version\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"version\\"
        ]
      }
    },
    \\"/:orgKey/:applicationKey/:version/example/:type_name\\": {
      \\"get\\": {
        \\"description\\": \\"Generates an example JSON document of the type with the specified name.\\",
        \\"operationId\\": \\"get--orgKey-applicationKey-version-example-type_name\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"orgKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"applicationKey\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The version of this application to download, or the keyword latest to get the latest version\\",
            \\"name\\": \\"version\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The name of the type (e.g. model name) for which you would like to generate a sample json document\\",
            \\"name\\": \\"type_name\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"The name of the sub-type for which you would like to generate a sample json document, e.g. a specific type of a union\\",
            \\"name\\": \\"sub_type_name\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"boolean\\"
            },
            \\"description\\": \\"If true, we generate sample data for all optional fields. Otherwise the generated sample will contain only required fields, where applicable\\",
            \\"name\\": \\"optional_fields\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"object\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"object\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"version\\"
        ]
      }
    },
    \\"/watches\\": {
      \\"get\\": {
        \\"description\\": \\"Search attributes. Always paginated.\\",
        \\"operationId\\": \\"get--watches\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Find the watch with this guid.\\",
            \\"name\\": \\"guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"Find attributes for this user.\\",
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find attributes for this organization.\\",
            \\"name\\": \\"organization_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"description\\": \\"Find attributes for this application.\\",
            \\"name\\": \\"application_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"25\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"The number of records to return\\",
            \\"name\\": \\"limit\\"
          },
          {
            \\"deprecated\\": false,
            \\"example\\": \\"0\\",
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"integer\\",
              \\"format\\": \\"int64\\"
            },
            \\"description\\": \\"Used to paginate. First page of results is 0.\\",
            \\"name\\": \\"offset\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.watch]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/watch\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"watch\\"
        ]
      },
      \\"post\\": {
        \\"description\\": \\"Create a new watch.\\",
        \\"operationId\\": \\"post--watches\\",
        \\"parameters\\": [],
        \\"requestBody\\": {
          \\"content\\": {
            \\"application/json\\": {
              \\"schema\\": {
                \\"$ref\\": \\"#/components/schemas/watch_form\\"
              }
            }
          }
        },
        \\"responses\\": {
          \\"201\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.watch\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/watch\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"409\\": {
            \\"description\\": \\"[io.apibuilder.api.v0.models.error]\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"items\\": {
                    \\"$ref\\": \\"#/components/schemas/error\\"
                  },
                  \\"type\\": \\"array\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"watch\\"
        ]
      }
    },
    \\"/watches/:guid\\": {
      \\"get\\": {
        \\"description\\": \\"Returns information about a specific watch.\\",
        \\"operationId\\": \\"get--watches-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"io.apibuilder.api.v0.models.watch\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"$ref\\": \\"#/components/schemas/watch\\"
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"watch\\"
        ]
      },
      \\"delete\\": {
        \\"operationId\\": \\"delete--watches-guid\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"path\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"name\\": \\"guid\\"
          }
        ],
        \\"responses\\": {
          \\"204\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"401\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          },
          \\"404\\": {
            \\"description\\": \\"unit\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"integer\\",
                  \\"nullable\\": true
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"watch\\"
        ]
      }
    },
    \\"/watches/check\\": {
      \\"get\\": {
        \\"description\\": \\"Quick check if a user is watching a specific application.\\",
        \\"operationId\\": \\"get--watches-check\\",
        \\"parameters\\": [
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": false,
            \\"schema\\": {
              \\"type\\": \\"string\\",
              \\"format\\": \\"uuid\\"
            },
            \\"description\\": \\"The user for which we are checking. API returns false if the user guid is not provided\\",
            \\"name\\": \\"user_guid\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"organization_key\\"
          },
          {
            \\"deprecated\\": false,
            \\"in\\": \\"query\\",
            \\"required\\": true,
            \\"schema\\": {
              \\"type\\": \\"string\\"
            },
            \\"name\\": \\"application_key\\"
          }
        ],
        \\"responses\\": {
          \\"200\\": {
            \\"description\\": \\"boolean\\",
            \\"content\\": {
              \\"application/json\\": {
                \\"schema\\": {
                  \\"type\\": \\"boolean\\"
                }
              }
            },
            \\"headers\\": {}
          }
        },
        \\"tags\\": [
          \\"watch\\"
        ]
      }
    }
  },
  \\"servers\\": [
    {
      \\"url\\": \\"https://api.apibuilder.io\\"
    }
  ]
}"
`;

exports[`POST /invocations/:key prop_types: io/apibuilder/api/v0/apibuilder-api.d.ts 1`] = `
"import PropTypes from 'prop-types';

declare namespace io.apibuilder.common.v0.models {
  interface Audit {
    readonly 'created_at': string;
    readonly 'created_by': io.apibuilder.common.v0.models.ReferenceGuid;
    readonly 'updated_at': string;
    readonly 'updated_by': io.apibuilder.common.v0.models.ReferenceGuid;
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Reference {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ReferenceGuid {
    readonly 'guid': string;
  }
}

declare namespace io.apibuilder.spec.v0.enums {
  type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'TRACE';
  type ParameterLocation = 'Path' | 'Query' | 'Form' | 'Header';
  type ResponseCodeOption = 'Default';
}

declare namespace io.apibuilder.spec.v0.models {
  interface Annotation {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Apidoc {
    readonly 'version': string;
  }

  interface Application {
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'name': string;
    readonly 'value': any/*object*/;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Body {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Contact {
    readonly 'name'?: string;
    readonly 'url'?: string;
    readonly 'email'?: string;
  }

  interface Deprecation {
    readonly 'description'?: string;
  }

  interface Enum {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'values': io.apibuilder.spec.v0.models.EnumValue[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface EnumValue {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'value'?: string;
  }

  interface Field {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'default'?: string;
    readonly 'required': boolean;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': string[];
  }

  interface Header {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Import {
    readonly 'uri': string;
    readonly 'namespace': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'version': string;
    readonly 'enums': string[];
    readonly 'interfaces': string[];
    readonly 'unions': string[];
    readonly 'models': string[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Info {
    readonly 'license'?: io.apibuilder.spec.v0.models.License;
    readonly 'contact'?: io.apibuilder.spec.v0.models.Contact;
  }

  interface Interface {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface License {
    readonly 'name': string;
    readonly 'url'?: string;
  }

  interface Model {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface Operation {
    readonly 'method': io.apibuilder.spec.v0.enums.Method;
    readonly 'path': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'body'?: io.apibuilder.spec.v0.models.Body;
    readonly 'parameters': io.apibuilder.spec.v0.models.Parameter[];
    readonly 'responses': io.apibuilder.spec.v0.models.Response[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Organization {
    readonly 'key': string;
  }

  interface Parameter {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'location': io.apibuilder.spec.v0.enums.ParameterLocation;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Resource {
    readonly 'type': string;
    readonly 'plural': string;
    readonly 'path'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'operations': io.apibuilder.spec.v0.models.Operation[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Response {
    readonly 'code': io.apibuilder.spec.v0.unions.ResponseCode;
    readonly 'type': string;
    readonly 'headers'?: io.apibuilder.spec.v0.models.Header[];
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Service {
    readonly 'apidoc': io.apibuilder.spec.v0.models.Apidoc;
    readonly 'name': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'namespace': string;
    readonly 'version': string;
    readonly 'base_url'?: string;
    readonly 'description'?: string;
    readonly 'info': io.apibuilder.spec.v0.models.Info;
    readonly 'headers': io.apibuilder.spec.v0.models.Header[];
    readonly 'imports': io.apibuilder.spec.v0.models.Import[];
    readonly 'enums': io.apibuilder.spec.v0.models.Enum[];
    readonly 'interfaces': io.apibuilder.spec.v0.models.Interface[];
    readonly 'unions': io.apibuilder.spec.v0.models.Union[];
    readonly 'models': io.apibuilder.spec.v0.models.Model[];
    readonly 'resources': io.apibuilder.spec.v0.models.Resource[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Union {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'discriminator'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'types': io.apibuilder.spec.v0.models.UnionType[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface UnionType {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'default'?: boolean;
    readonly 'discriminator_value'?: string;
  }
}

declare namespace io.apibuilder.spec.v0.unions {
  type ResponseCode = ({
    discriminator: 'integer',
    value: number
  } | {
    discriminator: 'response_code_option',
    value: io.apibuilder.spec.v0.enums.ResponseCodeOption
  });
}

declare namespace io.apibuilder.generator.v0.enums {
  type FileFlag = 'scaffolding';
}

declare namespace io.apibuilder.generator.v0.models {
  interface Attribute {
    readonly 'name': string;
    readonly 'value': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface File {
    readonly 'name': string;
    readonly 'dir'?: string;
    readonly 'contents': string;
    readonly 'flags'?: io.apibuilder.generator.v0.enums.FileFlag[];
  }

  interface Generator {
    readonly 'key': string;
    readonly 'name': string;
    readonly 'language'?: string;
    readonly 'description'?: string;
    readonly 'attributes': string[];
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Invocation {
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface InvocationForm {
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
    readonly 'user_agent'?: string;
    readonly 'imported_services'?: io.apibuilder.spec.v0.models.Service[];
  }
}

declare namespace io.apibuilder.api.v0.enums {
  type AppSortBy = 'name' | 'created_at' | 'updated_at' | 'visibility';
  type OriginalType = 'api_json' | 'avro_idl' | 'service_json' | 'swagger';
  type Publication = 'membership_requests.create' | 'memberships.create' | 'applications.create' | 'versions.create' | 'versions.material_change';
  type SortOrder = 'asc' | 'desc';
  type Visibility = 'user' | 'organization' | 'public';
}

declare namespace io.apibuilder.api.v0.models {
  interface Application {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'name': string;
    readonly 'key': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'description'?: string;
    readonly 'last_updated_at': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ApplicationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'description'?: string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
  }

  interface ApplicationMetadata {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ApplicationMetadataVersion {
    readonly 'version': string;
  }

  interface ApplicationSummary {
    readonly 'type': 'application_summary';
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'guid': string;
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeForm {
    readonly 'name': string;
    readonly 'description'?: string;
  }

  interface AttributeSummary {
    readonly 'guid': string;
    readonly 'name': string;
  }

  interface AttributeValue {
    readonly 'guid': string;
    readonly 'attribute': io.apibuilder.api.v0.models.AttributeSummary;
    readonly 'value': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeValueForm {
    readonly 'value': string;
  }

  interface Authentication {
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'session': io.apibuilder.api.v0.models.Session;
  }

  interface BatchDownloadApplicationForm {
    readonly 'application_key': string;
    readonly 'version': string;
  }

  interface BatchDownloadApplications {
    readonly 'applications': io.apibuilder.api.v0.models.Version[];
  }

  interface BatchDownloadApplicationsForm {
    readonly 'applications': io.apibuilder.api.v0.models.BatchDownloadApplicationForm[];
  }

  interface Change {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'from_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'to_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'diff': io.apibuilder.api.v0.unions.Diff;
    readonly 'changed_at': string;
    readonly 'changed_by': io.apibuilder.api.v0.models.UserSummary;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ChangeVersion {
    readonly 'guid': string;
    readonly 'version': string;
  }

  interface CleartextToken {
    readonly 'token': string;
  }

  interface Code {
    readonly 'generator': io.apibuilder.api.v0.models.GeneratorWithService;
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface CodeForm {
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
  }

  interface DiffBreaking {
    readonly 'type': 'diff_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface DiffNonBreaking {
    readonly 'type': 'diff_non_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface Domain {
    readonly 'name': string;
  }

  interface EmailVerificationConfirmationForm {
    readonly 'token': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface GeneratorForm {
    readonly 'service_guid': string;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface GeneratorService {
    readonly 'guid': string;
    readonly 'uri': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface GeneratorServiceForm {
    readonly 'uri': string;
  }

  interface GeneratorWithService {
    readonly 'service': io.apibuilder.api.v0.models.GeneratorService;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface Item {
    readonly 'guid': string;
    readonly 'detail': io.apibuilder.api.v0.unions.ItemDetail;
    readonly 'label': string;
    readonly 'description'?: string;
  }

  interface Membership {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MembershipRequest {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MoveForm {
    readonly 'org_key': string;
  }

  interface Organization {
    readonly 'guid': string;
    readonly 'key': string;
    readonly 'name': string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains': io.apibuilder.api.v0.models.Domain[];
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface OrganizationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains'?: string[];
  }

  interface Original {
    readonly 'type': io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface OriginalForm {
    readonly 'type'?: io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface PasswordReset {
    readonly 'token': string;
    readonly 'password': string;
  }

  interface PasswordResetRequest {
    readonly 'email': string;
  }

  interface Session {
    readonly 'id': string;
    readonly 'expires_at': string;
  }

  interface Subscription {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface SubscriptionForm {
    readonly 'organization_key': string;
    readonly 'user_guid': string;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
  }

  interface Token {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'masked_token': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface TokenForm {
    readonly 'user_guid': string;
    readonly 'description'?: string;
  }

  interface User {
    readonly 'guid': string;
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface UserForm {
    readonly 'email': string;
    readonly 'password': string;
    readonly 'nickname'?: string;
    readonly 'name'?: string;
  }

  interface UserSummary {
    readonly 'guid': string;
    readonly 'nickname': string;
  }

  interface UserUpdateForm {
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
  }

  interface Validation {
    readonly 'valid': boolean;
    readonly 'errors': string[];
  }

  interface Version {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'version': string;
    readonly 'original'?: io.apibuilder.api.v0.models.Original;
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface VersionForm {
    readonly 'original_form': io.apibuilder.api.v0.models.OriginalForm;
    readonly 'visibility'?: io.apibuilder.api.v0.enums.Visibility;
  }

  interface Watch {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'application': io.apibuilder.api.v0.models.Application;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface WatchForm {
    readonly 'user_guid': string;
    readonly 'organization_key': string;
    readonly 'application_key': string;
  }
}

declare namespace io.apibuilder.api.v0.unions {
  type Diff = (io.apibuilder.api.v0.models.DiffBreaking | io.apibuilder.api.v0.models.DiffNonBreaking);
  type ItemDetail = (io.apibuilder.api.v0.models.ApplicationSummary);
}

export const appSortBy: PropTypes.Requireable<io.apibuilder.api.v0.enums.AppSortBy>;
export const originalType: PropTypes.Requireable<io.apibuilder.api.v0.enums.OriginalType>;
export const publication: PropTypes.Requireable<io.apibuilder.api.v0.enums.Publication>;
export const sortOrder: PropTypes.Requireable<io.apibuilder.api.v0.enums.SortOrder>;
export const visibility: PropTypes.Requireable<io.apibuilder.api.v0.enums.Visibility>;
export const application: PropTypes.Requireable<io.apibuilder.api.v0.models.Application>;
export const applicationForm: PropTypes.Requireable<io.apibuilder.api.v0.models.ApplicationForm>;
export const applicationMetadata: PropTypes.Requireable<io.apibuilder.api.v0.models.ApplicationMetadata>;
export const applicationMetadataVersion: PropTypes.Requireable<io.apibuilder.api.v0.models.ApplicationMetadataVersion>;
export const applicationSummary: PropTypes.Requireable<io.apibuilder.api.v0.models.ApplicationSummary>;
export const attribute: PropTypes.Requireable<io.apibuilder.api.v0.models.Attribute>;
export const attributeForm: PropTypes.Requireable<io.apibuilder.api.v0.models.AttributeForm>;
export const attributeSummary: PropTypes.Requireable<io.apibuilder.api.v0.models.AttributeSummary>;
export const attributeValue: PropTypes.Requireable<io.apibuilder.api.v0.models.AttributeValue>;
export const attributeValueForm: PropTypes.Requireable<io.apibuilder.api.v0.models.AttributeValueForm>;
export const authentication: PropTypes.Requireable<io.apibuilder.api.v0.models.Authentication>;
export const batchDownloadApplicationForm: PropTypes.Requireable<io.apibuilder.api.v0.models.BatchDownloadApplicationForm>;
export const batchDownloadApplications: PropTypes.Requireable<io.apibuilder.api.v0.models.BatchDownloadApplications>;
export const batchDownloadApplicationsForm: PropTypes.Requireable<io.apibuilder.api.v0.models.BatchDownloadApplicationsForm>;
export const change: PropTypes.Requireable<io.apibuilder.api.v0.models.Change>;
export const changeVersion: PropTypes.Requireable<io.apibuilder.api.v0.models.ChangeVersion>;
export const cleartextToken: PropTypes.Requireable<io.apibuilder.api.v0.models.CleartextToken>;
export const code: PropTypes.Requireable<io.apibuilder.api.v0.models.Code>;
export const codeForm: PropTypes.Requireable<io.apibuilder.api.v0.models.CodeForm>;
export const diffBreaking: PropTypes.Requireable<io.apibuilder.api.v0.models.DiffBreaking>;
export const diffNonBreaking: PropTypes.Requireable<io.apibuilder.api.v0.models.DiffNonBreaking>;
export const domain: PropTypes.Requireable<io.apibuilder.api.v0.models.Domain>;
export const emailVerificationConfirmationForm: PropTypes.Requireable<io.apibuilder.api.v0.models.EmailVerificationConfirmationForm>;
export const error: PropTypes.Requireable<io.apibuilder.api.v0.models.Error>;
export const generatorForm: PropTypes.Requireable<io.apibuilder.api.v0.models.GeneratorForm>;
export const generatorService: PropTypes.Requireable<io.apibuilder.api.v0.models.GeneratorService>;
export const generatorServiceForm: PropTypes.Requireable<io.apibuilder.api.v0.models.GeneratorServiceForm>;
export const generatorWithService: PropTypes.Requireable<io.apibuilder.api.v0.models.GeneratorWithService>;
export const item: PropTypes.Requireable<io.apibuilder.api.v0.models.Item>;
export const membership: PropTypes.Requireable<io.apibuilder.api.v0.models.Membership>;
export const membershipRequest: PropTypes.Requireable<io.apibuilder.api.v0.models.MembershipRequest>;
export const moveForm: PropTypes.Requireable<io.apibuilder.api.v0.models.MoveForm>;
export const organization: PropTypes.Requireable<io.apibuilder.api.v0.models.Organization>;
export const organizationForm: PropTypes.Requireable<io.apibuilder.api.v0.models.OrganizationForm>;
export const original: PropTypes.Requireable<io.apibuilder.api.v0.models.Original>;
export const originalForm: PropTypes.Requireable<io.apibuilder.api.v0.models.OriginalForm>;
export const passwordReset: PropTypes.Requireable<io.apibuilder.api.v0.models.PasswordReset>;
export const passwordResetRequest: PropTypes.Requireable<io.apibuilder.api.v0.models.PasswordResetRequest>;
export const session: PropTypes.Requireable<io.apibuilder.api.v0.models.Session>;
export const subscription: PropTypes.Requireable<io.apibuilder.api.v0.models.Subscription>;
export const subscriptionForm: PropTypes.Requireable<io.apibuilder.api.v0.models.SubscriptionForm>;
export const token: PropTypes.Requireable<io.apibuilder.api.v0.models.Token>;
export const tokenForm: PropTypes.Requireable<io.apibuilder.api.v0.models.TokenForm>;
export const user: PropTypes.Requireable<io.apibuilder.api.v0.models.User>;
export const userForm: PropTypes.Requireable<io.apibuilder.api.v0.models.UserForm>;
export const userSummary: PropTypes.Requireable<io.apibuilder.api.v0.models.UserSummary>;
export const userUpdateForm: PropTypes.Requireable<io.apibuilder.api.v0.models.UserUpdateForm>;
export const validation: PropTypes.Requireable<io.apibuilder.api.v0.models.Validation>;
export const version: PropTypes.Requireable<io.apibuilder.api.v0.models.Version>;
export const versionForm: PropTypes.Requireable<io.apibuilder.api.v0.models.VersionForm>;
export const watch: PropTypes.Requireable<io.apibuilder.api.v0.models.Watch>;
export const watchForm: PropTypes.Requireable<io.apibuilder.api.v0.models.WatchForm>;
export const diff: PropTypes.Requireable<io.apibuilder.api.v0.unions.Diff>;
export const itemDetail: PropTypes.Requireable<io.apibuilder.api.v0.unions.ItemDetail>;"
`;

exports[`POST /invocations/:key prop_types: io/apibuilder/api/v0/apibuilder-api.js 1`] = `
"import PropTypes from 'prop-types';
const T = {};
T['io.apibuilder.spec.v0.enums.response_code_option'] = PropTypes.oneOf(['Default']);

T['io.apibuilder.spec.v0.unions.response_code'] = PropTypes.oneOfType([PropTypes.exact({
  discriminator: PropTypes.oneOf(['integer']).isRequired,
  value: PropTypes.number,
}), PropTypes.exact({
  discriminator: PropTypes.oneOf(['response_code_option']).isRequired,
  value: T['io.apibuilder.spec.v0.enums.response_code_option'],
})]);

T['io.apibuilder.spec.v0.enums.parameter_location'] = PropTypes.oneOf(['Path', 'Query', 'Form', 'Header']);

T['io.apibuilder.spec.v0.enums.method'] = PropTypes.oneOf([
  'GET',
  'POST',
  'PUT',
  'PATCH',
  'DELETE',
  'HEAD',
  'CONNECT',
  'OPTIONS',
  'TRACE',
]);

T['io.apibuilder.spec.v0.models.contact'] = PropTypes.exact({
  name: PropTypes.string,
  url: PropTypes.string,
  email: PropTypes.string,
});

T['io.apibuilder.spec.v0.models.license'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  url: PropTypes.string,
});

T['io.apibuilder.spec.v0.models.deprecation'] = PropTypes.exact({
  description: PropTypes.string,
});

T['io.apibuilder.spec.v0.models.annotation'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
});

T['io.apibuilder.spec.v0.models.attribute'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  value: PropTypes.object.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
});

T['io.apibuilder.spec.v0.models.union_type'] = PropTypes.exact({
  type: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
  'default': PropTypes.bool,
  discriminator_value: PropTypes.string,
});

T['io.apibuilder.spec.v0.models.parameter'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  type: PropTypes.string.isRequired,
  location: T['io.apibuilder.spec.v0.enums.parameter_location'].isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  required: PropTypes.bool.isRequired,
  'default': PropTypes.string,
  minimum: PropTypes.number,
  maximum: PropTypes.number,
  example: PropTypes.string,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']),
});

T['io.apibuilder.spec.v0.models.field'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  type: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  'default': PropTypes.string,
  required: PropTypes.bool.isRequired,
  minimum: PropTypes.number,
  maximum: PropTypes.number,
  example: PropTypes.string,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
  annotations: PropTypes.arrayOf(PropTypes.string).isRequired,
});

T['io.apibuilder.spec.v0.models.enum_value'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
  value: PropTypes.string,
});

T['io.apibuilder.spec.v0.models.body'] = PropTypes.exact({
  type: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
});

T['io.apibuilder.spec.v0.models.model'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  plural: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  fields: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.field']).isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
  interfaces: PropTypes.arrayOf(PropTypes.string).isRequired,
});

T['io.apibuilder.spec.v0.models.union'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  plural: PropTypes.string.isRequired,
  discriminator: PropTypes.string,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  types: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.union_type']).isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
  interfaces: PropTypes.arrayOf(PropTypes.string).isRequired,
});

T['io.apibuilder.spec.v0.models.interface'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  plural: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  fields: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.field']).isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
});

T['io.apibuilder.spec.v0.models.enum'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  plural: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  values: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.enum_value']).isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
});

T['io.apibuilder.spec.v0.models.header'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  type: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  required: PropTypes.bool.isRequired,
  'default': PropTypes.string,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
});

T['io.apibuilder.spec.v0.models.response'] = PropTypes.exact({
  code: T['io.apibuilder.spec.v0.unions.response_code'].isRequired,
  type: PropTypes.string.isRequired,
  headers: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.header']),
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']),
});

T['io.apibuilder.spec.v0.models.operation'] = PropTypes.exact({
  method: T['io.apibuilder.spec.v0.enums.method'].isRequired,
  path: PropTypes.string.isRequired,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  body: T['io.apibuilder.spec.v0.models.body'],
  parameters: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.parameter']).isRequired,
  responses: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.response']).isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
});

T['io.apibuilder.spec.v0.models.resource'] = PropTypes.exact({
  type: PropTypes.string.isRequired,
  plural: PropTypes.string.isRequired,
  path: PropTypes.string,
  description: PropTypes.string,
  deprecation: T['io.apibuilder.spec.v0.models.deprecation'],
  operations: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.operation']).isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
});

T['io.apibuilder.spec.v0.models.info'] = PropTypes.exact({
  license: T['io.apibuilder.spec.v0.models.license'],
  contact: T['io.apibuilder.spec.v0.models.contact'],
});

T['io.apibuilder.spec.v0.models.application'] = PropTypes.exact({
  key: PropTypes.string.isRequired,
});

T['io.apibuilder.spec.v0.models.organization'] = PropTypes.exact({
  key: PropTypes.string.isRequired,
});

T['io.apibuilder.spec.v0.models.import'] = PropTypes.exact({
  uri: PropTypes.string.isRequired,
  namespace: PropTypes.string.isRequired,
  organization: T['io.apibuilder.spec.v0.models.organization'].isRequired,
  application: T['io.apibuilder.spec.v0.models.application'].isRequired,
  version: PropTypes.string.isRequired,
  enums: PropTypes.arrayOf(PropTypes.string).isRequired,
  interfaces: PropTypes.arrayOf(PropTypes.string).isRequired,
  unions: PropTypes.arrayOf(PropTypes.string).isRequired,
  models: PropTypes.arrayOf(PropTypes.string).isRequired,
  annotations: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.annotation']).isRequired,
});

T['io.apibuilder.spec.v0.models.apidoc'] = PropTypes.exact({
  version: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.enums.publication'] = PropTypes.oneOf([
  'membership_requests.create',
  'memberships.create',
  'applications.create',
  'versions.create',
  'versions.material_change',
]);

T['io.apibuilder.api.v0.models.subscription_form'] = PropTypes.exact({
  organization_key: PropTypes.string.isRequired,
  user_guid: PropTypes.string.isRequired,
  publication: T['io.apibuilder.api.v0.enums.publication'].isRequired,
});

T['io.apibuilder.api.v0.enums.original_type'] = PropTypes.oneOf(['api_json', 'avro_idl', 'service_json', 'swagger']);

T['io.apibuilder.api.v0.models.original_form'] = PropTypes.exact({
  type: T['io.apibuilder.api.v0.enums.original_type'],
  data: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.domain'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
});

T['io.apibuilder.generator.v0.models.attribute'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  value: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.code_form'] = PropTypes.exact({
  attributes: PropTypes.arrayOf(T['io.apibuilder.generator.v0.models.attribute']).isRequired,
});

T['io.apibuilder.generator.v0.enums.file_flag'] = PropTypes.oneOf(['scaffolding']);

T['io.apibuilder.generator.v0.models.generator'] = PropTypes.exact({
  key: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
  language: PropTypes.string,
  description: PropTypes.string,
  attributes: PropTypes.arrayOf(PropTypes.string).isRequired,
});

T['io.apibuilder.api.v0.models.generator_form'] = PropTypes.exact({
  service_guid: PropTypes.string.isRequired,
  generator: T['io.apibuilder.generator.v0.models.generator'].isRequired,
});

T['io.apibuilder.generator.v0.models.file'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  dir: PropTypes.string,
  contents: PropTypes.string.isRequired,
  flags: PropTypes.arrayOf(T['io.apibuilder.generator.v0.enums.file_flag']),
});

T['io.apibuilder.generator.v0.models.invocation'] = PropTypes.exact({
  source: PropTypes.string.isRequired,
  files: PropTypes.arrayOf(T['io.apibuilder.generator.v0.models.file']).isRequired,
});

T['io.apibuilder.api.v0.models.diff_non_breaking'] = PropTypes.exact({
  type: PropTypes.oneOf(['diff_non_breaking']).isRequired,
  description: PropTypes.string.isRequired,
  is_material: PropTypes.bool.isRequired,
});

T['io.apibuilder.api.v0.models.diff_breaking'] = PropTypes.exact({
  type: PropTypes.oneOf(['diff_breaking']).isRequired,
  description: PropTypes.string.isRequired,
  is_material: PropTypes.bool.isRequired,
});

T['io.apibuilder.api.v0.models.user_summary'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  nickname: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.unions.diff'] = PropTypes.oneOfType([
  T['io.apibuilder.api.v0.models.diff_breaking'],
  T['io.apibuilder.api.v0.models.diff_non_breaking'],
]);

T['io.apibuilder.api.v0.models.change_version'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  version: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.batch_download_application_form'] = PropTypes.exact({
  application_key: PropTypes.string.isRequired,
  version: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.batch_download_applications_form'] = PropTypes.exact({
  applications: PropTypes.arrayOf(T['io.apibuilder.api.v0.models.batch_download_application_form']).isRequired,
});

T['io.apibuilder.spec.v0.models.service'] = PropTypes.exact({
  apidoc: T['io.apibuilder.spec.v0.models.apidoc'].isRequired,
  name: PropTypes.string.isRequired,
  organization: T['io.apibuilder.spec.v0.models.organization'].isRequired,
  application: T['io.apibuilder.spec.v0.models.application'].isRequired,
  namespace: PropTypes.string.isRequired,
  version: PropTypes.string.isRequired,
  base_url: PropTypes.string,
  description: PropTypes.string,
  info: T['io.apibuilder.spec.v0.models.info'].isRequired,
  headers: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.header']).isRequired,
  imports: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.import']).isRequired,
  enums: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.enum']).isRequired,
  interfaces: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.interface']).isRequired,
  unions: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.union']).isRequired,
  models: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.model']).isRequired,
  resources: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.resource']).isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.attribute']).isRequired,
  annotations: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.annotation']).isRequired,
});

T['io.apibuilder.generator.v0.models.invocation_form'] = PropTypes.exact({
  service: T['io.apibuilder.spec.v0.models.service'].isRequired,
  attributes: PropTypes.arrayOf(T['io.apibuilder.generator.v0.models.attribute']).isRequired,
  user_agent: PropTypes.string,
  imported_services: PropTypes.arrayOf(T['io.apibuilder.spec.v0.models.service']),
});

T['io.apibuilder.api.v0.models.original'] = PropTypes.exact({
  type: T['io.apibuilder.api.v0.enums.original_type'].isRequired,
  data: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.session'] = PropTypes.exact({
  id: PropTypes.string.isRequired,
  expires_at: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.attribute_summary'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
});

T['io.apibuilder.common.v0.models.reference_guid'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
});

T['io.apibuilder.common.v0.models.audit'] = PropTypes.exact({
  created_at: PropTypes.string.isRequired,
  created_by: T['io.apibuilder.common.v0.models.reference_guid'].isRequired,
  updated_at: PropTypes.string.isRequired,
  updated_by: T['io.apibuilder.common.v0.models.reference_guid'].isRequired,
});

T['io.apibuilder.api.v0.models.generator_service'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  uri: PropTypes.string.isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.generator_with_service'] = PropTypes.exact({
  service: T['io.apibuilder.api.v0.models.generator_service'].isRequired,
  generator: T['io.apibuilder.generator.v0.models.generator'].isRequired,
});

T['io.apibuilder.api.v0.models.code'] = PropTypes.exact({
  generator: T['io.apibuilder.api.v0.models.generator_with_service'].isRequired,
  source: PropTypes.string.isRequired,
  files: PropTypes.arrayOf(T['io.apibuilder.generator.v0.models.file']).isRequired,
});

T['io.apibuilder.api.v0.models.user'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  email: PropTypes.string.isRequired,
  nickname: PropTypes.string.isRequired,
  name: PropTypes.string,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.token'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  user: T['io.apibuilder.api.v0.models.user'].isRequired,
  masked_token: PropTypes.string.isRequired,
  description: PropTypes.string,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.authentication'] = PropTypes.exact({
  user: T['io.apibuilder.api.v0.models.user'].isRequired,
  session: T['io.apibuilder.api.v0.models.session'].isRequired,
});

T['io.apibuilder.api.v0.models.attribute_value'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  attribute: T['io.apibuilder.api.v0.models.attribute_summary'].isRequired,
  value: PropTypes.string.isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.attribute'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
  description: PropTypes.string,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.enums.visibility'] = PropTypes.oneOf(['user', 'organization', 'public']);

T['io.apibuilder.api.v0.models.version_form'] = PropTypes.exact({
  original_form: T['io.apibuilder.api.v0.models.original_form'].isRequired,
  visibility: T['io.apibuilder.api.v0.enums.visibility'],
});

T['io.apibuilder.api.v0.models.organization_form'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  key: PropTypes.string,
  namespace: PropTypes.string.isRequired,
  visibility: T['io.apibuilder.api.v0.enums.visibility'].isRequired,
  domains: PropTypes.arrayOf(PropTypes.string),
});

T['io.apibuilder.api.v0.models.organization'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  key: PropTypes.string.isRequired,
  name: PropTypes.string.isRequired,
  namespace: PropTypes.string.isRequired,
  visibility: T['io.apibuilder.api.v0.enums.visibility'].isRequired,
  domains: PropTypes.arrayOf(T['io.apibuilder.api.v0.models.domain']).isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.subscription'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  organization: T['io.apibuilder.api.v0.models.organization'].isRequired,
  user: T['io.apibuilder.api.v0.models.user'].isRequired,
  publication: T['io.apibuilder.api.v0.enums.publication'].isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.membership_request'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  user: T['io.apibuilder.api.v0.models.user'].isRequired,
  organization: T['io.apibuilder.api.v0.models.organization'].isRequired,
  role: PropTypes.string.isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.membership'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  user: T['io.apibuilder.api.v0.models.user'].isRequired,
  organization: T['io.apibuilder.api.v0.models.organization'].isRequired,
  role: PropTypes.string.isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.application_form'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  key: PropTypes.string,
  description: PropTypes.string,
  visibility: T['io.apibuilder.api.v0.enums.visibility'].isRequired,
});

T['io.apibuilder.common.v0.models.reference'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  key: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.change'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  organization: T['io.apibuilder.common.v0.models.reference'].isRequired,
  application: T['io.apibuilder.common.v0.models.reference'].isRequired,
  from_version: T['io.apibuilder.api.v0.models.change_version'].isRequired,
  to_version: T['io.apibuilder.api.v0.models.change_version'].isRequired,
  diff: T['io.apibuilder.api.v0.unions.diff'].isRequired,
  changed_at: PropTypes.string.isRequired,
  changed_by: T['io.apibuilder.api.v0.models.user_summary'].isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.version'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  organization: T['io.apibuilder.common.v0.models.reference'].isRequired,
  application: T['io.apibuilder.common.v0.models.reference'].isRequired,
  version: PropTypes.string.isRequired,
  original: T['io.apibuilder.api.v0.models.original'],
  service: T['io.apibuilder.spec.v0.models.service'].isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.batch_download_applications'] = PropTypes.exact({
  applications: PropTypes.arrayOf(T['io.apibuilder.api.v0.models.version']).isRequired,
});

T['io.apibuilder.api.v0.models.application_summary'] = PropTypes.exact({
  type: PropTypes.oneOf(['application_summary']).isRequired,
  guid: PropTypes.string.isRequired,
  organization: T['io.apibuilder.common.v0.models.reference'].isRequired,
  key: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.unions.item_detail'] = PropTypes.oneOfType([T['io.apibuilder.api.v0.models.application_summary']]);

T['io.apibuilder.api.v0.models.item'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  detail: T['io.apibuilder.api.v0.unions.item_detail'].isRequired,
  label: PropTypes.string.isRequired,
  description: PropTypes.string,
});

T['io.apibuilder.api.v0.models.application'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  organization: T['io.apibuilder.common.v0.models.reference'].isRequired,
  name: PropTypes.string.isRequired,
  key: PropTypes.string.isRequired,
  visibility: T['io.apibuilder.api.v0.enums.visibility'].isRequired,
  description: PropTypes.string,
  last_updated_at: PropTypes.string.isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.models.watch'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  user: T['io.apibuilder.api.v0.models.user'].isRequired,
  organization: T['io.apibuilder.api.v0.models.organization'].isRequired,
  application: T['io.apibuilder.api.v0.models.application'].isRequired,
  audit: T['io.apibuilder.common.v0.models.audit'].isRequired,
});

T['io.apibuilder.api.v0.enums.app_sort_by'] = PropTypes.oneOf(['name', 'created_at', 'updated_at', 'visibility']);
T['io.apibuilder.api.v0.enums.sort_order'] = PropTypes.oneOf(['asc', 'desc']);

T['io.apibuilder.api.v0.models.application_metadata'] = PropTypes.exact({
  guid: PropTypes.string.isRequired,
  key: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.application_metadata_version'] = PropTypes.exact({
  version: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.attribute_form'] = PropTypes.exact({
  name: PropTypes.string.isRequired,
  description: PropTypes.string,
});

T['io.apibuilder.api.v0.models.attribute_value_form'] = PropTypes.exact({
  value: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.cleartext_token'] = PropTypes.exact({
  token: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.email_verification_confirmation_form'] = PropTypes.exact({
  token: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.error'] = PropTypes.exact({
  code: PropTypes.string.isRequired,
  message: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.generator_service_form'] = PropTypes.exact({
  uri: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.move_form'] = PropTypes.exact({
  org_key: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.password_reset'] = PropTypes.exact({
  token: PropTypes.string.isRequired,
  password: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.password_reset_request'] = PropTypes.exact({
  email: PropTypes.string.isRequired,
});

T['io.apibuilder.api.v0.models.token_form'] = PropTypes.exact({
  user_guid: PropTypes.string.isRequired,
  description: PropTypes.string,
});

T['io.apibuilder.api.v0.models.user_form'] = PropTypes.exact({
  email: PropTypes.string.isRequired,
  password: PropTypes.string.isRequired,
  nickname: PropTypes.string,
  name: PropTypes.string,
});

T['io.apibuilder.api.v0.models.user_update_form'] = PropTypes.exact({
  email: PropTypes.string.isRequired,
  nickname: PropTypes.string.isRequired,
  name: PropTypes.string,
});

T['io.apibuilder.api.v0.models.validation'] = PropTypes.exact({
  valid: PropTypes.bool.isRequired,
  errors: PropTypes.arrayOf(PropTypes.string).isRequired,
});

T['io.apibuilder.api.v0.models.watch_form'] = PropTypes.exact({
  user_guid: PropTypes.string.isRequired,
  organization_key: PropTypes.string.isRequired,
  application_key: PropTypes.string.isRequired,
});

T['io.apibuilder.generator.v0.models.healthcheck'] = PropTypes.exact({
  status: PropTypes.string.isRequired,
});

T['io.apibuilder.common.v0.models.healthcheck'] = PropTypes.exact({
  status: PropTypes.string.isRequired,
});

T['io.apibuilder.generator.v0.models.error'] = PropTypes.exact({
  code: PropTypes.string.isRequired,
  message: PropTypes.string.isRequired,
});

export const appSortBy = T['io.apibuilder.api.v0.enums.app_sort_by'];
export const application = T['io.apibuilder.api.v0.models.application'];
export const applicationForm = T['io.apibuilder.api.v0.models.application_form'];
export const applicationMetadata = T['io.apibuilder.api.v0.models.application_metadata'];
export const applicationMetadataVersion = T['io.apibuilder.api.v0.models.application_metadata_version'];
export const applicationSummary = T['io.apibuilder.api.v0.models.application_summary'];
export const attribute = T['io.apibuilder.api.v0.models.attribute'];
export const attributeForm = T['io.apibuilder.api.v0.models.attribute_form'];
export const attributeSummary = T['io.apibuilder.api.v0.models.attribute_summary'];
export const attributeValue = T['io.apibuilder.api.v0.models.attribute_value'];
export const attributeValueForm = T['io.apibuilder.api.v0.models.attribute_value_form'];
export const authentication = T['io.apibuilder.api.v0.models.authentication'];
export const batchDownloadApplicationForm = T['io.apibuilder.api.v0.models.batch_download_application_form'];
export const batchDownloadApplications = T['io.apibuilder.api.v0.models.batch_download_applications'];
export const batchDownloadApplicationsForm = T['io.apibuilder.api.v0.models.batch_download_applications_form'];
export const change = T['io.apibuilder.api.v0.models.change'];
export const changeVersion = T['io.apibuilder.api.v0.models.change_version'];
export const cleartextToken = T['io.apibuilder.api.v0.models.cleartext_token'];
export const code = T['io.apibuilder.api.v0.models.code'];
export const codeForm = T['io.apibuilder.api.v0.models.code_form'];
export const diff = T['io.apibuilder.api.v0.unions.diff'];
export const diffBreaking = T['io.apibuilder.api.v0.models.diff_breaking'];
export const diffNonBreaking = T['io.apibuilder.api.v0.models.diff_non_breaking'];
export const domain = T['io.apibuilder.api.v0.models.domain'];
export const emailVerificationConfirmationForm = T['io.apibuilder.api.v0.models.email_verification_confirmation_form'];
export const error = T['io.apibuilder.api.v0.models.error'];
export const generatorForm = T['io.apibuilder.api.v0.models.generator_form'];
export const generatorService = T['io.apibuilder.api.v0.models.generator_service'];
export const generatorServiceForm = T['io.apibuilder.api.v0.models.generator_service_form'];
export const generatorWithService = T['io.apibuilder.api.v0.models.generator_with_service'];
export const item = T['io.apibuilder.api.v0.models.item'];
export const itemDetail = T['io.apibuilder.api.v0.unions.item_detail'];
export const membership = T['io.apibuilder.api.v0.models.membership'];
export const membershipRequest = T['io.apibuilder.api.v0.models.membership_request'];
export const moveForm = T['io.apibuilder.api.v0.models.move_form'];
export const organization = T['io.apibuilder.api.v0.models.organization'];
export const organizationForm = T['io.apibuilder.api.v0.models.organization_form'];
export const original = T['io.apibuilder.api.v0.models.original'];
export const originalForm = T['io.apibuilder.api.v0.models.original_form'];
export const originalType = T['io.apibuilder.api.v0.enums.original_type'];
export const passwordReset = T['io.apibuilder.api.v0.models.password_reset'];
export const passwordResetRequest = T['io.apibuilder.api.v0.models.password_reset_request'];
export const publication = T['io.apibuilder.api.v0.enums.publication'];
export const session = T['io.apibuilder.api.v0.models.session'];
export const sortOrder = T['io.apibuilder.api.v0.enums.sort_order'];
export const subscription = T['io.apibuilder.api.v0.models.subscription'];
export const subscriptionForm = T['io.apibuilder.api.v0.models.subscription_form'];
export const token = T['io.apibuilder.api.v0.models.token'];
export const tokenForm = T['io.apibuilder.api.v0.models.token_form'];
export const user = T['io.apibuilder.api.v0.models.user'];
export const userForm = T['io.apibuilder.api.v0.models.user_form'];
export const userSummary = T['io.apibuilder.api.v0.models.user_summary'];
export const userUpdateForm = T['io.apibuilder.api.v0.models.user_update_form'];
export const validation = T['io.apibuilder.api.v0.models.validation'];
export const version = T['io.apibuilder.api.v0.models.version'];
export const versionForm = T['io.apibuilder.api.v0.models.version_form'];
export const visibility = T['io.apibuilder.api.v0.enums.visibility'];
export const watch = T['io.apibuilder.api.v0.models.watch'];
export const watchForm = T['io.apibuilder.api.v0.models.watch_form'];"
`;

exports[`POST /invocations/:key ts_constants: io/apibuilder/api/v0/apibuilder-api.ts 1`] = `
"export enum AppSortBy {
  NAME = 'name',
  CREATED_AT = 'created_at',
  UPDATED_AT = 'updated_at',
  VISIBILITY = 'visibility'
}

export enum OriginalType {
  API_JSON = 'api_json',
  AVRO_IDL = 'avro_idl',
  SERVICE_JSON = 'service_json',
  SWAGGER = 'swagger'
}

export enum Publication {
  MEMBERSHIP_REQUESTS_CREATE = 'membership_requests.create',
  MEMBERSHIPS_CREATE = 'memberships.create',
  APPLICATIONS_CREATE = 'applications.create',
  VERSIONS_CREATE = 'versions.create',
  VERSIONS_MATERIAL_CHANGE = 'versions.material_change'
}

export enum SortOrder {
  ASC = 'asc',
  DESC = 'desc'
}

export enum Visibility {
  USER = 'user',
  ORGANIZATION = 'organization',
  PUBLIC = 'public'
}"
`;

exports[`POST /invocations/:key ts_declarations: io/apibuilder/api/v0/apibuilder-api.ts 1`] = `
"declare namespace io.apibuilder.common.v0.models {
  interface Audit {
    readonly 'created_at': string;
    readonly 'created_by': io.apibuilder.common.v0.models.ReferenceGuid;
    readonly 'updated_at': string;
    readonly 'updated_by': io.apibuilder.common.v0.models.ReferenceGuid;
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Reference {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ReferenceGuid {
    readonly 'guid': string;
  }
}

declare namespace io.apibuilder.spec.v0.enums {
  type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'TRACE';
  type ParameterLocation = 'Path' | 'Query' | 'Form' | 'Header';
  type ResponseCodeOption = 'Default';
}

declare namespace io.apibuilder.spec.v0.models {
  interface Annotation {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Apidoc {
    readonly 'version': string;
  }

  interface Application {
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'name': string;
    readonly 'value': any/*object*/;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Body {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Contact {
    readonly 'name'?: string;
    readonly 'url'?: string;
    readonly 'email'?: string;
  }

  interface Deprecation {
    readonly 'description'?: string;
  }

  interface Enum {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'values': io.apibuilder.spec.v0.models.EnumValue[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface EnumValue {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'value'?: string;
  }

  interface Field {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'default'?: string;
    readonly 'required': boolean;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': string[];
  }

  interface Header {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Import {
    readonly 'uri': string;
    readonly 'namespace': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'version': string;
    readonly 'enums': string[];
    readonly 'interfaces': string[];
    readonly 'unions': string[];
    readonly 'models': string[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Info {
    readonly 'license'?: io.apibuilder.spec.v0.models.License;
    readonly 'contact'?: io.apibuilder.spec.v0.models.Contact;
  }

  interface Interface {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface License {
    readonly 'name': string;
    readonly 'url'?: string;
  }

  interface Model {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface Operation {
    readonly 'method': io.apibuilder.spec.v0.enums.Method;
    readonly 'path': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'body'?: io.apibuilder.spec.v0.models.Body;
    readonly 'parameters': io.apibuilder.spec.v0.models.Parameter[];
    readonly 'responses': io.apibuilder.spec.v0.models.Response[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Organization {
    readonly 'key': string;
  }

  interface Parameter {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'location': io.apibuilder.spec.v0.enums.ParameterLocation;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Resource {
    readonly 'type': string;
    readonly 'plural': string;
    readonly 'path'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'operations': io.apibuilder.spec.v0.models.Operation[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Response {
    readonly 'code': io.apibuilder.spec.v0.unions.ResponseCode;
    readonly 'type': string;
    readonly 'headers'?: io.apibuilder.spec.v0.models.Header[];
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Service {
    readonly 'apidoc': io.apibuilder.spec.v0.models.Apidoc;
    readonly 'name': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'namespace': string;
    readonly 'version': string;
    readonly 'base_url'?: string;
    readonly 'description'?: string;
    readonly 'info': io.apibuilder.spec.v0.models.Info;
    readonly 'headers': io.apibuilder.spec.v0.models.Header[];
    readonly 'imports': io.apibuilder.spec.v0.models.Import[];
    readonly 'enums': io.apibuilder.spec.v0.models.Enum[];
    readonly 'interfaces': io.apibuilder.spec.v0.models.Interface[];
    readonly 'unions': io.apibuilder.spec.v0.models.Union[];
    readonly 'models': io.apibuilder.spec.v0.models.Model[];
    readonly 'resources': io.apibuilder.spec.v0.models.Resource[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Union {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'discriminator'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'types': io.apibuilder.spec.v0.models.UnionType[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface UnionType {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'default'?: boolean;
    readonly 'discriminator_value'?: string;
  }
}

declare namespace io.apibuilder.spec.v0.unions {
  type ResponseCode = ({
    discriminator: 'integer',
    value: number
  } | {
    discriminator: 'response_code_option',
    value: io.apibuilder.spec.v0.enums.ResponseCodeOption
  });
}

declare namespace io.apibuilder.generator.v0.enums {
  type FileFlag = 'scaffolding';
}

declare namespace io.apibuilder.generator.v0.models {
  interface Attribute {
    readonly 'name': string;
    readonly 'value': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface File {
    readonly 'name': string;
    readonly 'dir'?: string;
    readonly 'contents': string;
    readonly 'flags'?: io.apibuilder.generator.v0.enums.FileFlag[];
  }

  interface Generator {
    readonly 'key': string;
    readonly 'name': string;
    readonly 'language'?: string;
    readonly 'description'?: string;
    readonly 'attributes': string[];
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Invocation {
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface InvocationForm {
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
    readonly 'user_agent'?: string;
    readonly 'imported_services'?: io.apibuilder.spec.v0.models.Service[];
  }
}

declare namespace io.apibuilder.api.v0.enums {
  type AppSortBy = 'name' | 'created_at' | 'updated_at' | 'visibility';
  type OriginalType = 'api_json' | 'avro_idl' | 'service_json' | 'swagger';
  type Publication = 'membership_requests.create' | 'memberships.create' | 'applications.create' | 'versions.create' | 'versions.material_change';
  type SortOrder = 'asc' | 'desc';
  type Visibility = 'user' | 'organization' | 'public';
}

declare namespace io.apibuilder.api.v0.models {
  interface Application {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'name': string;
    readonly 'key': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'description'?: string;
    readonly 'last_updated_at': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ApplicationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'description'?: string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
  }

  interface ApplicationMetadata {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ApplicationMetadataVersion {
    readonly 'version': string;
  }

  interface ApplicationSummary {
    readonly 'type': 'application_summary';
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'guid': string;
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeForm {
    readonly 'name': string;
    readonly 'description'?: string;
  }

  interface AttributeSummary {
    readonly 'guid': string;
    readonly 'name': string;
  }

  interface AttributeValue {
    readonly 'guid': string;
    readonly 'attribute': io.apibuilder.api.v0.models.AttributeSummary;
    readonly 'value': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeValueForm {
    readonly 'value': string;
  }

  interface Authentication {
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'session': io.apibuilder.api.v0.models.Session;
  }

  interface BatchDownloadApplicationForm {
    readonly 'application_key': string;
    readonly 'version': string;
  }

  interface BatchDownloadApplications {
    readonly 'applications': io.apibuilder.api.v0.models.Version[];
  }

  interface BatchDownloadApplicationsForm {
    readonly 'applications': io.apibuilder.api.v0.models.BatchDownloadApplicationForm[];
  }

  interface Change {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'from_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'to_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'diff': io.apibuilder.api.v0.unions.Diff;
    readonly 'changed_at': string;
    readonly 'changed_by': io.apibuilder.api.v0.models.UserSummary;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ChangeVersion {
    readonly 'guid': string;
    readonly 'version': string;
  }

  interface CleartextToken {
    readonly 'token': string;
  }

  interface Code {
    readonly 'generator': io.apibuilder.api.v0.models.GeneratorWithService;
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface CodeForm {
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
  }

  interface DiffBreaking {
    readonly 'type': 'diff_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface DiffNonBreaking {
    readonly 'type': 'diff_non_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface Domain {
    readonly 'name': string;
  }

  interface EmailVerificationConfirmationForm {
    readonly 'token': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface GeneratorForm {
    readonly 'service_guid': string;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface GeneratorService {
    readonly 'guid': string;
    readonly 'uri': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface GeneratorServiceForm {
    readonly 'uri': string;
  }

  interface GeneratorWithService {
    readonly 'service': io.apibuilder.api.v0.models.GeneratorService;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface Item {
    readonly 'guid': string;
    readonly 'detail': io.apibuilder.api.v0.unions.ItemDetail;
    readonly 'label': string;
    readonly 'description'?: string;
  }

  interface Membership {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MembershipRequest {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MoveForm {
    readonly 'org_key': string;
  }

  interface Organization {
    readonly 'guid': string;
    readonly 'key': string;
    readonly 'name': string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains': io.apibuilder.api.v0.models.Domain[];
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface OrganizationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains'?: string[];
  }

  interface Original {
    readonly 'type': io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface OriginalForm {
    readonly 'type'?: io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface PasswordReset {
    readonly 'token': string;
    readonly 'password': string;
  }

  interface PasswordResetRequest {
    readonly 'email': string;
  }

  interface Session {
    readonly 'id': string;
    readonly 'expires_at': string;
  }

  interface Subscription {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface SubscriptionForm {
    readonly 'organization_key': string;
    readonly 'user_guid': string;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
  }

  interface Token {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'masked_token': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface TokenForm {
    readonly 'user_guid': string;
    readonly 'description'?: string;
  }

  interface User {
    readonly 'guid': string;
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface UserForm {
    readonly 'email': string;
    readonly 'password': string;
    readonly 'nickname'?: string;
    readonly 'name'?: string;
  }

  interface UserSummary {
    readonly 'guid': string;
    readonly 'nickname': string;
  }

  interface UserUpdateForm {
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
  }

  interface Validation {
    readonly 'valid': boolean;
    readonly 'errors': string[];
  }

  interface Version {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'version': string;
    readonly 'original'?: io.apibuilder.api.v0.models.Original;
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface VersionForm {
    readonly 'original_form': io.apibuilder.api.v0.models.OriginalForm;
    readonly 'visibility'?: io.apibuilder.api.v0.enums.Visibility;
  }

  interface Watch {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'application': io.apibuilder.api.v0.models.Application;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface WatchForm {
    readonly 'user_guid': string;
    readonly 'organization_key': string;
    readonly 'application_key': string;
  }
}

declare namespace io.apibuilder.api.v0.unions {
  type Diff = (io.apibuilder.api.v0.models.DiffBreaking | io.apibuilder.api.v0.models.DiffNonBreaking);
  type ItemDetail = (io.apibuilder.api.v0.models.ApplicationSummary);
}

export type AppSortBy = io.apibuilder.api.v0.enums.AppSortBy;
export type Application = io.apibuilder.api.v0.models.Application;
export type ApplicationForm = io.apibuilder.api.v0.models.ApplicationForm;
export type ApplicationMetadata = io.apibuilder.api.v0.models.ApplicationMetadata;
export type ApplicationMetadataVersion = io.apibuilder.api.v0.models.ApplicationMetadataVersion;
export type ApplicationSummary = io.apibuilder.api.v0.models.ApplicationSummary;
export type Attribute = io.apibuilder.api.v0.models.Attribute;
export type AttributeForm = io.apibuilder.api.v0.models.AttributeForm;
export type AttributeSummary = io.apibuilder.api.v0.models.AttributeSummary;
export type AttributeValue = io.apibuilder.api.v0.models.AttributeValue;
export type AttributeValueForm = io.apibuilder.api.v0.models.AttributeValueForm;
export type Authentication = io.apibuilder.api.v0.models.Authentication;
export type BatchDownloadApplicationForm = io.apibuilder.api.v0.models.BatchDownloadApplicationForm;
export type BatchDownloadApplications = io.apibuilder.api.v0.models.BatchDownloadApplications;
export type BatchDownloadApplicationsForm = io.apibuilder.api.v0.models.BatchDownloadApplicationsForm;
export type Change = io.apibuilder.api.v0.models.Change;
export type ChangeVersion = io.apibuilder.api.v0.models.ChangeVersion;
export type CleartextToken = io.apibuilder.api.v0.models.CleartextToken;
export type Code = io.apibuilder.api.v0.models.Code;
export type CodeForm = io.apibuilder.api.v0.models.CodeForm;
export type Diff = io.apibuilder.api.v0.unions.Diff;
export type DiffBreaking = io.apibuilder.api.v0.models.DiffBreaking;
export type DiffNonBreaking = io.apibuilder.api.v0.models.DiffNonBreaking;
export type Domain = io.apibuilder.api.v0.models.Domain;
export type EmailVerificationConfirmationForm = io.apibuilder.api.v0.models.EmailVerificationConfirmationForm;
export type Error = io.apibuilder.api.v0.models.Error;
export type GeneratorForm = io.apibuilder.api.v0.models.GeneratorForm;
export type GeneratorService = io.apibuilder.api.v0.models.GeneratorService;
export type GeneratorServiceForm = io.apibuilder.api.v0.models.GeneratorServiceForm;
export type GeneratorWithService = io.apibuilder.api.v0.models.GeneratorWithService;
export type Item = io.apibuilder.api.v0.models.Item;
export type ItemDetail = io.apibuilder.api.v0.unions.ItemDetail;
export type Membership = io.apibuilder.api.v0.models.Membership;
export type MembershipRequest = io.apibuilder.api.v0.models.MembershipRequest;
export type MoveForm = io.apibuilder.api.v0.models.MoveForm;
export type Organization = io.apibuilder.api.v0.models.Organization;
export type OrganizationForm = io.apibuilder.api.v0.models.OrganizationForm;
export type Original = io.apibuilder.api.v0.models.Original;
export type OriginalForm = io.apibuilder.api.v0.models.OriginalForm;
export type OriginalType = io.apibuilder.api.v0.enums.OriginalType;
export type PasswordReset = io.apibuilder.api.v0.models.PasswordReset;
export type PasswordResetRequest = io.apibuilder.api.v0.models.PasswordResetRequest;
export type Publication = io.apibuilder.api.v0.enums.Publication;
export type Session = io.apibuilder.api.v0.models.Session;
export type SortOrder = io.apibuilder.api.v0.enums.SortOrder;
export type Subscription = io.apibuilder.api.v0.models.Subscription;
export type SubscriptionForm = io.apibuilder.api.v0.models.SubscriptionForm;
export type Token = io.apibuilder.api.v0.models.Token;
export type TokenForm = io.apibuilder.api.v0.models.TokenForm;
export type User = io.apibuilder.api.v0.models.User;
export type UserForm = io.apibuilder.api.v0.models.UserForm;
export type UserSummary = io.apibuilder.api.v0.models.UserSummary;
export type UserUpdateForm = io.apibuilder.api.v0.models.UserUpdateForm;
export type Validation = io.apibuilder.api.v0.models.Validation;
export type Version = io.apibuilder.api.v0.models.Version;
export type VersionForm = io.apibuilder.api.v0.models.VersionForm;
export type Visibility = io.apibuilder.api.v0.enums.Visibility;
export type Watch = io.apibuilder.api.v0.models.Watch;
export type WatchForm = io.apibuilder.api.v0.models.WatchForm;"
`;

exports[`POST /invocations/:key ts_declarations_v2: io.apibuilder.api.v0.apibuilder-api.d.ts 1`] = `
"declare namespace io.apibuilder.api.v0.enums {
  type AppSortBy = 'name' | 'created_at' | 'updated_at' | 'visibility';
  type OriginalType = 'api_json' | 'avro_idl' | 'service_json' | 'swagger';
  type Publication = 'membership_requests.create' | 'memberships.create' | 'applications.create' | 'versions.create' | 'versions.material_change';
  type SortOrder = 'asc' | 'desc';
  type Visibility = 'user' | 'organization' | 'public';
}

declare namespace io.apibuilder.api.v0.models {
  interface Application {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'name': string;
    readonly 'key': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'description'?: string;
    readonly 'last_updated_at': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ApplicationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'description'?: string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
  }

  interface ApplicationMetadata {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ApplicationMetadataVersion {
    readonly 'version': string;
  }

  interface ApplicationSummary {
    readonly 'type': 'application_summary';
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'guid': string;
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeForm {
    readonly 'name': string;
    readonly 'description'?: string;
  }

  interface AttributeSummary {
    readonly 'guid': string;
    readonly 'name': string;
  }

  interface AttributeValue {
    readonly 'guid': string;
    readonly 'attribute': io.apibuilder.api.v0.models.AttributeSummary;
    readonly 'value': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeValueForm {
    readonly 'value': string;
  }

  interface Authentication {
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'session': io.apibuilder.api.v0.models.Session;
  }

  interface BatchDownloadApplicationForm {
    readonly 'application_key': string;
    readonly 'version': string;
  }

  interface BatchDownloadApplications {
    readonly 'applications': io.apibuilder.api.v0.models.Version[];
  }

  interface BatchDownloadApplicationsForm {
    readonly 'applications': io.apibuilder.api.v0.models.BatchDownloadApplicationForm[];
  }

  interface Change {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'from_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'to_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'diff': io.apibuilder.api.v0.unions.Diff;
    readonly 'changed_at': string;
    readonly 'changed_by': io.apibuilder.api.v0.models.UserSummary;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ChangeVersion {
    readonly 'guid': string;
    readonly 'version': string;
  }

  interface CleartextToken {
    readonly 'token': string;
  }

  interface Code {
    readonly 'generator': io.apibuilder.api.v0.models.GeneratorWithService;
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface CodeForm {
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
  }

  interface DiffBreaking {
    readonly 'type': 'diff_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface DiffNonBreaking {
    readonly 'type': 'diff_non_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface Domain {
    readonly 'name': string;
  }

  interface EmailVerificationConfirmationForm {
    readonly 'token': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface GeneratorForm {
    readonly 'service_guid': string;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface GeneratorService {
    readonly 'guid': string;
    readonly 'uri': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface GeneratorServiceForm {
    readonly 'uri': string;
  }

  interface GeneratorWithService {
    readonly 'service': io.apibuilder.api.v0.models.GeneratorService;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface Item {
    readonly 'guid': string;
    readonly 'detail': io.apibuilder.api.v0.unions.ItemDetail;
    readonly 'label': string;
    readonly 'description'?: string;
  }

  interface Membership {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MembershipRequest {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MoveForm {
    readonly 'org_key': string;
  }

  interface Organization {
    readonly 'guid': string;
    readonly 'key': string;
    readonly 'name': string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains': io.apibuilder.api.v0.models.Domain[];
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface OrganizationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains'?: string[];
  }

  interface Original {
    readonly 'type': io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface OriginalForm {
    readonly 'type'?: io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface PasswordReset {
    readonly 'token': string;
    readonly 'password': string;
  }

  interface PasswordResetRequest {
    readonly 'email': string;
  }

  interface Session {
    readonly 'id': string;
    readonly 'expires_at': string;
  }

  interface Subscription {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface SubscriptionForm {
    readonly 'organization_key': string;
    readonly 'user_guid': string;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
  }

  interface Token {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'masked_token': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface TokenForm {
    readonly 'user_guid': string;
    readonly 'description'?: string;
  }

  interface User {
    readonly 'guid': string;
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface UserForm {
    readonly 'email': string;
    readonly 'password': string;
    readonly 'nickname'?: string;
    readonly 'name'?: string;
  }

  interface UserSummary {
    readonly 'guid': string;
    readonly 'nickname': string;
  }

  interface UserUpdateForm {
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
  }

  interface Validation {
    readonly 'valid': boolean;
    readonly 'errors': string[];
  }

  interface Version {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'version': string;
    readonly 'original'?: io.apibuilder.api.v0.models.Original;
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface VersionForm {
    readonly 'original_form': io.apibuilder.api.v0.models.OriginalForm;
    readonly 'visibility'?: io.apibuilder.api.v0.enums.Visibility;
  }

  interface Watch {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'application': io.apibuilder.api.v0.models.Application;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface WatchForm {
    readonly 'user_guid': string;
    readonly 'organization_key': string;
    readonly 'application_key': string;
  }
}

declare namespace io.apibuilder.api.v0.unions {
  type Diff = (io.apibuilder.api.v0.models.DiffBreaking | io.apibuilder.api.v0.models.DiffNonBreaking);
  type ItemDetail = (io.apibuilder.api.v0.models.ApplicationSummary);
}"
`;

exports[`POST /invocations/:key ts_declarations_v2: io.apibuilder.common.v0.apibuilder-common.d.ts 1`] = `
"declare namespace io.apibuilder.common.v0.models {
  interface Audit {
    readonly 'created_at': string;
    readonly 'created_by': io.apibuilder.common.v0.models.ReferenceGuid;
    readonly 'updated_at': string;
    readonly 'updated_by': io.apibuilder.common.v0.models.ReferenceGuid;
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Reference {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ReferenceGuid {
    readonly 'guid': string;
  }
}"
`;

exports[`POST /invocations/:key ts_declarations_v2: io.apibuilder.generator.v0.apibuilder-generator.d.ts 1`] = `
"declare namespace io.apibuilder.generator.v0.enums {
  type FileFlag = 'scaffolding';
}

declare namespace io.apibuilder.generator.v0.models {
  interface Attribute {
    readonly 'name': string;
    readonly 'value': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface File {
    readonly 'name': string;
    readonly 'dir'?: string;
    readonly 'contents': string;
    readonly 'flags'?: io.apibuilder.generator.v0.enums.FileFlag[];
  }

  interface Generator {
    readonly 'key': string;
    readonly 'name': string;
    readonly 'language'?: string;
    readonly 'description'?: string;
    readonly 'attributes': string[];
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Invocation {
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface InvocationForm {
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
    readonly 'user_agent'?: string;
    readonly 'imported_services'?: io.apibuilder.spec.v0.models.Service[];
  }
}"
`;

exports[`POST /invocations/:key ts_declarations_v2: io.apibuilder.spec.v0.apibuilder-spec.d.ts 1`] = `
"declare namespace io.apibuilder.spec.v0.enums {
  type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'TRACE';
  type ParameterLocation = 'Path' | 'Query' | 'Form' | 'Header';
  type ResponseCodeOption = 'Default';
}

declare namespace io.apibuilder.spec.v0.models {
  interface Annotation {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Apidoc {
    readonly 'version': string;
  }

  interface Application {
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'name': string;
    readonly 'value': any/*object*/;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Body {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Contact {
    readonly 'name'?: string;
    readonly 'url'?: string;
    readonly 'email'?: string;
  }

  interface Deprecation {
    readonly 'description'?: string;
  }

  interface Enum {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'values': io.apibuilder.spec.v0.models.EnumValue[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface EnumValue {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'value'?: string;
  }

  interface Field {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'default'?: string;
    readonly 'required': boolean;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': string[];
  }

  interface Header {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Import {
    readonly 'uri': string;
    readonly 'namespace': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'version': string;
    readonly 'enums': string[];
    readonly 'interfaces': string[];
    readonly 'unions': string[];
    readonly 'models': string[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Info {
    readonly 'license'?: io.apibuilder.spec.v0.models.License;
    readonly 'contact'?: io.apibuilder.spec.v0.models.Contact;
  }

  interface Interface {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface License {
    readonly 'name': string;
    readonly 'url'?: string;
  }

  interface Model {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface Operation {
    readonly 'method': io.apibuilder.spec.v0.enums.Method;
    readonly 'path': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'body'?: io.apibuilder.spec.v0.models.Body;
    readonly 'parameters': io.apibuilder.spec.v0.models.Parameter[];
    readonly 'responses': io.apibuilder.spec.v0.models.Response[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Organization {
    readonly 'key': string;
  }

  interface Parameter {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'location': io.apibuilder.spec.v0.enums.ParameterLocation;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Resource {
    readonly 'type': string;
    readonly 'plural': string;
    readonly 'path'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'operations': io.apibuilder.spec.v0.models.Operation[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Response {
    readonly 'code': io.apibuilder.spec.v0.unions.ResponseCode;
    readonly 'type': string;
    readonly 'headers'?: io.apibuilder.spec.v0.models.Header[];
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Service {
    readonly 'apidoc': io.apibuilder.spec.v0.models.Apidoc;
    readonly 'name': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'namespace': string;
    readonly 'version': string;
    readonly 'base_url'?: string;
    readonly 'description'?: string;
    readonly 'info': io.apibuilder.spec.v0.models.Info;
    readonly 'headers': io.apibuilder.spec.v0.models.Header[];
    readonly 'imports': io.apibuilder.spec.v0.models.Import[];
    readonly 'enums': io.apibuilder.spec.v0.models.Enum[];
    readonly 'interfaces': io.apibuilder.spec.v0.models.Interface[];
    readonly 'unions': io.apibuilder.spec.v0.models.Union[];
    readonly 'models': io.apibuilder.spec.v0.models.Model[];
    readonly 'resources': io.apibuilder.spec.v0.models.Resource[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Union {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'discriminator'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'types': io.apibuilder.spec.v0.models.UnionType[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface UnionType {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'default'?: boolean;
    readonly 'discriminator_value'?: string;
  }
}

declare namespace io.apibuilder.spec.v0.unions {
  type ResponseCode = ({
    discriminator: 'integer',
    value: number
  } | {
    discriminator: 'response_code_option',
    value: io.apibuilder.spec.v0.enums.ResponseCodeOption
  });
}"
`;

exports[`POST /invocations/:key ts_mocks: apibuilder-api.ts 1`] = `
"import faker from '@faker-js/faker';

const arrayOf = <T>(f: () => T) => {
  const length = 3;

  return Array.from({
    length,
  }, f);
};

const objectOf = <T>(f: () => T) => {
  const keys = ['foo', 'bar', 'qux'];

  return keys.reduce<Record<string, T>>((object, key) => {
    object[key] = f();
    return object;
  }, {});
};

const factories = {
  boolean: () => faker.datatype.boolean(),
  date_iso_8601: () => faker.datatype.datetime().toISOString().slice(0, 10),
  date_time_iso_8601: () => faker.datatype.datetime().toISOString(),
  decimal: () => faker.datatype.float(),
  double: () => faker.datatype.float(),
  integer: () => faker.datatype.number(),
  json: () => faker.datatype.json(),
  long: () => faker.datatype.number(),
  object: () => faker.datatype.json(),
  string: () => faker.datatype.string(),
  unit: () => undefined,
  uuid: () => faker.datatype.uuid(),
  'io.apibuilder.api.v0.enums.app_sort_by': (): io.apibuilder.api.v0.enums.AppSortBy => faker.helpers.arrayElement(['name', 'created_at', 'updated_at', 'visibility']),
  'io.apibuilder.api.v0.enums.original_type': (): io.apibuilder.api.v0.enums.OriginalType => faker.helpers.arrayElement(['api_json', 'avro_idl', 'service_json', 'swagger']),

  'io.apibuilder.api.v0.enums.publication': (): io.apibuilder.api.v0.enums.Publication => faker.helpers.arrayElement([
    'membership_requests.create',
    'memberships.create',
    'applications.create',
    'versions.create',
    'versions.material_change',
  ]),

  'io.apibuilder.api.v0.enums.sort_order': (): io.apibuilder.api.v0.enums.SortOrder => faker.helpers.arrayElement(['asc', 'desc']),
  'io.apibuilder.api.v0.enums.visibility': (): io.apibuilder.api.v0.enums.Visibility => faker.helpers.arrayElement(['user', 'organization', 'public']),

  'io.apibuilder.api.v0.models.application': (): io.apibuilder.api.v0.models.Application => ({
    guid: factories.uuid(),
    organization: factories['io.apibuilder.common.v0.models.reference'](),
    name: factories.string(),
    key: factories.string(),
    visibility: factories['io.apibuilder.api.v0.enums.visibility'](),
    description: factories.string(),
    last_updated_at: factories.date_time_iso_8601(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.application_form': (): io.apibuilder.api.v0.models.ApplicationForm => ({
    name: factories.string(),
    key: factories.string(),
    description: factories.string(),
    visibility: factories['io.apibuilder.api.v0.enums.visibility'](),
  }),

  'io.apibuilder.api.v0.models.application_metadata': (): io.apibuilder.api.v0.models.ApplicationMetadata => ({
    guid: factories.uuid(),
    key: factories.string(),
  }),

  'io.apibuilder.api.v0.models.application_metadata_version': (): io.apibuilder.api.v0.models.ApplicationMetadataVersion => ({
    version: factories.string(),
  }),

  'io.apibuilder.api.v0.models.application_summary': (): io.apibuilder.api.v0.models.ApplicationSummary => ({
    type: 'application_summary',
    guid: factories.uuid(),
    organization: factories['io.apibuilder.common.v0.models.reference'](),
    key: factories.string(),
  }),

  'io.apibuilder.api.v0.models.attribute': (): io.apibuilder.api.v0.models.Attribute => ({
    guid: factories.uuid(),
    name: factories.string(),
    description: factories.string(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.attribute_form': (): io.apibuilder.api.v0.models.AttributeForm => ({
    name: factories.string(),
    description: factories.string(),
  }),

  'io.apibuilder.api.v0.models.attribute_summary': (): io.apibuilder.api.v0.models.AttributeSummary => ({
    guid: factories.uuid(),
    name: factories.string(),
  }),

  'io.apibuilder.api.v0.models.attribute_value': (): io.apibuilder.api.v0.models.AttributeValue => ({
    guid: factories.uuid(),
    attribute: factories['io.apibuilder.api.v0.models.attribute_summary'](),
    value: factories.string(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.attribute_value_form': (): io.apibuilder.api.v0.models.AttributeValueForm => ({
    value: factories.string(),
  }),

  'io.apibuilder.api.v0.models.authentication': (): io.apibuilder.api.v0.models.Authentication => ({
    user: factories['io.apibuilder.api.v0.models.user'](),
    session: factories['io.apibuilder.api.v0.models.session'](),
  }),

  'io.apibuilder.api.v0.models.batch_download_application_form': (): io.apibuilder.api.v0.models.BatchDownloadApplicationForm => ({
    application_key: factories.string(),
    version: factories.string(),
  }),

  'io.apibuilder.api.v0.models.batch_download_applications': (): io.apibuilder.api.v0.models.BatchDownloadApplications => ({
    applications: arrayOf(() => factories['io.apibuilder.api.v0.models.version']()),
  }),

  'io.apibuilder.api.v0.models.batch_download_applications_form': (): io.apibuilder.api.v0.models.BatchDownloadApplicationsForm => ({
    applications: arrayOf(
      () => factories['io.apibuilder.api.v0.models.batch_download_application_form'](),
    ),
  }),

  'io.apibuilder.api.v0.models.change': (): io.apibuilder.api.v0.models.Change => ({
    guid: factories.uuid(),
    organization: factories['io.apibuilder.common.v0.models.reference'](),
    application: factories['io.apibuilder.common.v0.models.reference'](),
    from_version: factories['io.apibuilder.api.v0.models.change_version'](),
    to_version: factories['io.apibuilder.api.v0.models.change_version'](),
    diff: factories['io.apibuilder.api.v0.unions.diff'](),
    changed_at: factories.date_time_iso_8601(),
    changed_by: factories['io.apibuilder.api.v0.models.user_summary'](),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.change_version': (): io.apibuilder.api.v0.models.ChangeVersion => ({
    guid: factories.uuid(),
    version: factories.string(),
  }),

  'io.apibuilder.api.v0.models.cleartext_token': (): io.apibuilder.api.v0.models.CleartextToken => ({
    token: factories.string(),
  }),

  'io.apibuilder.api.v0.models.code': (): io.apibuilder.api.v0.models.Code => ({
    generator: factories['io.apibuilder.api.v0.models.generator_with_service'](),
    source: factories.string(),
    files: arrayOf(() => factories['io.apibuilder.generator.v0.models.file']()),
  }),

  'io.apibuilder.api.v0.models.code_form': (): io.apibuilder.api.v0.models.CodeForm => ({
    attributes: arrayOf(() => factories['io.apibuilder.generator.v0.models.attribute']()),
  }),

  'io.apibuilder.api.v0.models.diff_breaking': (): io.apibuilder.api.v0.models.DiffBreaking => ({
    type: 'diff_breaking',
    description: factories.string(),
    is_material: factories.boolean(),
  }),

  'io.apibuilder.api.v0.models.diff_non_breaking': (): io.apibuilder.api.v0.models.DiffNonBreaking => ({
    type: 'diff_non_breaking',
    description: factories.string(),
    is_material: factories.boolean(),
  }),

  'io.apibuilder.api.v0.models.domain': (): io.apibuilder.api.v0.models.Domain => ({
    name: factories.string(),
  }),

  'io.apibuilder.api.v0.models.email_verification_confirmation_form': (): io.apibuilder.api.v0.models.EmailVerificationConfirmationForm => ({
    token: factories.string(),
  }),

  'io.apibuilder.api.v0.models.error': (): io.apibuilder.api.v0.models.Error => ({
    code: factories.string(),
    message: factories.string(),
  }),

  'io.apibuilder.api.v0.models.generator_form': (): io.apibuilder.api.v0.models.GeneratorForm => ({
    service_guid: factories.uuid(),
    generator: factories['io.apibuilder.generator.v0.models.generator'](),
  }),

  'io.apibuilder.api.v0.models.generator_service': (): io.apibuilder.api.v0.models.GeneratorService => ({
    guid: factories.uuid(),
    uri: factories.string(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.generator_service_form': (): io.apibuilder.api.v0.models.GeneratorServiceForm => ({
    uri: factories.string(),
  }),

  'io.apibuilder.api.v0.models.generator_with_service': (): io.apibuilder.api.v0.models.GeneratorWithService => ({
    service: factories['io.apibuilder.api.v0.models.generator_service'](),
    generator: factories['io.apibuilder.generator.v0.models.generator'](),
  }),

  'io.apibuilder.api.v0.models.item': (): io.apibuilder.api.v0.models.Item => ({
    guid: factories.uuid(),
    detail: factories['io.apibuilder.api.v0.unions.item_detail'](),
    label: factories.string(),
    description: factories.string(),
  }),

  'io.apibuilder.api.v0.models.membership': (): io.apibuilder.api.v0.models.Membership => ({
    guid: factories.uuid(),
    user: factories['io.apibuilder.api.v0.models.user'](),
    organization: factories['io.apibuilder.api.v0.models.organization'](),
    role: factories.string(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.membership_request': (): io.apibuilder.api.v0.models.MembershipRequest => ({
    guid: factories.uuid(),
    user: factories['io.apibuilder.api.v0.models.user'](),
    organization: factories['io.apibuilder.api.v0.models.organization'](),
    role: factories.string(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.move_form': (): io.apibuilder.api.v0.models.MoveForm => ({
    org_key: factories.string(),
  }),

  'io.apibuilder.api.v0.models.organization': (): io.apibuilder.api.v0.models.Organization => ({
    guid: factories.uuid(),
    key: factories.string(),
    name: factories.string(),
    namespace: factories.string(),
    visibility: factories['io.apibuilder.api.v0.enums.visibility'](),
    domains: arrayOf(() => factories['io.apibuilder.api.v0.models.domain']()),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.organization_form': (): io.apibuilder.api.v0.models.OrganizationForm => ({
    name: factories.string(),
    key: factories.string(),
    namespace: factories.string(),
    visibility: factories['io.apibuilder.api.v0.enums.visibility'](),
    domains: arrayOf(() => factories.string()),
  }),

  'io.apibuilder.api.v0.models.original': (): io.apibuilder.api.v0.models.Original => ({
    type: factories['io.apibuilder.api.v0.enums.original_type'](),
    data: factories.string(),
  }),

  'io.apibuilder.api.v0.models.original_form': (): io.apibuilder.api.v0.models.OriginalForm => ({
    type: factories['io.apibuilder.api.v0.enums.original_type'](),
    data: factories.string(),
  }),

  'io.apibuilder.api.v0.models.password_reset': (): io.apibuilder.api.v0.models.PasswordReset => ({
    token: factories.string(),
    password: factories.string(),
  }),

  'io.apibuilder.api.v0.models.password_reset_request': (): io.apibuilder.api.v0.models.PasswordResetRequest => ({
    email: factories.string(),
  }),

  'io.apibuilder.api.v0.models.session': (): io.apibuilder.api.v0.models.Session => ({
    id: factories.string(),
    expires_at: factories.date_time_iso_8601(),
  }),

  'io.apibuilder.api.v0.models.subscription': (): io.apibuilder.api.v0.models.Subscription => ({
    guid: factories.uuid(),
    organization: factories['io.apibuilder.api.v0.models.organization'](),
    user: factories['io.apibuilder.api.v0.models.user'](),
    publication: factories['io.apibuilder.api.v0.enums.publication'](),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.subscription_form': (): io.apibuilder.api.v0.models.SubscriptionForm => ({
    organization_key: factories.string(),
    user_guid: factories.uuid(),
    publication: factories['io.apibuilder.api.v0.enums.publication'](),
  }),

  'io.apibuilder.api.v0.models.token': (): io.apibuilder.api.v0.models.Token => ({
    guid: factories.uuid(),
    user: factories['io.apibuilder.api.v0.models.user'](),
    masked_token: factories.string(),
    description: factories.string(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.token_form': (): io.apibuilder.api.v0.models.TokenForm => ({
    user_guid: factories.uuid(),
    description: factories.string(),
  }),

  'io.apibuilder.api.v0.models.user': (): io.apibuilder.api.v0.models.User => ({
    guid: factories.uuid(),
    email: factories.string(),
    nickname: factories.string(),
    name: factories.string(),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.user_form': (): io.apibuilder.api.v0.models.UserForm => ({
    email: factories.string(),
    password: factories.string(),
    nickname: factories.string(),
    name: factories.string(),
  }),

  'io.apibuilder.api.v0.models.user_summary': (): io.apibuilder.api.v0.models.UserSummary => ({
    guid: factories.uuid(),
    nickname: factories.string(),
  }),

  'io.apibuilder.api.v0.models.user_update_form': (): io.apibuilder.api.v0.models.UserUpdateForm => ({
    email: factories.string(),
    nickname: factories.string(),
    name: factories.string(),
  }),

  'io.apibuilder.api.v0.models.validation': (): io.apibuilder.api.v0.models.Validation => ({
    valid: factories.boolean(),
    errors: arrayOf(() => factories.string()),
  }),

  'io.apibuilder.api.v0.models.version': (): io.apibuilder.api.v0.models.Version => ({
    guid: factories.uuid(),
    organization: factories['io.apibuilder.common.v0.models.reference'](),
    application: factories['io.apibuilder.common.v0.models.reference'](),
    version: factories.string(),
    original: factories['io.apibuilder.api.v0.models.original'](),
    service: factories['io.apibuilder.spec.v0.models.service'](),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.version_form': (): io.apibuilder.api.v0.models.VersionForm => ({
    original_form: factories['io.apibuilder.api.v0.models.original_form'](),
    visibility: factories['io.apibuilder.api.v0.enums.visibility'](),
  }),

  'io.apibuilder.api.v0.models.watch': (): io.apibuilder.api.v0.models.Watch => ({
    guid: factories.uuid(),
    user: factories['io.apibuilder.api.v0.models.user'](),
    organization: factories['io.apibuilder.api.v0.models.organization'](),
    application: factories['io.apibuilder.api.v0.models.application'](),
    audit: factories['io.apibuilder.common.v0.models.audit'](),
  }),

  'io.apibuilder.api.v0.models.watch_form': (): io.apibuilder.api.v0.models.WatchForm => ({
    user_guid: factories.uuid(),
    organization_key: factories.string(),
    application_key: factories.string(),
  }),

  'io.apibuilder.api.v0.unions.diff': (): io.apibuilder.api.v0.unions.Diff => {
    const f = faker.helpers.arrayElement([
      () => factories['io.apibuilder.api.v0.models.diff_breaking'](),
      () => factories['io.apibuilder.api.v0.models.diff_non_breaking'](),
    ]);

    return f();
  },

  'io.apibuilder.api.v0.unions.item_detail': (): io.apibuilder.api.v0.unions.ItemDetail => {
    const f = faker.helpers.arrayElement([() => factories['io.apibuilder.api.v0.models.application_summary']()]);
    return f();
  },

  'io.apibuilder.common.v0.models.audit': (): io.apibuilder.common.v0.models.Audit => ({
    created_at: factories.date_time_iso_8601(),
    created_by: factories['io.apibuilder.common.v0.models.reference_guid'](),
    updated_at: factories.date_time_iso_8601(),
    updated_by: factories['io.apibuilder.common.v0.models.reference_guid'](),
  }),

  'io.apibuilder.common.v0.models.healthcheck': (): io.apibuilder.common.v0.models.Healthcheck => ({
    status: factories.string(),
  }),

  'io.apibuilder.common.v0.models.reference': (): io.apibuilder.common.v0.models.Reference => ({
    guid: factories.uuid(),
    key: factories.string(),
  }),

  'io.apibuilder.common.v0.models.reference_guid': (): io.apibuilder.common.v0.models.ReferenceGuid => ({
    guid: factories.uuid(),
  }),

  'io.apibuilder.generator.v0.enums.file_flag': (): io.apibuilder.generator.v0.enums.FileFlag => faker.helpers.arrayElement(['scaffolding']),

  'io.apibuilder.generator.v0.models.attribute': (): io.apibuilder.generator.v0.models.Attribute => ({
    name: factories.string(),
    value: factories.string(),
  }),

  'io.apibuilder.generator.v0.models.error': (): io.apibuilder.generator.v0.models.Error => ({
    code: factories.string(),
    message: factories.string(),
  }),

  'io.apibuilder.generator.v0.models.file': (): io.apibuilder.generator.v0.models.File => ({
    name: factories.string(),
    dir: factories.string(),
    contents: factories.string(),
    flags: arrayOf(() => factories['io.apibuilder.generator.v0.enums.file_flag']()),
  }),

  'io.apibuilder.generator.v0.models.generator': (): io.apibuilder.generator.v0.models.Generator => ({
    key: factories.string(),
    name: factories.string(),
    language: factories.string(),
    description: factories.string(),
    attributes: arrayOf(() => factories.string()),
  }),

  'io.apibuilder.generator.v0.models.healthcheck': (): io.apibuilder.generator.v0.models.Healthcheck => ({
    status: factories.string(),
  }),

  'io.apibuilder.generator.v0.models.invocation': (): io.apibuilder.generator.v0.models.Invocation => ({
    source: factories.string(),
    files: arrayOf(() => factories['io.apibuilder.generator.v0.models.file']()),
  }),

  'io.apibuilder.generator.v0.models.invocation_form': (): io.apibuilder.generator.v0.models.InvocationForm => ({
    service: factories['io.apibuilder.spec.v0.models.service'](),
    attributes: arrayOf(() => factories['io.apibuilder.generator.v0.models.attribute']()),
    user_agent: factories.string(),
    imported_services: arrayOf(() => factories['io.apibuilder.spec.v0.models.service']()),
  }),

  'io.apibuilder.spec.v0.enums.method': (): io.apibuilder.spec.v0.enums.Method => faker.helpers.arrayElement([
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'HEAD',
    'CONNECT',
    'OPTIONS',
    'TRACE',
  ]),

  'io.apibuilder.spec.v0.enums.parameter_location': (): io.apibuilder.spec.v0.enums.ParameterLocation => faker.helpers.arrayElement(['Path', 'Query', 'Form', 'Header']),
  'io.apibuilder.spec.v0.enums.response_code_option': (): io.apibuilder.spec.v0.enums.ResponseCodeOption => faker.helpers.arrayElement(['Default']),

  'io.apibuilder.spec.v0.models.annotation': (): io.apibuilder.spec.v0.models.Annotation => ({
    name: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
  }),

  'io.apibuilder.spec.v0.models.apidoc': (): io.apibuilder.spec.v0.models.Apidoc => ({
    version: factories.string(),
  }),

  'io.apibuilder.spec.v0.models.application': (): io.apibuilder.spec.v0.models.Application => ({
    key: factories.string(),
  }),

  'io.apibuilder.spec.v0.models.attribute': (): io.apibuilder.spec.v0.models.Attribute => ({
    name: factories.string(),
    value: factories.object(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
  }),

  'io.apibuilder.spec.v0.models.body': (): io.apibuilder.spec.v0.models.Body => ({
    type: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.contact': (): io.apibuilder.spec.v0.models.Contact => ({
    name: factories.string(),
    url: factories.string(),
    email: factories.string(),
  }),

  'io.apibuilder.spec.v0.models.deprecation': (): io.apibuilder.spec.v0.models.Deprecation => ({
    description: factories.string(),
  }),

  'io.apibuilder.spec.v0.models.enum': (): io.apibuilder.spec.v0.models.Enum => ({
    name: factories.string(),
    plural: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    values: arrayOf(() => factories['io.apibuilder.spec.v0.models.enum_value']()),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.enum_value': (): io.apibuilder.spec.v0.models.EnumValue => ({
    name: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
    value: factories.string(),
  }),

  'io.apibuilder.spec.v0.models.field': (): io.apibuilder.spec.v0.models.Field => ({
    name: factories.string(),
    type: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    'default': factories.string(),
    required: factories.boolean(),
    minimum: factories.long(),
    maximum: factories.long(),
    example: factories.string(),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
    annotations: arrayOf(() => factories.string()),
  }),

  'io.apibuilder.spec.v0.models.header': (): io.apibuilder.spec.v0.models.Header => ({
    name: factories.string(),
    type: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    required: factories.boolean(),
    'default': factories.string(),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.import': (): io.apibuilder.spec.v0.models.Import => ({
    uri: factories.string(),
    namespace: factories.string(),
    organization: factories['io.apibuilder.spec.v0.models.organization'](),
    application: factories['io.apibuilder.spec.v0.models.application'](),
    version: factories.string(),
    enums: arrayOf(() => factories.string()),
    interfaces: arrayOf(() => factories.string()),
    unions: arrayOf(() => factories.string()),
    models: arrayOf(() => factories.string()),
    annotations: arrayOf(() => factories['io.apibuilder.spec.v0.models.annotation']()),
  }),

  'io.apibuilder.spec.v0.models.info': (): io.apibuilder.spec.v0.models.Info => ({
    license: factories['io.apibuilder.spec.v0.models.license'](),
    contact: factories['io.apibuilder.spec.v0.models.contact'](),
  }),

  'io.apibuilder.spec.v0.models.interface': (): io.apibuilder.spec.v0.models.Interface => ({
    name: factories.string(),
    plural: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    fields: arrayOf(() => factories['io.apibuilder.spec.v0.models.field']()),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.license': (): io.apibuilder.spec.v0.models.License => ({
    name: factories.string(),
    url: factories.string(),
  }),

  'io.apibuilder.spec.v0.models.model': (): io.apibuilder.spec.v0.models.Model => ({
    name: factories.string(),
    plural: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    fields: arrayOf(() => factories['io.apibuilder.spec.v0.models.field']()),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
    interfaces: arrayOf(() => factories.string()),
  }),

  'io.apibuilder.spec.v0.models.operation': (): io.apibuilder.spec.v0.models.Operation => ({
    method: factories['io.apibuilder.spec.v0.enums.method'](),
    path: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    body: factories['io.apibuilder.spec.v0.models.body'](),
    parameters: arrayOf(() => factories['io.apibuilder.spec.v0.models.parameter']()),
    responses: arrayOf(() => factories['io.apibuilder.spec.v0.models.response']()),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.organization': (): io.apibuilder.spec.v0.models.Organization => ({
    key: factories.string(),
  }),

  'io.apibuilder.spec.v0.models.parameter': (): io.apibuilder.spec.v0.models.Parameter => ({
    name: factories.string(),
    type: factories.string(),
    location: factories['io.apibuilder.spec.v0.enums.parameter_location'](),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    required: factories.boolean(),
    'default': factories.string(),
    minimum: factories.long(),
    maximum: factories.long(),
    example: factories.string(),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.resource': (): io.apibuilder.spec.v0.models.Resource => ({
    type: factories.string(),
    plural: factories.string(),
    path: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    operations: arrayOf(() => factories['io.apibuilder.spec.v0.models.operation']()),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.response': (): io.apibuilder.spec.v0.models.Response => ({
    code: factories['io.apibuilder.spec.v0.unions.response_code'](),
    type: factories.string(),
    headers: arrayOf(() => factories['io.apibuilder.spec.v0.models.header']()),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
  }),

  'io.apibuilder.spec.v0.models.service': (): io.apibuilder.spec.v0.models.Service => ({
    apidoc: factories['io.apibuilder.spec.v0.models.apidoc'](),
    name: factories.string(),
    organization: factories['io.apibuilder.spec.v0.models.organization'](),
    application: factories['io.apibuilder.spec.v0.models.application'](),
    namespace: factories.string(),
    version: factories.string(),
    base_url: factories.string(),
    description: factories.string(),
    info: factories['io.apibuilder.spec.v0.models.info'](),
    headers: arrayOf(() => factories['io.apibuilder.spec.v0.models.header']()),
    imports: arrayOf(() => factories['io.apibuilder.spec.v0.models.import']()),
    enums: arrayOf(() => factories['io.apibuilder.spec.v0.models.enum']()),
    interfaces: arrayOf(() => factories['io.apibuilder.spec.v0.models.interface']()),
    unions: arrayOf(() => factories['io.apibuilder.spec.v0.models.union']()),
    models: arrayOf(() => factories['io.apibuilder.spec.v0.models.model']()),
    resources: arrayOf(() => factories['io.apibuilder.spec.v0.models.resource']()),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
    annotations: arrayOf(() => factories['io.apibuilder.spec.v0.models.annotation']()),
  }),

  'io.apibuilder.spec.v0.models.union': (): io.apibuilder.spec.v0.models.Union => ({
    name: factories.string(),
    plural: factories.string(),
    discriminator: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    types: arrayOf(() => factories['io.apibuilder.spec.v0.models.union_type']()),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
    interfaces: arrayOf(() => factories.string()),
  }),

  'io.apibuilder.spec.v0.models.union_type': (): io.apibuilder.spec.v0.models.UnionType => ({
    type: factories.string(),
    description: factories.string(),
    deprecation: factories['io.apibuilder.spec.v0.models.deprecation'](),
    attributes: arrayOf(() => factories['io.apibuilder.spec.v0.models.attribute']()),
    'default': factories.boolean(),
    discriminator_value: factories.string(),
  }),

  'io.apibuilder.spec.v0.unions.response_code': (): io.apibuilder.spec.v0.unions.ResponseCode => {
    const f = faker.helpers.arrayElement([() => ({
      discriminator: 'integer' as const,
      value: factories.integer(),
    }), () => ({
      discriminator: 'response_code_option' as const,
      value: factories['io.apibuilder.spec.v0.enums.response_code_option'](),
    })]);

    return f();
  },
};

export const makeAppSortBy = () => factories['io.apibuilder.api.v0.enums.app_sort_by']();
export const makeApplication = () => factories['io.apibuilder.api.v0.models.application']();
export const makeApplicationForm = () => factories['io.apibuilder.api.v0.models.application_form']();
export const makeApplicationMetadata = () => factories['io.apibuilder.api.v0.models.application_metadata']();
export const makeApplicationMetadataVersion = () => factories['io.apibuilder.api.v0.models.application_metadata_version']();
export const makeApplicationSummary = () => factories['io.apibuilder.api.v0.models.application_summary']();
export const makeAttribute = () => factories['io.apibuilder.api.v0.models.attribute']();
export const makeAttributeForm = () => factories['io.apibuilder.api.v0.models.attribute_form']();
export const makeAttributeSummary = () => factories['io.apibuilder.api.v0.models.attribute_summary']();
export const makeAttributeValue = () => factories['io.apibuilder.api.v0.models.attribute_value']();
export const makeAttributeValueForm = () => factories['io.apibuilder.api.v0.models.attribute_value_form']();
export const makeAuthentication = () => factories['io.apibuilder.api.v0.models.authentication']();
export const makeBatchDownloadApplicationForm = () => factories['io.apibuilder.api.v0.models.batch_download_application_form']();
export const makeBatchDownloadApplications = () => factories['io.apibuilder.api.v0.models.batch_download_applications']();
export const makeBatchDownloadApplicationsForm = () => factories['io.apibuilder.api.v0.models.batch_download_applications_form']();
export const makeChange = () => factories['io.apibuilder.api.v0.models.change']();
export const makeChangeVersion = () => factories['io.apibuilder.api.v0.models.change_version']();
export const makeCleartextToken = () => factories['io.apibuilder.api.v0.models.cleartext_token']();
export const makeCode = () => factories['io.apibuilder.api.v0.models.code']();
export const makeCodeForm = () => factories['io.apibuilder.api.v0.models.code_form']();
export const makeDiff = () => factories['io.apibuilder.api.v0.unions.diff']();
export const makeDiffBreaking = () => factories['io.apibuilder.api.v0.models.diff_breaking']();
export const makeDiffNonBreaking = () => factories['io.apibuilder.api.v0.models.diff_non_breaking']();
export const makeDomain = () => factories['io.apibuilder.api.v0.models.domain']();
export const makeEmailVerificationConfirmationForm = () => factories['io.apibuilder.api.v0.models.email_verification_confirmation_form']();
export const makeError = () => factories['io.apibuilder.api.v0.models.error']();
export const makeGeneratorForm = () => factories['io.apibuilder.api.v0.models.generator_form']();
export const makeGeneratorService = () => factories['io.apibuilder.api.v0.models.generator_service']();
export const makeGeneratorServiceForm = () => factories['io.apibuilder.api.v0.models.generator_service_form']();
export const makeGeneratorWithService = () => factories['io.apibuilder.api.v0.models.generator_with_service']();
export const makeItem = () => factories['io.apibuilder.api.v0.models.item']();
export const makeItemDetail = () => factories['io.apibuilder.api.v0.unions.item_detail']();
export const makeMembership = () => factories['io.apibuilder.api.v0.models.membership']();
export const makeMembershipRequest = () => factories['io.apibuilder.api.v0.models.membership_request']();
export const makeMoveForm = () => factories['io.apibuilder.api.v0.models.move_form']();
export const makeOrganization = () => factories['io.apibuilder.api.v0.models.organization']();
export const makeOrganizationForm = () => factories['io.apibuilder.api.v0.models.organization_form']();
export const makeOriginal = () => factories['io.apibuilder.api.v0.models.original']();
export const makeOriginalForm = () => factories['io.apibuilder.api.v0.models.original_form']();
export const makeOriginalType = () => factories['io.apibuilder.api.v0.enums.original_type']();
export const makePasswordReset = () => factories['io.apibuilder.api.v0.models.password_reset']();
export const makePasswordResetRequest = () => factories['io.apibuilder.api.v0.models.password_reset_request']();
export const makePublication = () => factories['io.apibuilder.api.v0.enums.publication']();
export const makeSession = () => factories['io.apibuilder.api.v0.models.session']();
export const makeSortOrder = () => factories['io.apibuilder.api.v0.enums.sort_order']();
export const makeSubscription = () => factories['io.apibuilder.api.v0.models.subscription']();
export const makeSubscriptionForm = () => factories['io.apibuilder.api.v0.models.subscription_form']();
export const makeToken = () => factories['io.apibuilder.api.v0.models.token']();
export const makeTokenForm = () => factories['io.apibuilder.api.v0.models.token_form']();
export const makeUser = () => factories['io.apibuilder.api.v0.models.user']();
export const makeUserForm = () => factories['io.apibuilder.api.v0.models.user_form']();
export const makeUserSummary = () => factories['io.apibuilder.api.v0.models.user_summary']();
export const makeUserUpdateForm = () => factories['io.apibuilder.api.v0.models.user_update_form']();
export const makeValidation = () => factories['io.apibuilder.api.v0.models.validation']();
export const makeVersion = () => factories['io.apibuilder.api.v0.models.version']();
export const makeVersionForm = () => factories['io.apibuilder.api.v0.models.version_form']();
export const makeVisibility = () => factories['io.apibuilder.api.v0.enums.visibility']();
export const makeWatch = () => factories['io.apibuilder.api.v0.models.watch']();
export const makeWatchForm = () => factories['io.apibuilder.api.v0.models.watch_form']();"
`;

exports[`POST /invocations/:key ts_prop_types: io/apibuilder/api/v0/apibuilder-api.ts 1`] = `
"import propTypes from 'prop-types';

namespace io.apibuilder.api.v0.models {
  export const diffNonBreaking = propTypes.exact({
    description: propTypes.string.isRequired,
    is_material: propTypes.bool.isRequired,
  });

  export const diffBreaking = propTypes.exact({
    description: propTypes.string.isRequired,
    is_material: propTypes.bool.isRequired,
  });
}

namespace io.apibuilder.api.v0.enums {
  export const publication = propTypes.oneOf([
    'membership_requests.create',
    'memberships.create',
    'applications.create',
    'versions.create',
    'versions.material_change',
  ]);
}

namespace io.apibuilder.api.v0.models {
  export const subscriptionForm = propTypes.exact({
    organization_key: propTypes.string.isRequired,
    user_guid: propTypes.string.isRequired,
    publication: io.apibuilder.api.v0.enums.publication.isRequired,
  });
}

namespace io.apibuilder.api.v0.enums {
  export const originalType = propTypes.oneOf(['api_json', 'avro_idl', 'service_json', 'swagger']);
}

namespace io.apibuilder.api.v0.models {
  export const originalForm = propTypes.exact({
    type: io.apibuilder.api.v0.enums.originalType,
    data: propTypes.string.isRequired,
  });

  export const original = propTypes.exact({
    type: io.apibuilder.api.v0.enums.originalType.isRequired,
    data: propTypes.string.isRequired,
  });

  export const domain = propTypes.exact({
    name: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.generator.v0.models {
  export const generator = propTypes.exact({
    key: propTypes.string.isRequired,
    name: propTypes.string.isRequired,
    language: propTypes.string,
    description: propTypes.string,
    attributes: propTypes.arrayOf(propTypes.string).isRequired,
  });
}

namespace io.apibuilder.api.v0.models {
  export const generatorForm = propTypes.exact({
    service_guid: propTypes.string.isRequired,
    generator: io.apibuilder.generator.v0.models.generator.isRequired,
  });

  export const userSummary = propTypes.exact({
    guid: propTypes.string.isRequired,
    nickname: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.api.v0.unions {
  export const diff = propTypes.oneOfType([propTypes.exact({
    type: propTypes.oneOf(['diff_breaking' as 'diff_breaking']).isRequired,
    description: propTypes.string.isRequired,
    is_material: propTypes.bool.isRequired,
  }), propTypes.exact({
    type: propTypes.oneOf(['diff_non_breaking' as 'diff_non_breaking']).isRequired,
    description: propTypes.string.isRequired,
    is_material: propTypes.bool.isRequired,
  })]);
}

namespace io.apibuilder.api.v0.models {
  export const changeVersion = propTypes.exact({
    guid: propTypes.string.isRequired,
    version: propTypes.string.isRequired,
  });

  export const batchDownloadApplicationForm = propTypes.exact({
    application_key: propTypes.string.isRequired,
    version: propTypes.string.isRequired,
  });

  export const batchDownloadApplicationsForm = propTypes.exact({
    applications: propTypes.arrayOf(io.apibuilder.api.v0.models.batchDownloadApplicationForm).isRequired,
  });

  export const session = propTypes.exact({
    id: propTypes.string.isRequired,
    expires_at: propTypes.string.isRequired,
  });

  export const attributeSummary = propTypes.exact({
    guid: propTypes.string.isRequired,
    name: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.api.v0.enums {
  export const visibility = propTypes.oneOf(['user', 'organization', 'public']);
}

namespace io.apibuilder.api.v0.models {
  export const versionForm = propTypes.exact({
    original_form: io.apibuilder.api.v0.models.originalForm.isRequired,
    visibility: io.apibuilder.api.v0.enums.visibility,
  });

  export const organizationForm = propTypes.exact({
    name: propTypes.string.isRequired,
    key: propTypes.string,
    namespace: propTypes.string.isRequired,
    visibility: io.apibuilder.api.v0.enums.visibility.isRequired,
    domains: propTypes.arrayOf(propTypes.string),
  });

  export const applicationForm = propTypes.exact({
    name: propTypes.string.isRequired,
    key: propTypes.string,
    description: propTypes.string,
    visibility: io.apibuilder.api.v0.enums.visibility.isRequired,
  });
}

namespace io.apibuilder.common.v0.models {
  export const reference = propTypes.exact({
    guid: propTypes.string.isRequired,
    key: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.api.v0.models {
  export const applicationSummary = propTypes.exact({
    guid: propTypes.string.isRequired,
    organization: io.apibuilder.common.v0.models.reference.isRequired,
    key: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.api.v0.unions {
  export const itemDetail = propTypes.oneOfType([propTypes.exact({
    type: propTypes.oneOf(['application_summary' as 'application_summary']).isRequired,
    guid: propTypes.string.isRequired,
    organization: io.apibuilder.common.v0.models.reference.isRequired,
    key: propTypes.string.isRequired,
  })]);
}

namespace io.apibuilder.api.v0.models {
  export const item = propTypes.exact({
    guid: propTypes.string.isRequired,
    detail: io.apibuilder.api.v0.unions.itemDetail.isRequired,
    label: propTypes.string.isRequired,
    description: propTypes.string,
  });
}

namespace io.apibuilder.generator.v0.models {
  export const attribute = propTypes.exact({
    name: propTypes.string.isRequired,
    value: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.api.v0.models {
  export const codeForm = propTypes.exact({
    attributes: propTypes.arrayOf(io.apibuilder.generator.v0.models.attribute).isRequired,
  });
}

namespace io.apibuilder.generator.v0.enums {
  export const fileFlag = propTypes.oneOf(['scaffolding']);
}

namespace io.apibuilder.generator.v0.models {
  export const file = propTypes.exact({
    name: propTypes.string.isRequired,
    dir: propTypes.string,
    contents: propTypes.string.isRequired,
    flags: propTypes.arrayOf(io.apibuilder.generator.v0.enums.fileFlag),
  });

  export const invocation = propTypes.exact({
    source: propTypes.string.isRequired,
    files: propTypes.arrayOf(io.apibuilder.generator.v0.models.file).isRequired,
  });
}

namespace io.apibuilder.spec.v0.enums {
  export const responseCodeOption = propTypes.oneOf(['Default']);
}

namespace io.apibuilder.spec.v0.models {
  export const apidoc = propTypes.exact({
    version: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.spec.v0.unions {
  export const responseCode = propTypes.oneOfType([propTypes.exact({
    discriminator: propTypes.oneOf(['integer' as 'integer']).isRequired,
    value: propTypes.number,
  }), propTypes.exact({
    discriminator: propTypes.oneOf(['response_code_option' as 'response_code_option']).isRequired,
    value: propTypes.oneOf(['Default']),
  })]);
}

namespace io.apibuilder.spec.v0.enums {
  export const parameterLocation = propTypes.oneOf(['Path', 'Query', 'Form', 'Header']);

  export const method = propTypes.oneOf([
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'HEAD',
    'CONNECT',
    'OPTIONS',
    'TRACE',
  ]);
}

namespace io.apibuilder.spec.v0.models {
  export const contact = propTypes.exact({
    name: propTypes.string,
    url: propTypes.string,
    email: propTypes.string,
  });

  export const license = propTypes.exact({
    name: propTypes.string.isRequired,
    url: propTypes.string,
  });

  export const info = propTypes.exact({
    license: io.apibuilder.spec.v0.models.license,
    contact: io.apibuilder.spec.v0.models.contact,
  });

  export const application = propTypes.exact({
    key: propTypes.string.isRequired,
  });

  export const organization = propTypes.exact({
    key: propTypes.string.isRequired,
  });

  export const deprecation = propTypes.exact({
    description: propTypes.string,
  });

  export const attribute = propTypes.exact({
    name: propTypes.string.isRequired,
    value: propTypes.object.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
  });

  export const unionType = propTypes.exact({
    type: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
    'default': propTypes.bool,
    discriminator_value: propTypes.string,
  });

  export const union = propTypes.exact({
    name: propTypes.string.isRequired,
    plural: propTypes.string.isRequired,
    discriminator: propTypes.string,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    types: propTypes.arrayOf(io.apibuilder.spec.v0.models.unionType).isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
    interfaces: propTypes.arrayOf(propTypes.string).isRequired,
  });

  export const parameter = propTypes.exact({
    name: propTypes.string.isRequired,
    type: propTypes.string.isRequired,
    location: io.apibuilder.spec.v0.enums.parameterLocation.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    required: propTypes.bool.isRequired,
    'default': propTypes.string,
    minimum: propTypes.number,
    maximum: propTypes.number,
    example: propTypes.string,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute),
  });

  export const header = propTypes.exact({
    name: propTypes.string.isRequired,
    type: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    required: propTypes.bool.isRequired,
    'default': propTypes.string,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
  });

  export const response = propTypes.exact({
    code: io.apibuilder.spec.v0.unions.responseCode.isRequired,
    type: propTypes.string.isRequired,
    headers: propTypes.arrayOf(io.apibuilder.spec.v0.models.header),
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute),
  });

  export const field = propTypes.exact({
    name: propTypes.string.isRequired,
    type: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    'default': propTypes.string,
    required: propTypes.bool.isRequired,
    minimum: propTypes.number,
    maximum: propTypes.number,
    example: propTypes.string,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
    annotations: propTypes.arrayOf(propTypes.string).isRequired,
  });

  export const model = propTypes.exact({
    name: propTypes.string.isRequired,
    plural: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    fields: propTypes.arrayOf(io.apibuilder.spec.v0.models.field).isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
    interfaces: propTypes.arrayOf(propTypes.string).isRequired,
  });

  export const UNSAFE_interface = propTypes.exact({
    name: propTypes.string.isRequired,
    plural: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    fields: propTypes.arrayOf(io.apibuilder.spec.v0.models.field).isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
  });

  export const enumValue = propTypes.exact({
    name: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
    value: propTypes.string,
  });

  export const UNSAFE_enum = propTypes.exact({
    name: propTypes.string.isRequired,
    plural: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    values: propTypes.arrayOf(io.apibuilder.spec.v0.models.enumValue).isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
  });

  export const body = propTypes.exact({
    type: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
  });

  export const operation = propTypes.exact({
    method: io.apibuilder.spec.v0.enums.method.isRequired,
    path: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    body: io.apibuilder.spec.v0.models.body,
    parameters: propTypes.arrayOf(io.apibuilder.spec.v0.models.parameter).isRequired,
    responses: propTypes.arrayOf(io.apibuilder.spec.v0.models.response).isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
  });

  export const resource = propTypes.exact({
    type: propTypes.string.isRequired,
    plural: propTypes.string.isRequired,
    path: propTypes.string,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
    operations: propTypes.arrayOf(io.apibuilder.spec.v0.models.operation).isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
  });

  export const annotation = propTypes.exact({
    name: propTypes.string.isRequired,
    description: propTypes.string,
    deprecation: io.apibuilder.spec.v0.models.deprecation,
  });

  export const UNSAFE_import = propTypes.exact({
    uri: propTypes.string.isRequired,
    namespace: propTypes.string.isRequired,
    organization: io.apibuilder.spec.v0.models.organization.isRequired,
    application: io.apibuilder.spec.v0.models.application.isRequired,
    version: propTypes.string.isRequired,
    enums: propTypes.arrayOf(propTypes.string).isRequired,
    interfaces: propTypes.arrayOf(propTypes.string).isRequired,
    unions: propTypes.arrayOf(propTypes.string).isRequired,
    models: propTypes.arrayOf(propTypes.string).isRequired,
    annotations: propTypes.arrayOf(io.apibuilder.spec.v0.models.annotation).isRequired,
  });

  export const service = propTypes.exact({
    apidoc: io.apibuilder.spec.v0.models.apidoc.isRequired,
    name: propTypes.string.isRequired,
    organization: io.apibuilder.spec.v0.models.organization.isRequired,
    application: io.apibuilder.spec.v0.models.application.isRequired,
    namespace: propTypes.string.isRequired,
    version: propTypes.string.isRequired,
    base_url: propTypes.string,
    description: propTypes.string,
    info: io.apibuilder.spec.v0.models.info.isRequired,
    headers: propTypes.arrayOf(io.apibuilder.spec.v0.models.header).isRequired,
    imports: propTypes.arrayOf(io.apibuilder.spec.v0.models.UNSAFE_import).isRequired,
    enums: propTypes.arrayOf(io.apibuilder.spec.v0.models.UNSAFE_enum).isRequired,
    interfaces: propTypes.arrayOf(io.apibuilder.spec.v0.models.UNSAFE_interface).isRequired,
    unions: propTypes.arrayOf(io.apibuilder.spec.v0.models.union).isRequired,
    models: propTypes.arrayOf(io.apibuilder.spec.v0.models.model).isRequired,
    resources: propTypes.arrayOf(io.apibuilder.spec.v0.models.resource).isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.spec.v0.models.attribute).isRequired,
    annotations: propTypes.arrayOf(io.apibuilder.spec.v0.models.annotation).isRequired,
  });
}

namespace io.apibuilder.generator.v0.models {
  export const invocationForm = propTypes.exact({
    service: io.apibuilder.spec.v0.models.service.isRequired,
    attributes: propTypes.arrayOf(io.apibuilder.generator.v0.models.attribute).isRequired,
    user_agent: propTypes.string,
    imported_services: propTypes.arrayOf(io.apibuilder.spec.v0.models.service),
  });
}

namespace io.apibuilder.common.v0.models {
  export const referenceGuid = propTypes.exact({
    guid: propTypes.string.isRequired,
  });

  export const audit = propTypes.exact({
    created_at: propTypes.string.isRequired,
    created_by: io.apibuilder.common.v0.models.referenceGuid.isRequired,
    updated_at: propTypes.string.isRequired,
    updated_by: io.apibuilder.common.v0.models.referenceGuid.isRequired,
  });
}

namespace io.apibuilder.api.v0.models {
  export const version = propTypes.exact({
    guid: propTypes.string.isRequired,
    organization: io.apibuilder.common.v0.models.reference.isRequired,
    application: io.apibuilder.common.v0.models.reference.isRequired,
    version: propTypes.string.isRequired,
    original: io.apibuilder.api.v0.models.original,
    service: io.apibuilder.spec.v0.models.service.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const batchDownloadApplications = propTypes.exact({
    applications: propTypes.arrayOf(io.apibuilder.api.v0.models.version).isRequired,
  });

  export const user = propTypes.exact({
    guid: propTypes.string.isRequired,
    email: propTypes.string.isRequired,
    nickname: propTypes.string.isRequired,
    name: propTypes.string,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const authentication = propTypes.exact({
    user: io.apibuilder.api.v0.models.user.isRequired,
    session: io.apibuilder.api.v0.models.session.isRequired,
  });

  export const token = propTypes.exact({
    guid: propTypes.string.isRequired,
    user: io.apibuilder.api.v0.models.user.isRequired,
    masked_token: propTypes.string.isRequired,
    description: propTypes.string,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const organization = propTypes.exact({
    guid: propTypes.string.isRequired,
    key: propTypes.string.isRequired,
    name: propTypes.string.isRequired,
    namespace: propTypes.string.isRequired,
    visibility: io.apibuilder.api.v0.enums.visibility.isRequired,
    domains: propTypes.arrayOf(io.apibuilder.api.v0.models.domain).isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const subscription = propTypes.exact({
    guid: propTypes.string.isRequired,
    organization: io.apibuilder.api.v0.models.organization.isRequired,
    user: io.apibuilder.api.v0.models.user.isRequired,
    publication: io.apibuilder.api.v0.enums.publication.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const membershipRequest = propTypes.exact({
    guid: propTypes.string.isRequired,
    user: io.apibuilder.api.v0.models.user.isRequired,
    organization: io.apibuilder.api.v0.models.organization.isRequired,
    role: propTypes.string.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const membership = propTypes.exact({
    guid: propTypes.string.isRequired,
    user: io.apibuilder.api.v0.models.user.isRequired,
    organization: io.apibuilder.api.v0.models.organization.isRequired,
    role: propTypes.string.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const generatorService = propTypes.exact({
    guid: propTypes.string.isRequired,
    uri: propTypes.string.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const generatorWithService = propTypes.exact({
    service: io.apibuilder.api.v0.models.generatorService.isRequired,
    generator: io.apibuilder.generator.v0.models.generator.isRequired,
  });

  export const code = propTypes.exact({
    generator: io.apibuilder.api.v0.models.generatorWithService.isRequired,
    source: propTypes.string.isRequired,
    files: propTypes.arrayOf(io.apibuilder.generator.v0.models.file).isRequired,
  });

  export const change = propTypes.exact({
    guid: propTypes.string.isRequired,
    organization: io.apibuilder.common.v0.models.reference.isRequired,
    application: io.apibuilder.common.v0.models.reference.isRequired,
    from_version: io.apibuilder.api.v0.models.changeVersion.isRequired,
    to_version: io.apibuilder.api.v0.models.changeVersion.isRequired,
    diff: io.apibuilder.api.v0.unions.diff.isRequired,
    changed_at: propTypes.string.isRequired,
    changed_by: io.apibuilder.api.v0.models.userSummary.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const attributeValue = propTypes.exact({
    guid: propTypes.string.isRequired,
    attribute: io.apibuilder.api.v0.models.attributeSummary.isRequired,
    value: propTypes.string.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const attribute = propTypes.exact({
    guid: propTypes.string.isRequired,
    name: propTypes.string.isRequired,
    description: propTypes.string,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const application = propTypes.exact({
    guid: propTypes.string.isRequired,
    organization: io.apibuilder.common.v0.models.reference.isRequired,
    name: propTypes.string.isRequired,
    key: propTypes.string.isRequired,
    visibility: io.apibuilder.api.v0.enums.visibility.isRequired,
    description: propTypes.string,
    last_updated_at: propTypes.string.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });

  export const watch = propTypes.exact({
    guid: propTypes.string.isRequired,
    user: io.apibuilder.api.v0.models.user.isRequired,
    organization: io.apibuilder.api.v0.models.organization.isRequired,
    application: io.apibuilder.api.v0.models.application.isRequired,
    audit: io.apibuilder.common.v0.models.audit.isRequired,
  });
}

namespace io.apibuilder.common.v0.models {
  export const healthcheck = propTypes.exact({
    status: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.generator.v0.models {
  export const error = propTypes.exact({
    code: propTypes.string.isRequired,
    message: propTypes.string.isRequired,
  });

  export const healthcheck = propTypes.exact({
    status: propTypes.string.isRequired,
  });
}

namespace io.apibuilder.api.v0.enums {
  export const appSortBy = propTypes.oneOf(['name', 'created_at', 'updated_at', 'visibility']);
  export const sortOrder = propTypes.oneOf(['asc', 'desc']);
}

namespace io.apibuilder.api.v0.models {
  export const applicationMetadata = propTypes.exact({
    guid: propTypes.string.isRequired,
    key: propTypes.string.isRequired,
  });

  export const applicationMetadataVersion = propTypes.exact({
    version: propTypes.string.isRequired,
  });

  export const attributeForm = propTypes.exact({
    name: propTypes.string.isRequired,
    description: propTypes.string,
  });

  export const attributeValueForm = propTypes.exact({
    value: propTypes.string.isRequired,
  });

  export const cleartextToken = propTypes.exact({
    token: propTypes.string.isRequired,
  });

  export const emailVerificationConfirmationForm = propTypes.exact({
    token: propTypes.string.isRequired,
  });

  export const error = propTypes.exact({
    code: propTypes.string.isRequired,
    message: propTypes.string.isRequired,
  });

  export const generatorServiceForm = propTypes.exact({
    uri: propTypes.string.isRequired,
  });

  export const moveForm = propTypes.exact({
    org_key: propTypes.string.isRequired,
  });

  export const passwordReset = propTypes.exact({
    token: propTypes.string.isRequired,
    password: propTypes.string.isRequired,
  });

  export const passwordResetRequest = propTypes.exact({
    email: propTypes.string.isRequired,
  });

  export const tokenForm = propTypes.exact({
    user_guid: propTypes.string.isRequired,
    description: propTypes.string,
  });

  export const userForm = propTypes.exact({
    email: propTypes.string.isRequired,
    password: propTypes.string.isRequired,
    nickname: propTypes.string,
    name: propTypes.string,
  });

  export const userUpdateForm = propTypes.exact({
    email: propTypes.string.isRequired,
    nickname: propTypes.string.isRequired,
    name: propTypes.string,
  });

  export const validation = propTypes.exact({
    valid: propTypes.bool.isRequired,
    errors: propTypes.arrayOf(propTypes.string).isRequired,
  });

  export const watchForm = propTypes.exact({
    user_guid: propTypes.string.isRequired,
    organization_key: propTypes.string.isRequired,
    application_key: propTypes.string.isRequired,
  });
}

export const appSortBy = io.apibuilder.api.v0.enums.appSortBy;
export const application = io.apibuilder.api.v0.models.application;
export const applicationForm = io.apibuilder.api.v0.models.applicationForm;
export const applicationMetadata = io.apibuilder.api.v0.models.applicationMetadata;
export const applicationMetadataVersion = io.apibuilder.api.v0.models.applicationMetadataVersion;
export const applicationSummary = io.apibuilder.api.v0.models.applicationSummary;
export const attribute = io.apibuilder.api.v0.models.attribute;
export const attributeForm = io.apibuilder.api.v0.models.attributeForm;
export const attributeSummary = io.apibuilder.api.v0.models.attributeSummary;
export const attributeValue = io.apibuilder.api.v0.models.attributeValue;
export const attributeValueForm = io.apibuilder.api.v0.models.attributeValueForm;
export const authentication = io.apibuilder.api.v0.models.authentication;
export const batchDownloadApplicationForm = io.apibuilder.api.v0.models.batchDownloadApplicationForm;
export const batchDownloadApplications = io.apibuilder.api.v0.models.batchDownloadApplications;
export const batchDownloadApplicationsForm = io.apibuilder.api.v0.models.batchDownloadApplicationsForm;
export const change = io.apibuilder.api.v0.models.change;
export const changeVersion = io.apibuilder.api.v0.models.changeVersion;
export const cleartextToken = io.apibuilder.api.v0.models.cleartextToken;
export const code = io.apibuilder.api.v0.models.code;
export const codeForm = io.apibuilder.api.v0.models.codeForm;
export const diff = io.apibuilder.api.v0.unions.diff;
export const diffBreaking = io.apibuilder.api.v0.models.diffBreaking;
export const diffNonBreaking = io.apibuilder.api.v0.models.diffNonBreaking;
export const domain = io.apibuilder.api.v0.models.domain;
export const emailVerificationConfirmationForm = io.apibuilder.api.v0.models.emailVerificationConfirmationForm;
export const error = io.apibuilder.api.v0.models.error;
export const generatorForm = io.apibuilder.api.v0.models.generatorForm;
export const generatorService = io.apibuilder.api.v0.models.generatorService;
export const generatorServiceForm = io.apibuilder.api.v0.models.generatorServiceForm;
export const generatorWithService = io.apibuilder.api.v0.models.generatorWithService;
export const item = io.apibuilder.api.v0.models.item;
export const itemDetail = io.apibuilder.api.v0.unions.itemDetail;
export const membership = io.apibuilder.api.v0.models.membership;
export const membershipRequest = io.apibuilder.api.v0.models.membershipRequest;
export const moveForm = io.apibuilder.api.v0.models.moveForm;
export const organization = io.apibuilder.api.v0.models.organization;
export const organizationForm = io.apibuilder.api.v0.models.organizationForm;
export const original = io.apibuilder.api.v0.models.original;
export const originalForm = io.apibuilder.api.v0.models.originalForm;
export const originalType = io.apibuilder.api.v0.enums.originalType;
export const passwordReset = io.apibuilder.api.v0.models.passwordReset;
export const passwordResetRequest = io.apibuilder.api.v0.models.passwordResetRequest;
export const publication = io.apibuilder.api.v0.enums.publication;
export const session = io.apibuilder.api.v0.models.session;
export const sortOrder = io.apibuilder.api.v0.enums.sortOrder;
export const subscription = io.apibuilder.api.v0.models.subscription;
export const subscriptionForm = io.apibuilder.api.v0.models.subscriptionForm;
export const token = io.apibuilder.api.v0.models.token;
export const tokenForm = io.apibuilder.api.v0.models.tokenForm;
export const user = io.apibuilder.api.v0.models.user;
export const userForm = io.apibuilder.api.v0.models.userForm;
export const userSummary = io.apibuilder.api.v0.models.userSummary;
export const userUpdateForm = io.apibuilder.api.v0.models.userUpdateForm;
export const validation = io.apibuilder.api.v0.models.validation;
export const version = io.apibuilder.api.v0.models.version;
export const versionForm = io.apibuilder.api.v0.models.versionForm;
export const visibility = io.apibuilder.api.v0.enums.visibility;
export const watch = io.apibuilder.api.v0.models.watch;
export const watchForm = io.apibuilder.api.v0.models.watchForm;"
`;

exports[`POST /invocations/:key ts_sdk: io/apibuilder/api/v0/apibuilder-api.ts 1`] = `
"/*tslint:disable interface-name object-shorthand-properties-first no-namespace max-classes-per-file max-line-length trailing-comma*/
import * as url from 'url';

declare namespace io.apibuilder.common.v0.models {
  interface Audit {
    readonly 'created_at': string;
    readonly 'created_by': io.apibuilder.common.v0.models.ReferenceGuid;
    readonly 'updated_at': string;
    readonly 'updated_by': io.apibuilder.common.v0.models.ReferenceGuid;
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Reference {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ReferenceGuid {
    readonly 'guid': string;
  }
}

declare namespace io.apibuilder.spec.v0.enums {
  type Method = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'TRACE';
  type ParameterLocation = 'Path' | 'Query' | 'Form' | 'Header';
  type ResponseCodeOption = 'Default';
}

declare namespace io.apibuilder.spec.v0.models {
  interface Annotation {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Apidoc {
    readonly 'version': string;
  }

  interface Application {
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'name': string;
    readonly 'value': any/*object*/;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
  }

  interface Body {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Contact {
    readonly 'name'?: string;
    readonly 'url'?: string;
    readonly 'email'?: string;
  }

  interface Deprecation {
    readonly 'description'?: string;
  }

  interface Enum {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'values': io.apibuilder.spec.v0.models.EnumValue[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface EnumValue {
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'value'?: string;
  }

  interface Field {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'default'?: string;
    readonly 'required': boolean;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': string[];
  }

  interface Header {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Import {
    readonly 'uri': string;
    readonly 'namespace': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'version': string;
    readonly 'enums': string[];
    readonly 'interfaces': string[];
    readonly 'unions': string[];
    readonly 'models': string[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Info {
    readonly 'license'?: io.apibuilder.spec.v0.models.License;
    readonly 'contact'?: io.apibuilder.spec.v0.models.Contact;
  }

  interface Interface {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface License {
    readonly 'name': string;
    readonly 'url'?: string;
  }

  interface Model {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'fields': io.apibuilder.spec.v0.models.Field[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface Operation {
    readonly 'method': io.apibuilder.spec.v0.enums.Method;
    readonly 'path': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'body'?: io.apibuilder.spec.v0.models.Body;
    readonly 'parameters': io.apibuilder.spec.v0.models.Parameter[];
    readonly 'responses': io.apibuilder.spec.v0.models.Response[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Organization {
    readonly 'key': string;
  }

  interface Parameter {
    readonly 'name': string;
    readonly 'type': string;
    readonly 'location': io.apibuilder.spec.v0.enums.ParameterLocation;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'required': boolean;
    readonly 'default'?: string;
    readonly 'minimum'?: number;
    readonly 'maximum'?: number;
    readonly 'example'?: string;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Resource {
    readonly 'type': string;
    readonly 'plural': string;
    readonly 'path'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'operations': io.apibuilder.spec.v0.models.Operation[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Response {
    readonly 'code': io.apibuilder.spec.v0.unions.ResponseCode;
    readonly 'type': string;
    readonly 'headers'?: io.apibuilder.spec.v0.models.Header[];
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes'?: io.apibuilder.spec.v0.models.Attribute[];
  }

  interface Service {
    readonly 'apidoc': io.apibuilder.spec.v0.models.Apidoc;
    readonly 'name': string;
    readonly 'organization': io.apibuilder.spec.v0.models.Organization;
    readonly 'application': io.apibuilder.spec.v0.models.Application;
    readonly 'namespace': string;
    readonly 'version': string;
    readonly 'base_url'?: string;
    readonly 'description'?: string;
    readonly 'info': io.apibuilder.spec.v0.models.Info;
    readonly 'headers': io.apibuilder.spec.v0.models.Header[];
    readonly 'imports': io.apibuilder.spec.v0.models.Import[];
    readonly 'enums': io.apibuilder.spec.v0.models.Enum[];
    readonly 'interfaces': io.apibuilder.spec.v0.models.Interface[];
    readonly 'unions': io.apibuilder.spec.v0.models.Union[];
    readonly 'models': io.apibuilder.spec.v0.models.Model[];
    readonly 'resources': io.apibuilder.spec.v0.models.Resource[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'annotations': io.apibuilder.spec.v0.models.Annotation[];
  }

  interface Union {
    readonly 'name': string;
    readonly 'plural': string;
    readonly 'discriminator'?: string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'types': io.apibuilder.spec.v0.models.UnionType[];
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'interfaces': string[];
  }

  interface UnionType {
    readonly 'type': string;
    readonly 'description'?: string;
    readonly 'deprecation'?: io.apibuilder.spec.v0.models.Deprecation;
    readonly 'attributes': io.apibuilder.spec.v0.models.Attribute[];
    readonly 'default'?: boolean;
    readonly 'discriminator_value'?: string;
  }
}

declare namespace io.apibuilder.spec.v0.unions {
  type ResponseCode = ({
    discriminator: 'integer',
    value: number
  } | {
    discriminator: 'response_code_option',
    value: io.apibuilder.spec.v0.enums.ResponseCodeOption
  });
}

declare namespace io.apibuilder.generator.v0.enums {
  type FileFlag = 'scaffolding';
}

declare namespace io.apibuilder.generator.v0.models {
  interface Attribute {
    readonly 'name': string;
    readonly 'value': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface File {
    readonly 'name': string;
    readonly 'dir'?: string;
    readonly 'contents': string;
    readonly 'flags'?: io.apibuilder.generator.v0.enums.FileFlag[];
  }

  interface Generator {
    readonly 'key': string;
    readonly 'name': string;
    readonly 'language'?: string;
    readonly 'description'?: string;
    readonly 'attributes': string[];
  }

  interface Healthcheck {
    readonly 'status': string;
  }

  interface Invocation {
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface InvocationForm {
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
    readonly 'user_agent'?: string;
    readonly 'imported_services'?: io.apibuilder.spec.v0.models.Service[];
  }
}

declare namespace io.apibuilder.api.v0.enums {
  type AppSortBy = 'name' | 'created_at' | 'updated_at' | 'visibility';
  type OriginalType = 'api_json' | 'avro_idl' | 'service_json' | 'swagger';
  type Publication = 'membership_requests.create' | 'memberships.create' | 'applications.create' | 'versions.create' | 'versions.material_change';
  type SortOrder = 'asc' | 'desc';
  type Visibility = 'user' | 'organization' | 'public';
}

declare namespace io.apibuilder.api.v0.models {
  interface Application {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'name': string;
    readonly 'key': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'description'?: string;
    readonly 'last_updated_at': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ApplicationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'description'?: string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
  }

  interface ApplicationMetadata {
    readonly 'guid': string;
    readonly 'key': string;
  }

  interface ApplicationMetadataVersion {
    readonly 'version': string;
  }

  interface ApplicationSummary {
    readonly 'type': 'application_summary';
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'key': string;
  }

  interface Attribute {
    readonly 'guid': string;
    readonly 'name': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeForm {
    readonly 'name': string;
    readonly 'description'?: string;
  }

  interface AttributeSummary {
    readonly 'guid': string;
    readonly 'name': string;
  }

  interface AttributeValue {
    readonly 'guid': string;
    readonly 'attribute': io.apibuilder.api.v0.models.AttributeSummary;
    readonly 'value': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface AttributeValueForm {
    readonly 'value': string;
  }

  interface Authentication {
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'session': io.apibuilder.api.v0.models.Session;
  }

  interface BatchDownloadApplicationForm {
    readonly 'application_key': string;
    readonly 'version': string;
  }

  interface BatchDownloadApplications {
    readonly 'applications': io.apibuilder.api.v0.models.Version[];
  }

  interface BatchDownloadApplicationsForm {
    readonly 'applications': io.apibuilder.api.v0.models.BatchDownloadApplicationForm[];
  }

  interface Change {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'from_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'to_version': io.apibuilder.api.v0.models.ChangeVersion;
    readonly 'diff': io.apibuilder.api.v0.unions.Diff;
    readonly 'changed_at': string;
    readonly 'changed_by': io.apibuilder.api.v0.models.UserSummary;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface ChangeVersion {
    readonly 'guid': string;
    readonly 'version': string;
  }

  interface CleartextToken {
    readonly 'token': string;
  }

  interface Code {
    readonly 'generator': io.apibuilder.api.v0.models.GeneratorWithService;
    readonly 'source': string;
    readonly 'files': io.apibuilder.generator.v0.models.File[];
  }

  interface CodeForm {
    readonly 'attributes': io.apibuilder.generator.v0.models.Attribute[];
  }

  interface DiffBreaking {
    readonly 'type': 'diff_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface DiffNonBreaking {
    readonly 'type': 'diff_non_breaking';
    readonly 'description': string;
    readonly 'is_material': boolean;
  }

  interface Domain {
    readonly 'name': string;
  }

  interface EmailVerificationConfirmationForm {
    readonly 'token': string;
  }

  interface Error {
    readonly 'code': string;
    readonly 'message': string;
  }

  interface GeneratorForm {
    readonly 'service_guid': string;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface GeneratorService {
    readonly 'guid': string;
    readonly 'uri': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface GeneratorServiceForm {
    readonly 'uri': string;
  }

  interface GeneratorWithService {
    readonly 'service': io.apibuilder.api.v0.models.GeneratorService;
    readonly 'generator': io.apibuilder.generator.v0.models.Generator;
  }

  interface Item {
    readonly 'guid': string;
    readonly 'detail': io.apibuilder.api.v0.unions.ItemDetail;
    readonly 'label': string;
    readonly 'description'?: string;
  }

  interface Membership {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MembershipRequest {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'role': string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface MoveForm {
    readonly 'org_key': string;
  }

  interface Organization {
    readonly 'guid': string;
    readonly 'key': string;
    readonly 'name': string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains': io.apibuilder.api.v0.models.Domain[];
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface OrganizationForm {
    readonly 'name': string;
    readonly 'key'?: string;
    readonly 'namespace': string;
    readonly 'visibility': io.apibuilder.api.v0.enums.Visibility;
    readonly 'domains'?: string[];
  }

  interface Original {
    readonly 'type': io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface OriginalForm {
    readonly 'type'?: io.apibuilder.api.v0.enums.OriginalType;
    readonly 'data': string;
  }

  interface PasswordReset {
    readonly 'token': string;
    readonly 'password': string;
  }

  interface PasswordResetRequest {
    readonly 'email': string;
  }

  interface Session {
    readonly 'id': string;
    readonly 'expires_at': string;
  }

  interface Subscription {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface SubscriptionForm {
    readonly 'organization_key': string;
    readonly 'user_guid': string;
    readonly 'publication': io.apibuilder.api.v0.enums.Publication;
  }

  interface Token {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'masked_token': string;
    readonly 'description'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface TokenForm {
    readonly 'user_guid': string;
    readonly 'description'?: string;
  }

  interface User {
    readonly 'guid': string;
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface UserForm {
    readonly 'email': string;
    readonly 'password': string;
    readonly 'nickname'?: string;
    readonly 'name'?: string;
  }

  interface UserSummary {
    readonly 'guid': string;
    readonly 'nickname': string;
  }

  interface UserUpdateForm {
    readonly 'email': string;
    readonly 'nickname': string;
    readonly 'name'?: string;
  }

  interface Validation {
    readonly 'valid': boolean;
    readonly 'errors': string[];
  }

  interface Version {
    readonly 'guid': string;
    readonly 'organization': io.apibuilder.common.v0.models.Reference;
    readonly 'application': io.apibuilder.common.v0.models.Reference;
    readonly 'version': string;
    readonly 'original'?: io.apibuilder.api.v0.models.Original;
    readonly 'service': io.apibuilder.spec.v0.models.Service;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface VersionForm {
    readonly 'original_form': io.apibuilder.api.v0.models.OriginalForm;
    readonly 'visibility'?: io.apibuilder.api.v0.enums.Visibility;
  }

  interface Watch {
    readonly 'guid': string;
    readonly 'user': io.apibuilder.api.v0.models.User;
    readonly 'organization': io.apibuilder.api.v0.models.Organization;
    readonly 'application': io.apibuilder.api.v0.models.Application;
    readonly 'audit': io.apibuilder.common.v0.models.Audit;
  }

  interface WatchForm {
    readonly 'user_guid': string;
    readonly 'organization_key': string;
    readonly 'application_key': string;
  }
}

declare namespace io.apibuilder.api.v0.unions {
  type Diff = (io.apibuilder.api.v0.models.DiffBreaking | io.apibuilder.api.v0.models.DiffNonBreaking);
  type ItemDetail = (io.apibuilder.api.v0.models.ApplicationSummary);
}

export type AppSortBy = io.apibuilder.api.v0.enums.AppSortBy;
export type Application = io.apibuilder.api.v0.models.Application;
export type ApplicationForm = io.apibuilder.api.v0.models.ApplicationForm;
export type ApplicationMetadata = io.apibuilder.api.v0.models.ApplicationMetadata;
export type ApplicationMetadataVersion = io.apibuilder.api.v0.models.ApplicationMetadataVersion;
export type ApplicationSummary = io.apibuilder.api.v0.models.ApplicationSummary;
export type Attribute = io.apibuilder.api.v0.models.Attribute;
export type AttributeForm = io.apibuilder.api.v0.models.AttributeForm;
export type AttributeSummary = io.apibuilder.api.v0.models.AttributeSummary;
export type AttributeValue = io.apibuilder.api.v0.models.AttributeValue;
export type AttributeValueForm = io.apibuilder.api.v0.models.AttributeValueForm;
export type Authentication = io.apibuilder.api.v0.models.Authentication;
export type BatchDownloadApplicationForm = io.apibuilder.api.v0.models.BatchDownloadApplicationForm;
export type BatchDownloadApplications = io.apibuilder.api.v0.models.BatchDownloadApplications;
export type BatchDownloadApplicationsForm = io.apibuilder.api.v0.models.BatchDownloadApplicationsForm;
export type Change = io.apibuilder.api.v0.models.Change;
export type ChangeVersion = io.apibuilder.api.v0.models.ChangeVersion;
export type CleartextToken = io.apibuilder.api.v0.models.CleartextToken;
export type Code = io.apibuilder.api.v0.models.Code;
export type CodeForm = io.apibuilder.api.v0.models.CodeForm;
export type Diff = io.apibuilder.api.v0.unions.Diff;
export type DiffBreaking = io.apibuilder.api.v0.models.DiffBreaking;
export type DiffNonBreaking = io.apibuilder.api.v0.models.DiffNonBreaking;
export type Domain = io.apibuilder.api.v0.models.Domain;
export type EmailVerificationConfirmationForm = io.apibuilder.api.v0.models.EmailVerificationConfirmationForm;
export type Error = io.apibuilder.api.v0.models.Error;
export type GeneratorForm = io.apibuilder.api.v0.models.GeneratorForm;
export type GeneratorService = io.apibuilder.api.v0.models.GeneratorService;
export type GeneratorServiceForm = io.apibuilder.api.v0.models.GeneratorServiceForm;
export type GeneratorWithService = io.apibuilder.api.v0.models.GeneratorWithService;
export type Item = io.apibuilder.api.v0.models.Item;
export type ItemDetail = io.apibuilder.api.v0.unions.ItemDetail;
export type Membership = io.apibuilder.api.v0.models.Membership;
export type MembershipRequest = io.apibuilder.api.v0.models.MembershipRequest;
export type MoveForm = io.apibuilder.api.v0.models.MoveForm;
export type Organization = io.apibuilder.api.v0.models.Organization;
export type OrganizationForm = io.apibuilder.api.v0.models.OrganizationForm;
export type Original = io.apibuilder.api.v0.models.Original;
export type OriginalForm = io.apibuilder.api.v0.models.OriginalForm;
export type OriginalType = io.apibuilder.api.v0.enums.OriginalType;
export type PasswordReset = io.apibuilder.api.v0.models.PasswordReset;
export type PasswordResetRequest = io.apibuilder.api.v0.models.PasswordResetRequest;
export type Publication = io.apibuilder.api.v0.enums.Publication;
export type Session = io.apibuilder.api.v0.models.Session;
export type SortOrder = io.apibuilder.api.v0.enums.SortOrder;
export type Subscription = io.apibuilder.api.v0.models.Subscription;
export type SubscriptionForm = io.apibuilder.api.v0.models.SubscriptionForm;
export type Token = io.apibuilder.api.v0.models.Token;
export type TokenForm = io.apibuilder.api.v0.models.TokenForm;
export type User = io.apibuilder.api.v0.models.User;
export type UserForm = io.apibuilder.api.v0.models.UserForm;
export type UserSummary = io.apibuilder.api.v0.models.UserSummary;
export type UserUpdateForm = io.apibuilder.api.v0.models.UserUpdateForm;
export type Validation = io.apibuilder.api.v0.models.Validation;
export type Version = io.apibuilder.api.v0.models.Version;
export type VersionForm = io.apibuilder.api.v0.models.VersionForm;
export type Visibility = io.apibuilder.api.v0.enums.Visibility;
export type Watch = io.apibuilder.api.v0.models.Watch;
export type WatchForm = io.apibuilder.api.v0.models.WatchForm;

export interface $FetchOptions {
  body?: string;
  headers?: $HttpHeaders;
  method?: $HttpMethod;
}

export type $FetchFunction = (url: string, options?: $FetchOptions) => Promise<Response>;

export interface $HttpHeaders {
  [key: string]: string;
}

export type $HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'TRACE';

export interface $HttpQuery {
  [key: string]: string | number | boolean | string[] | number[] | boolean[] | undefined | null;
}

export interface $HttpRequest {
  body?: any;
  url: string;
  headers: $HttpHeaders;
  method: $HttpMethod;
}

export interface $HttpRequestOptions {
  body?: any;
  endpoint: string;
  headers?: $HttpHeaders;
  method: $HttpMethod;
  query?: $HttpQuery;
}

export interface $HttpResponse<B = any, S = number, O = boolean> {
  body: B;
  headers: $HttpHeaders;
  ok: O;
  request: $HttpRequest;
  status: S;
  statusText: string;
}

export type $HttpContinue<T> = $HttpResponse<T, 100, false>;
export type $HttpSwitchingProtocol<T> = $HttpResponse<T, 101, false>;
export type $HttpProcessing<T> = $HttpResponse<T, 102, false>;
export type $HttpOk<T> = $HttpResponse<T, 200, true>;
export type $HttpCreated<T> = $HttpResponse<T, 201, true>;
export type $HttpAccepted<T> = $HttpResponse<T, 202, true>;
export type $HttpNonAuthoritativeInformation<T> = $HttpResponse<T, 203, true>;
export type $HttpNoContent<T> = $HttpResponse<T, 204, true>;
export type $HttpResetContent<T> = $HttpResponse<T, 205, true>;
export type $HttpPartialContent<T> = $HttpResponse<T, 206, true>;
export type $HttpMultiStatus<T> = $HttpResponse<T, 207, true>;
export type $HttpAlreadyReported<T> = $HttpResponse<T, 208, true>;
export type $HttpImUsed<T> = $HttpResponse<T, 226, true>;
export type $HttpMultipleChoices<T> = $HttpResponse<T, 300, false>;
export type $HttpMovedPermanently<T> = $HttpResponse<T, 301, false>;
export type $HttpFound<T> = $HttpResponse<T, 302, false>;
export type $HttpSeeOther<T> = $HttpResponse<T, 303, false>;
export type $HttpNotModified<T> = $HttpResponse<T, 304, false>;
export type $HttpUseProxy<T> = $HttpResponse<T, 305, false>;
export type $HttpTemporaryRedirect<T> = $HttpResponse<T, 307, false>;
export type $HttpPermanentRedirect<T> = $HttpResponse<T, 308, false>;
export type $HttpBadRequest<T> = $HttpResponse<T, 400, false>;
export type $HttpUnauthorized<T> = $HttpResponse<T, 401, false>;
export type $HttpPaymentRequired<T> = $HttpResponse<T, 402, false>;
export type $HttpForbidden<T> = $HttpResponse<T, 403, false>;
export type $HttpNotFound<T> = $HttpResponse<T, 404, false>;
export type $HttpMethodNotAllowed<T> = $HttpResponse<T, 405, false>;
export type $HttpNotAcceptable<T> = $HttpResponse<T, 406, false>;
export type $HttpProxyAuthenticationRequired<T> = $HttpResponse<T, 407, false>;
export type $HttpRequestTimeout<T> = $HttpResponse<T, 408, false>;
export type $HttpConflict<T> = $HttpResponse<T, 409, false>;
export type $HttpGone<T> = $HttpResponse<T, 410, false>;
export type $HttpLengthRequired<T> = $HttpResponse<T, 411, false>;
export type $HttpPreconditionFailed<T> = $HttpResponse<T, 412, false>;
export type $HttpRequestEntityTooLarge<T> = $HttpResponse<T, 413, false>;
export type $HttpRequestUriTooLong<T> = $HttpResponse<T, 414, false>;
export type $HttpUnsupportedMediaType<T> = $HttpResponse<T, 415, false>;
export type $HttpRequestedRangeNotSatisfiable<T> = $HttpResponse<T, 416, false>;
export type $HttpExpectationFailed<T> = $HttpResponse<T, 417, false>;
export type $HttpMisdirectedRequest<T> = $HttpResponse<T, 421, false>;
export type $HttpUnprocessableEntity<T> = $HttpResponse<T, 422, false>;
export type $HttpLocked<T> = $HttpResponse<T, 423, false>;
export type $HttpFailedDependency<T> = $HttpResponse<T, 424, false>;
export type $HttpUpgradeRequired<T> = $HttpResponse<T, 426, false>;
export type $HttpPreconditionRequired<T> = $HttpResponse<T, 428, false>;
export type $HttpTooManyRequests<T> = $HttpResponse<T, 429, false>;
export type $HttpRequestHeaderFieldsTooLarge<T> = $HttpResponse<T, 431, false>;
export type $HttpNoResponse<T> = $HttpResponse<T, 444, false>;
export type $HttpRetryWith<T> = $HttpResponse<T, 449, false>;
export type $HttpBlockedByWindowsParentalControls<T> = $HttpResponse<T, 450, false>;
export type $HttpUnavailableForLegalReasons<T> = $HttpResponse<T, 451, false>;
export type $HttpClientClosedRequest<T> = $HttpResponse<T, 499, false>;
export type $HttpInternalServerError<T> = $HttpResponse<T, 500, false>;
export type $HttpNotImplemented<T> = $HttpResponse<T, 501, false>;
export type $HttpBadGateway<T> = $HttpResponse<T, 502, false>;
export type $HttpServiceUnavailable<T> = $HttpResponse<T, 503, false>;
export type $HttpGatewayTimeout<T> = $HttpResponse<T, 504, false>;
export type $HttpHttpVersionNotSupported<T> = $HttpResponse<T, 505, false>;
export type $HttpInsufficientStorage<T> = $HttpResponse<T, 507, false>;
export type $HttpLoopDetected<T> = $HttpResponse<T, 508, false>;
export type $HttpBandwidthLimitExceeded<T> = $HttpResponse<T, 509, false>;
export type $HttpNotExtended<T> = $HttpResponse<T, 510, false>;
export type $HttpNetworkAuthenticationRequired<T> = $HttpResponse<T, 511, false>;
export type $HttpNetworkReadTimeoutError<T> = $HttpResponse<T, 598, false>;
export type $HttpNetworkConnectTimeoutError<T> = $HttpResponse<T, 599, false>;

export interface $HttpClientOptions {
  fetch: $FetchFunction;
}

export function isResponseEmpty(response: Response): boolean {
  const contentLength = response.headers.get('Content-Length');
  return response.status === 204 || contentLength != null && Number.parseInt(contentLength, 10) === 0;
}

export function isResponseJson(response: Response): boolean {
  const contentType = response.headers.get('Content-Type');
  return contentType != null && contentType.indexOf('json') >= 0;
}

export function parseJson(response: Response): Promise<any> {
  return !isResponseEmpty(response) && isResponseJson(response) ? response.json() : Promise.resolve();
}

export function parseHeaders(response: Response): Record<string, string> {
  const headers: Record<string, string> = {};

  response.headers.forEach((value, key) => {
    headers[key.toLowerCase()] = value;
  });

  return headers;
}

export function stripQuery(query: $HttpQuery = {}): $HttpQuery {
  const initialValue: $HttpQuery = {};

  return Object.keys(query).reduce((previousValue, key) => {
    const value = query[key];

    if (value != null)
      previousValue[key] = value;

    return previousValue;
  }, initialValue);
}

export class $HttpClient {
  private options: $HttpClientOptions;

  constructor(options: $HttpClientOptions) {
    this.options = options;
  }

  public request(options: $HttpRequestOptions): Promise<$HttpResponse<any, any, any>> {
    const finalUrl: string = url.format({
      hostname: 'api.apibuilder.io',
      pathname: options.endpoint,
      protocol: 'https:',
      query: stripQuery(options.query),
    });

    const finalHeaders: $HttpHeaders = {
      accept: 'application/json',
      'content-type': 'application/json',
      ...options.headers,
    };

    const request: $HttpRequest = {
      body: options.body,
      headers: finalHeaders,
      method: options.method,
      url: finalUrl,
    };

    return this.options.fetch(request.url, {
      body: JSON.stringify(request.body),
      headers: request.headers,
      method: request.method,
    }).then((response) => {
      return parseJson(response).then((json) => {
        return {
          body: json,
          headers: parseHeaders(response),
          ok: response.ok,
          request,
          status: response.status,
          statusText: response.statusText,
        };
      });
    });
  }
}

export class $Resource {
  protected client: $HttpClient;

  constructor(options: $HttpClientOptions) {
    this.client = new $HttpClient(options);
  }
}

export interface ApplicationsGetMetadataAndVersionsByApplicationKeyParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface ApplicationsGetParameters {
  headers?: $HttpHeaders;
  /*The organization key for which to search applications*/
  orgKey: string;
  /*The name of an application. Case in-sensitive. Exact match*/
  name?: string;
  /*The guid of an application. Exact match*/
  guid?: string;
  /*The key of an application. Case in-sensitive. Exact match*/
  key?: string;
  /*If true, we return applications that have at least one version. If false, we return applications that have no versions in the system*/
  has_version?: boolean;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
  sort_by?: io.apibuilder.api.v0.enums.AppSortBy;
  order?: io.apibuilder.api.v0.enums.SortOrder;
}

export interface ApplicationsPostParameters {
  body: io.apibuilder.api.v0.models.ApplicationForm;
  headers?: $HttpHeaders;
  orgKey: string;
}

export interface ApplicationsPutByApplicationKeyParameters {
  body: io.apibuilder.api.v0.models.ApplicationForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface ApplicationsDeleteByApplicationKeyParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface ApplicationsPostMoveByApplicationKeyParameters {
  body: io.apibuilder.api.v0.models.MoveForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface AttributesGetParameters {
  headers?: $HttpHeaders;
  /*Find the watch with this guid.*/
  guid?: string;
  /*Find attributes with this name. Case in-sensitive. Exact match*/
  name?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface AttributesGetByNameParameters {
  headers?: $HttpHeaders;
  name: string;
}

export interface AttributesPostParameters {
  body: io.apibuilder.api.v0.models.AttributeForm;
  headers?: $HttpHeaders;
}

export interface AttributesDeleteByNameParameters {
  headers?: $HttpHeaders;
  name: string;
}

export interface AuthenticationsGetSessionByIdParameters {
  headers?: $HttpHeaders;
  id: string;
}

export interface BatchDownloadApplicationsPostParameters {
  body: io.apibuilder.api.v0.models.BatchDownloadApplicationsForm;
  headers?: $HttpHeaders;
  orgKey: string;
}

export interface ChangesGetParameters {
  headers?: $HttpHeaders;
  /*Filter changes to those made for the organization with this key.*/
  org_key?: string;
  /*Filter changes to those made for the application with this key.*/
  application_key?: string;
  /*Filter changes to those made from this version.*/
  from?: string;
  /*Filter changes to those made to this version.*/
  to?: string;
  /*The type of diff to return.*/
  type?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface CodePostFormParameters {
  body: io.apibuilder.api.v0.models.CodeForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  version: string;
}

export interface CodeGetByGeneratorKeyParameters {
  headers?: $HttpHeaders;
  /*The organization key for which to generate code*/
  orgKey: string;
  /*The application key for which to generate code*/
  applicationKey: string;
  /*The version of this application. Can be 'latest'*/
  version: string;
  /*The key of the generator to invoke*/
  generatorKey: string;
}

export interface CodePostByGeneratorKeyParameters {
  body: io.apibuilder.api.v0.models.CodeForm;
  headers?: $HttpHeaders;
  /*The organization key for which to generate code*/
  orgKey: string;
  /*The application key for which to generate code*/
  applicationKey: string;
  /*The version of this application. Can be 'latest'*/
  version: string;
  /*The key of the generator to invoke*/
  generatorKey: string;
}

export interface DomainsPostParameters {
  body: io.apibuilder.api.v0.models.Domain;
  headers?: $HttpHeaders;
  orgKey: string;
}

export interface DomainsDeleteByNameParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  name: string;
}

export interface EmailVerificationConfirmationFormsPostParameters {
  body: io.apibuilder.api.v0.models.EmailVerificationConfirmationForm;
  headers?: $HttpHeaders;
}

export interface GeneratorServicesGetParameters {
  headers?: $HttpHeaders;
  guid?: string;
  uri?: string;
  generator_key?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface GeneratorServicesGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface GeneratorServicesPostParameters {
  body: io.apibuilder.api.v0.models.GeneratorServiceForm;
  headers?: $HttpHeaders;
}

export interface GeneratorServicesDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface GeneratorWithServicesGetParameters {
  headers?: $HttpHeaders;
  /*Filter to generator with this guid*/
  guid?: string;
  /*Filter to generator from this service*/
  service_guid?: string;
  /*Filter to generator from this service URI*/
  service_uri?: string;
  /*Filter to generators that use this attribute*/
  attribute_name?: string;
  /*Filter to generator with this key*/
  key?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface GeneratorWithServicesGetByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
}

export interface HealthchecksGetHealthcheckParameters {
  headers?: $HttpHeaders;
}

export interface HealthchecksGetMigrateParameters {
  headers?: $HttpHeaders;
}

export interface ItemsGetParameters {
  headers?: $HttpHeaders;
  /*The search query. At the moment, we do case insensitive exact match search.*/
  q?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface ItemsGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipsGetParameters {
  headers?: $HttpHeaders;
  org_guid?: string;
  org_key?: string;
  user_guid?: string;
  role?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface MembershipsGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipsDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipRequestsGetParameters {
  headers?: $HttpHeaders;
  org_guid?: string;
  org_key?: string;
  user_guid?: string;
  role?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface MembershipRequestsPostParameters {
  headers?: $HttpHeaders;
  org_guid: string;
  user_guid: string;
  role: string;
}

export interface MembershipRequestsPostAcceptByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipRequestsPostDeclineByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface OrganizationsGetParameters {
  headers?: $HttpHeaders;
  /*Finds the organization with this guid, if any*/
  guid?: string;
  /*If specified, restricts to organizations that this user is specifically a member of (e.g. will exclude public organizations with which the user does not have a direct membership).*/
  user_guid?: string;
  /*Find organizations with this key. Case in-sensitive. Exact match*/
  key?: string;
  /*Find organizations with this name. Case in-sensitive. Exact match*/
  name?: string;
  /*Find organizations with this namespace. Case in-sensitive. Exact match*/
  namespace?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface OrganizationsGetByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
}

export interface OrganizationsPostParameters {
  body: io.apibuilder.api.v0.models.OrganizationForm;
  headers?: $HttpHeaders;
}

export interface OrganizationsPutByKeyParameters {
  body: io.apibuilder.api.v0.models.OrganizationForm;
  headers?: $HttpHeaders;
  key: string;
}

export interface OrganizationsDeleteByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
}

export interface OrganizationsGetAttributesByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
  /*Find the values for the attribute with this name.*/
  name?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface OrganizationsGetAttributesByKeyAndNameParameters {
  headers?: $HttpHeaders;
  key: string;
  name: string;
}

export interface OrganizationsPutAttributesByKeyAndNameParameters {
  body: io.apibuilder.api.v0.models.AttributeValueForm;
  headers?: $HttpHeaders;
  key: string;
  name: string;
}

export interface OrganizationsDeleteAttributesByKeyAndNameParameters {
  headers?: $HttpHeaders;
  key: string;
  name: string;
}

export interface PasswordResetsPostParameters {
  body: io.apibuilder.api.v0.models.PasswordReset;
  headers?: $HttpHeaders;
}

export interface PasswordResetRequestsPostParameters {
  body: io.apibuilder.api.v0.models.PasswordResetRequest;
  headers?: $HttpHeaders;
}

export interface SubscriptionsGetParameters {
  headers?: $HttpHeaders;
  /*Find the subscription with this guid.*/
  guid?: string;
  /*Find subscriptions for this organization.*/
  organization_key?: string;
  /*Find subscriptions for this user.*/
  user_guid?: string;
  /*Find subscriptions for this publication.*/
  publication?: io.apibuilder.api.v0.enums.Publication;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface SubscriptionsGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface SubscriptionsPostParameters {
  body: io.apibuilder.api.v0.models.SubscriptionForm;
  headers?: $HttpHeaders;
}

export interface SubscriptionsDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface TokensGetUsersByUserGuidParameters {
  headers?: $HttpHeaders;
  user_guid: string;
  guid?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface TokensGetCleartextByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface TokensPostParameters {
  body: io.apibuilder.api.v0.models.TokenForm;
  headers?: $HttpHeaders;
}

export interface TokensDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface UsersGetParameters {
  headers?: $HttpHeaders;
  /*Find user with this guid. Exact match*/
  guid?: string;
  /*Find user with this email address. Case in-sensitive. Exact match*/
  email?: string;
  /*Find user with the specified nickname. For users that register via GitHub, this will be their GitHub username. Case in-sensitive. Exact match*/
  nickname?: string;
  /*Find the user with this API token. Exact match*/
  token?: string;
}

export interface UsersGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface UsersPostAuthenticateParameters {
  headers?: $HttpHeaders;
  email: string;
  password: string;
}

export interface UsersPostAuthenticateGithubParameters {
  headers?: $HttpHeaders;
  /*The GitHub assigned oauth token*/
  token: string;
}

export interface UsersPostParameters {
  body: io.apibuilder.api.v0.models.UserForm;
  headers?: $HttpHeaders;
}

export interface UsersPutByGuidParameters {
  body: io.apibuilder.api.v0.models.UserUpdateForm;
  headers?: $HttpHeaders;
  guid: string;
}

export interface ValidationsPostParameters {
  body: string;
  headers?: $HttpHeaders;
}

export interface VersionsGetByApplicationKeyParameters {
  headers?: $HttpHeaders;
  /*The organization key for which to search versions*/
  orgKey: string;
  /*The application key for which to search versions*/
  applicationKey: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface VersionsGetByApplicationKeyAndVersionParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  /*The version of tthis application to download, or the keyword latest to get the latest version*/
  version: string;
}

export interface VersionsPostByVersionParameters {
  body: io.apibuilder.api.v0.models.VersionForm;
  headers?: $HttpHeaders;
  orgKey: string;
  version: string;
}

export interface VersionsPutByApplicationKeyAndVersionParameters {
  body: io.apibuilder.api.v0.models.VersionForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  version: string;
}

export interface VersionsDeleteByApplicationKeyAndVersionParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  version: string;
}

export interface VersionsGetExampleByApplicationKeyAndVersionAndTypeNameParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  /*The version of this application to download, or the keyword latest to get the latest version*/
  version: string;
  /*The name of the type (e.g. model name) for which you would like to generate a sample json document*/
  type_name: string;
  /*The name of the sub-type for which you would like to generate a sample json document, e.g. a specific type of a union*/
  sub_type_name?: string;
  /*If true, we generate sample data for all optional fields. Otherwise the generated sample will contain only required fields, where applicable*/
  optional_fields?: boolean;
}

export interface WatchesGetParameters {
  headers?: $HttpHeaders;
  /*Find the watch with this guid.*/
  guid?: string;
  /*Find attributes for this user.*/
  user_guid?: string;
  /*Find attributes for this organization.*/
  organization_key?: string;
  /*Find attributes for this application.*/
  application_key?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface WatchesGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface WatchesGetCheckParameters {
  headers?: $HttpHeaders;
  /*The user for which we are checking. API returns false if the user guid is not provided*/
  user_guid?: string;
  organization_key: string;
  application_key: string;
}

export interface WatchesPostParameters {
  body: io.apibuilder.api.v0.models.WatchForm;
  headers?: $HttpHeaders;
}

export interface WatchesDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export type ApplicationsGetMetadataAndVersionsByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.ApplicationMetadataVersion[]> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyResponse = $HttpOk<string> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type ApplicationsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Application[]>;
export type ApplicationsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Application> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ApplicationsPutByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Application> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ApplicationsDeleteByApplicationKeyResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type ApplicationsPostMoveByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Application> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type AttributesGetResponse = $HttpOk<io.apibuilder.api.v0.models.Attribute[]>;
export type AttributesGetByNameResponse = $HttpOk<io.apibuilder.api.v0.models.Attribute> | $HttpNotFound<undefined>;
export type AttributesPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Attribute> | $HttpUnauthorized<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type AttributesDeleteByNameResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type AuthenticationsGetSessionByIdResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpNotFound<undefined>;
export type BatchDownloadApplicationsPostResponse = $HttpCreated<io.apibuilder.api.v0.models.BatchDownloadApplications> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ChangesGetResponse = $HttpOk<io.apibuilder.api.v0.models.Change[]>;
export type CodePostFormResponse = $HttpOk<io.apibuilder.generator.v0.models.InvocationForm> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type CodeGetByGeneratorKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Code> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type CodePostByGeneratorKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Code> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type DomainsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Domain> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type DomainsDeleteByNameResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type EmailVerificationConfirmationFormsPostResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type GeneratorServicesGetResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorService[]>;
export type GeneratorServicesGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorService> | $HttpNotFound<undefined>;
export type GeneratorServicesPostResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorService> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type GeneratorServicesDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type GeneratorWithServicesGetResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorWithService[]>;
export type GeneratorWithServicesGetByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorWithService> | $HttpNotFound<undefined>;
export type HealthchecksGetHealthcheckResponse = $HttpOk<io.apibuilder.generator.v0.models.Healthcheck>;
export type HealthchecksGetMigrateResponse = $HttpOk<Record<string, string>>;
export type ItemsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Item[]>;
export type ItemsGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Item> | $HttpNotFound<undefined>;
export type MembershipsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Membership[]>;
export type MembershipsGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Membership> | $HttpNotFound<undefined>;
export type MembershipsDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type MembershipRequestsGetResponse = $HttpOk<io.apibuilder.api.v0.models.MembershipRequest[]>;
export type MembershipRequestsPostResponse = $HttpOk<io.apibuilder.api.v0.models.MembershipRequest> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type MembershipRequestsPostAcceptByGuidResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type MembershipRequestsPostDeclineByGuidResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Organization[]>;
export type OrganizationsGetByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Organization> | $HttpNotFound<undefined>;
export type OrganizationsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Organization> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsPutByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Organization> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsDeleteByKeyResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type OrganizationsGetAttributesByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.AttributeValue[]>;
export type OrganizationsGetAttributesByKeyAndNameResponse = $HttpOk<io.apibuilder.api.v0.models.AttributeValue> | $HttpNotFound<undefined>;
export type OrganizationsPutAttributesByKeyAndNameResponse = $HttpOk<io.apibuilder.api.v0.models.AttributeValue> | $HttpCreated<io.apibuilder.api.v0.models.AttributeValue> | $HttpNotFound<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsDeleteAttributesByKeyAndNameResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type PasswordResetsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type PasswordResetRequestsPostResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type SubscriptionsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Subscription[]>;
export type SubscriptionsGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Subscription> | $HttpNotFound<undefined>;
export type SubscriptionsPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Subscription> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type SubscriptionsDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type TokensGetUsersByUserGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Token[]>;
export type TokensGetCleartextByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.CleartextToken> | $HttpNotFound<undefined>;
export type TokensPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Token> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type TokensDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type UsersGetResponse = $HttpOk<io.apibuilder.api.v0.models.User[]>;
export type UsersGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.User> | $HttpNotFound<undefined>;
export type UsersPostAuthenticateResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type UsersPostAuthenticateGithubResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type UsersPostResponse = $HttpOk<io.apibuilder.api.v0.models.User> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type UsersPutByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.User> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ValidationsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Validation>;
export type VersionsGetByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Version[]>;
export type VersionsGetByApplicationKeyAndVersionResponse = $HttpOk<io.apibuilder.api.v0.models.Version> | $HttpNotFound<undefined>;
export type VersionsPostByVersionResponse = $HttpOk<io.apibuilder.api.v0.models.Version> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type VersionsPutByApplicationKeyAndVersionResponse = $HttpOk<io.apibuilder.api.v0.models.Version> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type VersionsDeleteByApplicationKeyAndVersionResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type VersionsGetExampleByApplicationKeyAndVersionAndTypeNameResponse = $HttpOk<any/*object*/> | $HttpNotFound<undefined>;
export type WatchesGetResponse = $HttpOk<io.apibuilder.api.v0.models.Watch[]>;
export type WatchesGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Watch> | $HttpNotFound<undefined>;
export type WatchesGetCheckResponse = $HttpOk<boolean>;
export type WatchesPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Watch> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type WatchesDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;

export class ApplicationsResource extends $Resource {
  /*Returns the versions assocoated with the specified application. The latest version is the first result returned.*/
  public getMetadataAndVersionsByApplicationKey(params: ApplicationsGetMetadataAndVersionsByApplicationKeyParameters): Promise<ApplicationsGetMetadataAndVersionsByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/metadata/\${encodeURIComponent(params.applicationKey)}/versions\`,
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
      },
    });
  }

  /*Returns the latest version number as a string*/
  public getMetadataAndVersionsAndLatestTxtByApplicationKey(
    params: ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyParameters,
  ): Promise<ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/metadata/\${encodeURIComponent(params.applicationKey)}/versions/latest.txt\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Search all applications. Results are always paginated.*/
  public get(params: ApplicationsGetParameters): Promise<ApplicationsGetResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        has_version: params.has_version,
        key: params.key,
        limit: params.limit,
        name: params.name,
        offset: params.offset,
        order: params.order,
        sort_by: params.sort_by,
      },
    });
  }

  /*Create an application.*/
  public post(params: ApplicationsPostParameters): Promise<ApplicationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Updates an application.*/
  public putByApplicationKey(params: ApplicationsPutByApplicationKeyParameters): Promise<ApplicationsPutByApplicationKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes a specific application and its associated versions.*/
  public deleteByApplicationKey(params: ApplicationsDeleteByApplicationKeyParameters): Promise<ApplicationsDeleteByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }

  /*Moves application to a new organization.*/
  public postMoveByApplicationKey(params: ApplicationsPostMoveByApplicationKeyParameters): Promise<ApplicationsPostMoveByApplicationKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/move\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class AttributesResource extends $Resource {
  /*Search all attributes. Results are always paginated.*/
  public get(params: AttributesGetParameters): Promise<AttributesGetResponse> {
    return this.client.request({
      endpoint: '/attributes',
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        limit: params.limit,
        name: params.name,
        offset: params.offset,
      },
    });
  }

  /*Returns the attribute with this name.*/
  public getByName(params: AttributesGetByNameParameters): Promise<AttributesGetByNameResponse> {
    return this.client.request({
      endpoint: \`/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new attribute.*/
  public post(params: AttributesPostParameters): Promise<AttributesPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/attributes',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Deletes the attribute with this name. Only the user who created an attribute can delete it.*/
  public deleteByName(params: AttributesDeleteByNameParameters): Promise<AttributesDeleteByNameResponse> {
    return this.client.request({
      endpoint: \`/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class AuthenticationsResource extends $Resource {
  public getSessionById(params: AuthenticationsGetSessionByIdParameters): Promise<AuthenticationsGetSessionByIdResponse> {
    return this.client.request({
      endpoint: \`/authentications/session/\${encodeURIComponent(params.id)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class BatchDownloadApplicationsResource extends $Resource {
  /*Retrieve multiple applications in one api call.*/
  public post(params: BatchDownloadApplicationsPostParameters): Promise<BatchDownloadApplicationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/batch/download/applications\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class ChangesResource extends $Resource {
  public get(params: ChangesGetParameters): Promise<ChangesGetResponse> {
    return this.client.request({
      endpoint: '/changes',
      headers: params.headers,
      method: 'GET',

      query: {
        application_key: params.application_key,
        from: params.from,
        limit: params.limit,
        offset: params.offset,
        org_key: params.org_key,
        to: params.to,
        type: params.type,
      },
    });
  }
}

export class CodeResource extends $Resource {
  /*Create an invocation form. This is useful primarily for debugging when you want to see exactly what content is being forwarded to the generator*/
  public postForm(params: CodePostFormParameters): Promise<CodePostFormResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/form\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Generate code for a specific version of an application.*/
  public getByGeneratorKey(params: CodeGetByGeneratorKeyParameters): Promise<CodeGetByGeneratorKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/\${encodeURIComponent(params.generatorKey)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Generate code for a specific version of an application.*/
  public postByGeneratorKey(params: CodePostByGeneratorKeyParameters): Promise<CodePostByGeneratorKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/\${encodeURIComponent(params.generatorKey)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class DomainsResource extends $Resource {
  /*Add a domain to this organization*/
  public post(params: DomainsPostParameters): Promise<DomainsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/domains/\${encodeURIComponent(params.orgKey)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Remove this domain from this organization*/
  public deleteByName(params: DomainsDeleteByNameParameters): Promise<DomainsDeleteByNameResponse> {
    return this.client.request({
      endpoint: \`/domains/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class EmailVerificationConfirmationFormsResource extends $Resource {
  /*Validate an email address using a token.*/
  public post(params: EmailVerificationConfirmationFormsPostParameters): Promise<EmailVerificationConfirmationFormsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/email_verification_confirmations',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class GeneratorServicesResource extends $Resource {
  /*List all generator services*/
  public get(params: GeneratorServicesGetParameters): Promise<GeneratorServicesGetResponse> {
    return this.client.request({
      endpoint: '/generator_services',
      headers: params.headers,
      method: 'GET',

      query: {
        generator_key: params.generator_key,
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
        uri: params.uri,
      },
    });
  }

  public getByGuid(params: GeneratorServicesGetByGuidParameters): Promise<GeneratorServicesGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/generator_services/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  public post(params: GeneratorServicesPostParameters): Promise<GeneratorServicesPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/generator_services',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Deletes a generator service.*/
  public deleteByGuid(params: GeneratorServicesDeleteByGuidParameters): Promise<GeneratorServicesDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/generator_services/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class GeneratorWithServicesResource extends $Resource {
  /*List all available generators*/
  public get(params: GeneratorWithServicesGetParameters): Promise<GeneratorWithServicesGetResponse> {
    return this.client.request({
      endpoint: '/generators',
      headers: params.headers,
      method: 'GET',

      query: {
        attribute_name: params.attribute_name,
        guid: params.guid,
        key: params.key,
        limit: params.limit,
        offset: params.offset,
        service_guid: params.service_guid,
        service_uri: params.service_uri,
      },
    });
  }

  public getByKey(params: GeneratorWithServicesGetByKeyParameters): Promise<GeneratorWithServicesGetByKeyResponse> {
    return this.client.request({
      endpoint: \`/generators/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class HealthchecksResource extends $Resource {
  public getHealthcheck(params: HealthchecksGetHealthcheckParameters = {}): Promise<HealthchecksGetHealthcheckResponse> {
    return this.client.request({
      endpoint: '/_internal_/healthcheck',
      headers: params.headers,
      method: 'GET',
    });
  }

  public getMigrate(params: HealthchecksGetMigrateParameters = {}): Promise<HealthchecksGetMigrateResponse> {
    return this.client.request({
      endpoint: '/_internal_/migrate',
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class ItemsResource extends $Resource {
  public get(params: ItemsGetParameters): Promise<ItemsGetResponse> {
    return this.client.request({
      endpoint: '/items',
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
        q: params.q,
      },
    });
  }

  public getByGuid(params: ItemsGetByGuidParameters): Promise<ItemsGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/items/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class MembershipsResource extends $Resource {
  /*Search all memberships. Results are always paginated.*/
  public get(params: MembershipsGetParameters): Promise<MembershipsGetResponse> {
    return this.client.request({
      endpoint: '/memberships',
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
        org_guid: params.org_guid,
        org_key: params.org_key,
        role: params.role,
        user_guid: params.user_guid,
      },
    });
  }

  public getByGuid(params: MembershipsGetByGuidParameters): Promise<MembershipsGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/memberships/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  public deleteByGuid(params: MembershipsDeleteByGuidParameters): Promise<MembershipsDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/memberships/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class MembershipRequestsResource extends $Resource {
  /*Search all membership requests. Results are always paginated.*/
  public get(params: MembershipRequestsGetParameters): Promise<MembershipRequestsGetResponse> {
    return this.client.request({
      endpoint: '/membership_requests',
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
        org_guid: params.org_guid,
        org_key: params.org_key,
        role: params.role,
        user_guid: params.user_guid,
      },
    });
  }

  /*Create a membership request*/
  public post(params: MembershipRequestsPostParameters): Promise<MembershipRequestsPostResponse> {
    return this.client.request({
      endpoint: '/membership_requests',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Accepts this membership request. User will become a member of the specified organization.*/
  public postAcceptByGuid(params: MembershipRequestsPostAcceptByGuidParameters): Promise<MembershipRequestsPostAcceptByGuidResponse> {
    return this.client.request({
      endpoint: \`/membership_requests/\${encodeURIComponent(params.guid)}/accept\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Declines this membership request. User will NOT become a member of the specified organization.*/
  public postDeclineByGuid(params: MembershipRequestsPostDeclineByGuidParameters): Promise<MembershipRequestsPostDeclineByGuidResponse> {
    return this.client.request({
      endpoint: \`/membership_requests/\${encodeURIComponent(params.guid)}/decline\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class OrganizationsResource extends $Resource {
  /*Search all organizations. Results are always paginated.*/
  public get(params: OrganizationsGetParameters): Promise<OrganizationsGetResponse> {
    return this.client.request({
      endpoint: '/organizations',
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        key: params.key,
        limit: params.limit,
        name: params.name,
        namespace: params.namespace,
        offset: params.offset,
        user_guid: params.user_guid,
      },
    });
  }

  /*Returns the organization with this key.*/
  public getByKey(params: OrganizationsGetByKeyParameters): Promise<OrganizationsGetByKeyResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new organization.*/
  public post(params: OrganizationsPostParameters): Promise<OrganizationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/organizations',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Update an organization.*/
  public putByKey(params: OrganizationsPutByKeyParameters): Promise<OrganizationsPutByKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes an organization and all of its associated applications.*/
  public deleteByKey(params: OrganizationsDeleteByKeyParameters): Promise<OrganizationsDeleteByKeyResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }

  /*Returns all attribute values for this organization. Results are always paginated.*/
  public getAttributesByKey(params: OrganizationsGetAttributesByKeyParameters): Promise<OrganizationsGetAttributesByKeyResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes\`,
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        name: params.name,
        offset: params.offset,
      },
    });
  }

  /*Returns the attribute value with this name.*/
  public getAttributesByKeyAndName(params: OrganizationsGetAttributesByKeyAndNameParameters): Promise<OrganizationsGetAttributesByKeyAndNameResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create or update a new attribute value.*/
  public putAttributesByKeyAndName(params: OrganizationsPutAttributesByKeyAndNameParameters): Promise<OrganizationsPutAttributesByKeyAndNameResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes the attribute value with the specified name. Only the user who created an attribute value can delete it.*/
  public deleteAttributesByKeyAndName(params: OrganizationsDeleteAttributesByKeyAndNameParameters): Promise<OrganizationsDeleteAttributesByKeyAndNameResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class PasswordResetsResource extends $Resource {
  /*Change the password for this token. If the token is invalid, has been used, or otherwise no longer can be applied, errors will be returned as 409s. A 204 represents that the user has successfully changed their password.*/
  public post(params: PasswordResetsPostParameters): Promise<PasswordResetsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/password_resets',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class PasswordResetRequestsResource extends $Resource {
  /*Create a new password reset. This will send the user an email with a link to reset their password.*/
  public post(params: PasswordResetRequestsPostParameters): Promise<PasswordResetRequestsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/password_reset_requests',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class SubscriptionsResource extends $Resource {
  /*Search subscriptions. Always paginated.*/
  public get(params: SubscriptionsGetParameters): Promise<SubscriptionsGetResponse> {
    return this.client.request({
      endpoint: '/subscriptions',
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
        organization_key: params.organization_key,
        publication: params.publication,
        user_guid: params.user_guid,
      },
    });
  }

  /*Returns information about a specific subscription.*/
  public getByGuid(params: SubscriptionsGetByGuidParameters): Promise<SubscriptionsGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/subscriptions/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new subscription.*/
  public post(params: SubscriptionsPostParameters): Promise<SubscriptionsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/subscriptions',
      headers: params.headers,
      method: 'POST',
    });
  }

  public deleteByGuid(params: SubscriptionsDeleteByGuidParameters): Promise<SubscriptionsDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/subscriptions/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class TokensResource extends $Resource {
  public getUsersByUserGuid(params: TokensGetUsersByUserGuidParameters): Promise<TokensGetUsersByUserGuidResponse> {
    return this.client.request({
      endpoint: \`/tokens/users/\${encodeURIComponent(params.user_guid)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
      },
    });
  }

  /*Used to fetch the clear text token.*/
  public getCleartextByGuid(params: TokensGetCleartextByGuidParameters): Promise<TokensGetCleartextByGuidResponse> {
    return this.client.request({
      endpoint: \`/tokens/\${encodeURIComponent(params.guid)}/cleartext\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new API token for this user*/
  public post(params: TokensPostParameters): Promise<TokensPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/tokens',
      headers: params.headers,
      method: 'POST',
    });
  }

  public deleteByGuid(params: TokensDeleteByGuidParameters): Promise<TokensDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/tokens/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class UsersResource extends $Resource {
  /*Search for a specific user. You must specify at least 1 parameter - either a guid, email or token - and will receive back either 0 or 1 users.*/
  public get(params: UsersGetParameters = {}): Promise<UsersGetResponse> {
    return this.client.request({
      endpoint: '/users',
      headers: params.headers,
      method: 'GET',

      query: {
        email: params.email,
        guid: params.guid,
        nickname: params.nickname,
        token: params.token,
      },
    });
  }

  /*Returns information about the user with this guid.*/
  public getByGuid(params: UsersGetByGuidParameters): Promise<UsersGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/users/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Used to authenticate a user with an email address and password. Successful authentication returns an instance of the user model. Failed authorizations of any kind are returned as a generic error with code user_authorization_failed.*/
  public postAuthenticate(params: UsersPostAuthenticateParameters): Promise<UsersPostAuthenticateResponse> {
    return this.client.request({
      endpoint: '/users/authenticate',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Used to authenticate a user using a github access token. This is equivalent to running the following command to get the user info: curl -H 'Authorization: Bearer code' https://api.github.com/user*/
  public postAuthenticateGithub(params: UsersPostAuthenticateGithubParameters): Promise<UsersPostAuthenticateGithubResponse> {
    return this.client.request({
      endpoint: '/users/authenticate_github',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Create a new user.*/
  public post(params: UsersPostParameters): Promise<UsersPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/users',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Updates information about the user with the specified guid.*/
  public putByGuid(params: UsersPutByGuidParameters): Promise<UsersPutByGuidResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/users/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }
}

export class ValidationsResource extends $Resource {
  public post(params: ValidationsPostParameters): Promise<ValidationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/validations',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class VersionsResource extends $Resource {
  /*Search all versions of this application. Results are always paginated.*/
  public getByApplicationKey(params: VersionsGetByApplicationKeyParameters): Promise<VersionsGetByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
      },
    });
  }

  /*Retrieve a specific version of an application.*/
  public getByApplicationKeyAndVersion(params: VersionsGetByApplicationKeyAndVersionParameters): Promise<VersionsGetByApplicationKeyAndVersionResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new version for an application*/
  public postByVersion(params: VersionsPostByVersionParameters): Promise<VersionsPostByVersionResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Upsert a version of an application*/
  public putByApplicationKeyAndVersion(params: VersionsPutByApplicationKeyAndVersionParameters): Promise<VersionsPutByApplicationKeyAndVersionResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes a specific version.*/
  public deleteByApplicationKeyAndVersion(params: VersionsDeleteByApplicationKeyAndVersionParameters): Promise<VersionsDeleteByApplicationKeyAndVersionResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }

  /*Generates an example JSON document of the type with the specified name.*/
  public getExampleByApplicationKeyAndVersionAndTypeName(params: VersionsGetExampleByApplicationKeyAndVersionAndTypeNameParameters): Promise<VersionsGetExampleByApplicationKeyAndVersionAndTypeNameResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/example/\${encodeURIComponent(params.type_name)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        optional_fields: params.optional_fields,
        sub_type_name: params.sub_type_name,
      },
    });
  }
}

export class WatchesResource extends $Resource {
  /*Search attributes. Always paginated.*/
  public get(params: WatchesGetParameters): Promise<WatchesGetResponse> {
    return this.client.request({
      endpoint: '/watches',
      headers: params.headers,
      method: 'GET',

      query: {
        application_key: params.application_key,
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
        organization_key: params.organization_key,
        user_guid: params.user_guid,
      },
    });
  }

  /*Returns information about a specific watch.*/
  public getByGuid(params: WatchesGetByGuidParameters): Promise<WatchesGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/watches/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Quick check if a user is watching a specific application.*/
  public getCheck(params: WatchesGetCheckParameters): Promise<WatchesGetCheckResponse> {
    return this.client.request({
      endpoint: '/watches/check',
      headers: params.headers,
      method: 'GET',

      query: {
        application_key: params.application_key,
        organization_key: params.organization_key,
        user_guid: params.user_guid,
      },
    });
  }

  /*Create a new watch.*/
  public post(params: WatchesPostParameters): Promise<WatchesPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/watches',
      headers: params.headers,
      method: 'POST',
    });
  }

  public deleteByGuid(params: WatchesDeleteByGuidParameters): Promise<WatchesDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/watches/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export interface ClientInstance {
  applications: ApplicationsResource;
  attributes: AttributesResource;
  authentications: AuthenticationsResource;
  batchDownloadApplications: BatchDownloadApplicationsResource;
  changes: ChangesResource;
  code: CodeResource;
  domains: DomainsResource;
  emailVerificationConfirmationForms: EmailVerificationConfirmationFormsResource;
  generatorServices: GeneratorServicesResource;
  generatorWithServices: GeneratorWithServicesResource;
  healthchecks: HealthchecksResource;
  items: ItemsResource;
  memberships: MembershipsResource;
  membershipRequests: MembershipRequestsResource;
  organizations: OrganizationsResource;
  passwordResets: PasswordResetsResource;
  passwordResetRequests: PasswordResetRequestsResource;
  subscriptions: SubscriptionsResource;
  tokens: TokensResource;
  users: UsersResource;
  validations: ValidationsResource;
  versions: VersionsResource;
  watches: WatchesResource;
}

export function createClient(options: $HttpClientOptions): ClientInstance {
  return {
    applications: new ApplicationsResource(options),
    attributes: new AttributesResource(options),
    authentications: new AuthenticationsResource(options),
    batchDownloadApplications: new BatchDownloadApplicationsResource(options),
    changes: new ChangesResource(options),
    code: new CodeResource(options),
    domains: new DomainsResource(options),
    emailVerificationConfirmationForms: new EmailVerificationConfirmationFormsResource(options),
    generatorServices: new GeneratorServicesResource(options),
    generatorWithServices: new GeneratorWithServicesResource(options),
    healthchecks: new HealthchecksResource(options),
    items: new ItemsResource(options),
    memberships: new MembershipsResource(options),
    membershipRequests: new MembershipRequestsResource(options),
    organizations: new OrganizationsResource(options),
    passwordResets: new PasswordResetsResource(options),
    passwordResetRequests: new PasswordResetRequestsResource(options),
    subscriptions: new SubscriptionsResource(options),
    tokens: new TokensResource(options),
    users: new UsersResource(options),
    validations: new ValidationsResource(options),
    versions: new VersionsResource(options),
    watches: new WatchesResource(options),
  };
}"
`;

exports[`POST /invocations/:key ts_sdk_v2: io/apibuilder/api/v0/apibuilder-api.ts 1`] = `
"/* eslint-disable max-classes-per-file, max-len, no-param-reassign */
import { stringify } from '@flowio/web-sdk';

export interface $FetchOptions {
  body?: string;
  headers?: $HttpHeaders;
  method?: $HttpMethod;
}

export type $FetchFunction = (url: string, options?: $FetchOptions) => Promise<Response>;

export interface $HttpHeaders {
  [key: string]: string;
}

export type $HttpMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'CONNECT' | 'OPTIONS' | 'TRACE';

export interface $HttpQuery {
  [key: string]: string | number | boolean | string[] | number[] | boolean[] | undefined | null;
}

export interface $HttpRequest {
  body?: any;
  url: string;
  headers: $HttpHeaders;
  method: $HttpMethod;
}

export interface $HttpRequestOptions {
  body?: any;
  endpoint: string;
  headers?: $HttpHeaders;
  method: $HttpMethod;
  query?: $HttpQuery;
}

export interface $HttpResponse<B = any, S = number, O = boolean> {
  body: B;
  headers: $HttpHeaders;
  ok: O;
  request: $HttpRequest;
  status: S;
  statusText: string;
}

export type $HttpContinue<T> = $HttpResponse<T, 100, false>;
export type $HttpSwitchingProtocol<T> = $HttpResponse<T, 101, false>;
export type $HttpProcessing<T> = $HttpResponse<T, 102, false>;
export type $HttpOk<T> = $HttpResponse<T, 200, true>;
export type $HttpCreated<T> = $HttpResponse<T, 201, true>;
export type $HttpAccepted<T> = $HttpResponse<T, 202, true>;
export type $HttpNonAuthoritativeInformation<T> = $HttpResponse<T, 203, true>;
export type $HttpNoContent<T> = $HttpResponse<T, 204, true>;
export type $HttpResetContent<T> = $HttpResponse<T, 205, true>;
export type $HttpPartialContent<T> = $HttpResponse<T, 206, true>;
export type $HttpMultiStatus<T> = $HttpResponse<T, 207, true>;
export type $HttpAlreadyReported<T> = $HttpResponse<T, 208, true>;
export type $HttpImUsed<T> = $HttpResponse<T, 226, true>;
export type $HttpMultipleChoices<T> = $HttpResponse<T, 300, false>;
export type $HttpMovedPermanently<T> = $HttpResponse<T, 301, false>;
export type $HttpFound<T> = $HttpResponse<T, 302, false>;
export type $HttpSeeOther<T> = $HttpResponse<T, 303, false>;
export type $HttpNotModified<T> = $HttpResponse<T, 304, false>;
export type $HttpUseProxy<T> = $HttpResponse<T, 305, false>;
export type $HttpTemporaryRedirect<T> = $HttpResponse<T, 307, false>;
export type $HttpPermanentRedirect<T> = $HttpResponse<T, 308, false>;
export type $HttpBadRequest<T> = $HttpResponse<T, 400, false>;
export type $HttpUnauthorized<T> = $HttpResponse<T, 401, false>;
export type $HttpPaymentRequired<T> = $HttpResponse<T, 402, false>;
export type $HttpForbidden<T> = $HttpResponse<T, 403, false>;
export type $HttpNotFound<T> = $HttpResponse<T, 404, false>;
export type $HttpMethodNotAllowed<T> = $HttpResponse<T, 405, false>;
export type $HttpNotAcceptable<T> = $HttpResponse<T, 406, false>;
export type $HttpProxyAuthenticationRequired<T> = $HttpResponse<T, 407, false>;
export type $HttpRequestTimeout<T> = $HttpResponse<T, 408, false>;
export type $HttpConflict<T> = $HttpResponse<T, 409, false>;
export type $HttpGone<T> = $HttpResponse<T, 410, false>;
export type $HttpLengthRequired<T> = $HttpResponse<T, 411, false>;
export type $HttpPreconditionFailed<T> = $HttpResponse<T, 412, false>;
export type $HttpRequestEntityTooLarge<T> = $HttpResponse<T, 413, false>;
export type $HttpRequestUriTooLong<T> = $HttpResponse<T, 414, false>;
export type $HttpUnsupportedMediaType<T> = $HttpResponse<T, 415, false>;
export type $HttpRequestedRangeNotSatisfiable<T> = $HttpResponse<T, 416, false>;
export type $HttpExpectationFailed<T> = $HttpResponse<T, 417, false>;
export type $HttpMisdirectedRequest<T> = $HttpResponse<T, 421, false>;
export type $HttpUnprocessableEntity<T> = $HttpResponse<T, 422, false>;
export type $HttpLocked<T> = $HttpResponse<T, 423, false>;
export type $HttpFailedDependency<T> = $HttpResponse<T, 424, false>;
export type $HttpUpgradeRequired<T> = $HttpResponse<T, 426, false>;
export type $HttpPreconditionRequired<T> = $HttpResponse<T, 428, false>;
export type $HttpTooManyRequests<T> = $HttpResponse<T, 429, false>;
export type $HttpRequestHeaderFieldsTooLarge<T> = $HttpResponse<T, 431, false>;
export type $HttpNoResponse<T> = $HttpResponse<T, 444, false>;
export type $HttpRetryWith<T> = $HttpResponse<T, 449, false>;
export type $HttpBlockedByWindowsParentalControls<T> = $HttpResponse<T, 450, false>;
export type $HttpUnavailableForLegalReasons<T> = $HttpResponse<T, 451, false>;
export type $HttpClientClosedRequest<T> = $HttpResponse<T, 499, false>;
export type $HttpInternalServerError<T> = $HttpResponse<T, 500, false>;
export type $HttpNotImplemented<T> = $HttpResponse<T, 501, false>;
export type $HttpBadGateway<T> = $HttpResponse<T, 502, false>;
export type $HttpServiceUnavailable<T> = $HttpResponse<T, 503, false>;
export type $HttpGatewayTimeout<T> = $HttpResponse<T, 504, false>;
export type $HttpHttpVersionNotSupported<T> = $HttpResponse<T, 505, false>;
export type $HttpInsufficientStorage<T> = $HttpResponse<T, 507, false>;
export type $HttpLoopDetected<T> = $HttpResponse<T, 508, false>;
export type $HttpBandwidthLimitExceeded<T> = $HttpResponse<T, 509, false>;
export type $HttpNotExtended<T> = $HttpResponse<T, 510, false>;
export type $HttpNetworkAuthenticationRequired<T> = $HttpResponse<T, 511, false>;
export type $HttpNetworkReadTimeoutError<T> = $HttpResponse<T, 598, false>;
export type $HttpNetworkConnectTimeoutError<T> = $HttpResponse<T, 599, false>;

export interface $HttpClientOptions {
  fetch: $FetchFunction;
}

export function isResponseEmpty(response: Response): boolean {
  const contentLength = response.headers.get('Content-Length');
  return response.status === 204 || (contentLength != null && Number.parseInt(contentLength, 10) === 0);
}

export function isResponseJson(response: Response): boolean {
  const contentType = response.headers.get('Content-Type');
  return contentType != null && contentType.indexOf('json') >= 0;
}

export function parseJson(response: Response): Promise<any> {
  return !isResponseEmpty(response) && isResponseJson(response) ? response.json() : Promise.resolve();
}

export function parseHeaders(response: Response): Record<string, string> {
  const headers: Record<string, string> = {};

  response.headers.forEach((value, key) => {
    headers[key.toLowerCase()] = value;
  });

  return headers;
}

export function stripQuery(query: $HttpQuery = {}): Record<string, any> {
  const initialValue: Record<string, unknown> = {};

  return Object.keys(query).reduce((previousValue, key) => {
    const value = query[key];

    if (value != null)
      previousValue[key] = value;

    return previousValue;
  }, initialValue);
}

export class $HttpClient {
  private options: $HttpClientOptions;

  constructor(options: $HttpClientOptions) {
    this.options = options;
  }

  public request(options: $HttpRequestOptions): Promise<$HttpResponse<any, any, any>> {
    const finalUrl: URL = new URL('https://api.apibuilder.io');
    finalUrl.pathname = options.endpoint;
    finalUrl.search = stringify(stripQuery(options.query));

    const finalHeaders: $HttpHeaders = {
      accept: 'application/json',
      'content-type': 'application/json',
      ...options.headers,
    };

    const request: $HttpRequest = {
      body: options.body,
      headers: finalHeaders,
      method: options.method,
      url: finalUrl.toString(),
    };

    return this.options.fetch(request.url, {
      body: JSON.stringify(request.body),
      headers: request.headers,
      method: request.method,
    }).then((response) => {
      return parseJson(response).then((json) => {
        return {
          body: json,
          headers: parseHeaders(response),
          ok: response.ok,
          request,
          status: response.status,
          statusText: response.statusText,
        };
      });
    });
  }
}

export class $Resource {
  protected client: $HttpClient;

  constructor(options: $HttpClientOptions) {
    this.client = new $HttpClient(options);
  }
}

export interface ApplicationsGetMetadataAndVersionsByApplicationKeyParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface ApplicationsGetParameters {
  headers?: $HttpHeaders;
  /*The organization key for which to search applications*/
  orgKey: string;
  /*The name of an application. Case in-sensitive. Exact match*/
  name?: string;
  /*The guid of an application. Exact match*/
  guid?: string;
  /*The key of an application. Case in-sensitive. Exact match*/
  key?: string;
  /*If true, we return applications that have at least one version. If false, we return applications that have no versions in the system*/
  has_version?: boolean;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
  sort_by?: io.apibuilder.api.v0.enums.AppSortBy;
  order?: io.apibuilder.api.v0.enums.SortOrder;
}

export interface ApplicationsPostParameters {
  body: io.apibuilder.api.v0.models.ApplicationForm;
  headers?: $HttpHeaders;
  orgKey: string;
}

export interface ApplicationsPutByApplicationKeyParameters {
  body: io.apibuilder.api.v0.models.ApplicationForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface ApplicationsDeleteByApplicationKeyParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface ApplicationsPostMoveByApplicationKeyParameters {
  body: io.apibuilder.api.v0.models.MoveForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
}

export interface AttributesGetParameters {
  headers?: $HttpHeaders;
  /*Find the watch with this guid.*/
  guid?: string;
  /*Find attributes with this name. Case in-sensitive. Exact match*/
  name?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface AttributesGetByNameParameters {
  headers?: $HttpHeaders;
  name: string;
}

export interface AttributesPostParameters {
  body: io.apibuilder.api.v0.models.AttributeForm;
  headers?: $HttpHeaders;
}

export interface AttributesDeleteByNameParameters {
  headers?: $HttpHeaders;
  name: string;
}

export interface AuthenticationsGetSessionByIdParameters {
  headers?: $HttpHeaders;
  id: string;
}

export interface BatchDownloadApplicationsPostParameters {
  body: io.apibuilder.api.v0.models.BatchDownloadApplicationsForm;
  headers?: $HttpHeaders;
  orgKey: string;
}

export interface ChangesGetParameters {
  headers?: $HttpHeaders;
  /*Filter changes to those made for the organization with this key.*/
  org_key?: string;
  /*Filter changes to those made for the application with this key.*/
  application_key?: string;
  /*Filter changes to those made from this version.*/
  from?: string;
  /*Filter changes to those made to this version.*/
  to?: string;
  /*The type of diff to return.*/
  type?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface CodePostFormParameters {
  body: io.apibuilder.api.v0.models.CodeForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  version: string;
}

export interface CodeGetByGeneratorKeyParameters {
  headers?: $HttpHeaders;
  /*The organization key for which to generate code*/
  orgKey: string;
  /*The application key for which to generate code*/
  applicationKey: string;
  /*The version of this application. Can be 'latest'*/
  version: string;
  /*The key of the generator to invoke*/
  generatorKey: string;
}

export interface CodePostByGeneratorKeyParameters {
  body: io.apibuilder.api.v0.models.CodeForm;
  headers?: $HttpHeaders;
  /*The organization key for which to generate code*/
  orgKey: string;
  /*The application key for which to generate code*/
  applicationKey: string;
  /*The version of this application. Can be 'latest'*/
  version: string;
  /*The key of the generator to invoke*/
  generatorKey: string;
}

export interface DomainsPostParameters {
  body: io.apibuilder.api.v0.models.Domain;
  headers?: $HttpHeaders;
  orgKey: string;
}

export interface DomainsDeleteByNameParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  name: string;
}

export interface EmailVerificationConfirmationFormsPostParameters {
  body: io.apibuilder.api.v0.models.EmailVerificationConfirmationForm;
  headers?: $HttpHeaders;
}

export interface GeneratorServicesGetParameters {
  headers?: $HttpHeaders;
  guid?: string;
  uri?: string;
  generator_key?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface GeneratorServicesGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface GeneratorServicesPostParameters {
  body: io.apibuilder.api.v0.models.GeneratorServiceForm;
  headers?: $HttpHeaders;
}

export interface GeneratorServicesDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface GeneratorWithServicesGetParameters {
  headers?: $HttpHeaders;
  /*Filter to generator with this guid*/
  guid?: string;
  /*Filter to generator from this service*/
  service_guid?: string;
  /*Filter to generator from this service URI*/
  service_uri?: string;
  /*Filter to generators that use this attribute*/
  attribute_name?: string;
  /*Filter to generator with this key*/
  key?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface GeneratorWithServicesGetByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
}

export interface HealthchecksGetHealthcheckParameters {
  headers?: $HttpHeaders;
}

export interface HealthchecksGetMigrateParameters {
  headers?: $HttpHeaders;
}

export interface ItemsGetParameters {
  headers?: $HttpHeaders;
  /*The search query. At the moment, we do case insensitive exact match search.*/
  q?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface ItemsGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipsGetParameters {
  headers?: $HttpHeaders;
  org_guid?: string;
  org_key?: string;
  user_guid?: string;
  role?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface MembershipsGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipsDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipRequestsGetParameters {
  headers?: $HttpHeaders;
  org_guid?: string;
  org_key?: string;
  user_guid?: string;
  role?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface MembershipRequestsPostParameters {
  headers?: $HttpHeaders;
  org_guid: string;
  user_guid: string;
  role: string;
}

export interface MembershipRequestsPostAcceptByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface MembershipRequestsPostDeclineByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface OrganizationsGetParameters {
  headers?: $HttpHeaders;
  /*Finds the organization with this guid, if any*/
  guid?: string;
  /*If specified, restricts to organizations that this user is specifically a member of (e.g. will exclude public organizations with which the user does not have a direct membership).*/
  user_guid?: string;
  /*Find organizations with this key. Case in-sensitive. Exact match*/
  key?: string;
  /*Find organizations with this name. Case in-sensitive. Exact match*/
  name?: string;
  /*Find organizations with this namespace. Case in-sensitive. Exact match*/
  namespace?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface OrganizationsGetByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
}

export interface OrganizationsPostParameters {
  body: io.apibuilder.api.v0.models.OrganizationForm;
  headers?: $HttpHeaders;
}

export interface OrganizationsPutByKeyParameters {
  body: io.apibuilder.api.v0.models.OrganizationForm;
  headers?: $HttpHeaders;
  key: string;
}

export interface OrganizationsDeleteByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
}

export interface OrganizationsGetAttributesByKeyParameters {
  headers?: $HttpHeaders;
  key: string;
  /*Find the values for the attribute with this name.*/
  name?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface OrganizationsGetAttributesByKeyAndNameParameters {
  headers?: $HttpHeaders;
  key: string;
  name: string;
}

export interface OrganizationsPutAttributesByKeyAndNameParameters {
  body: io.apibuilder.api.v0.models.AttributeValueForm;
  headers?: $HttpHeaders;
  key: string;
  name: string;
}

export interface OrganizationsDeleteAttributesByKeyAndNameParameters {
  headers?: $HttpHeaders;
  key: string;
  name: string;
}

export interface PasswordResetsPostParameters {
  body: io.apibuilder.api.v0.models.PasswordReset;
  headers?: $HttpHeaders;
}

export interface PasswordResetRequestsPostParameters {
  body: io.apibuilder.api.v0.models.PasswordResetRequest;
  headers?: $HttpHeaders;
}

export interface SubscriptionsGetParameters {
  headers?: $HttpHeaders;
  /*Find the subscription with this guid.*/
  guid?: string;
  /*Find subscriptions for this organization.*/
  organization_key?: string;
  /*Find subscriptions for this user.*/
  user_guid?: string;
  /*Find subscriptions for this publication.*/
  publication?: io.apibuilder.api.v0.enums.Publication;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface SubscriptionsGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface SubscriptionsPostParameters {
  body: io.apibuilder.api.v0.models.SubscriptionForm;
  headers?: $HttpHeaders;
}

export interface SubscriptionsDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface TokensGetUsersByUserGuidParameters {
  headers?: $HttpHeaders;
  user_guid: string;
  guid?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface TokensGetCleartextByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface TokensPostParameters {
  body: io.apibuilder.api.v0.models.TokenForm;
  headers?: $HttpHeaders;
}

export interface TokensDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface UsersGetParameters {
  headers?: $HttpHeaders;
  /*Find user with this guid. Exact match*/
  guid?: string;
  /*Find user with this email address. Case in-sensitive. Exact match*/
  email?: string;
  /*Find user with the specified nickname. For users that register via GitHub, this will be their GitHub username. Case in-sensitive. Exact match*/
  nickname?: string;
  /*Find the user with this API token. Exact match*/
  token?: string;
}

export interface UsersGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface UsersPostAuthenticateParameters {
  headers?: $HttpHeaders;
  email: string;
  password: string;
}

export interface UsersPostAuthenticateGithubParameters {
  headers?: $HttpHeaders;
  /*The GitHub assigned oauth token*/
  token: string;
}

export interface UsersPostParameters {
  body: io.apibuilder.api.v0.models.UserForm;
  headers?: $HttpHeaders;
}

export interface UsersPutByGuidParameters {
  body: io.apibuilder.api.v0.models.UserUpdateForm;
  headers?: $HttpHeaders;
  guid: string;
}

export interface ValidationsPostParameters {
  body: string;
  headers?: $HttpHeaders;
}

export interface VersionsGetByApplicationKeyParameters {
  headers?: $HttpHeaders;
  /*The organization key for which to search versions*/
  orgKey: string;
  /*The application key for which to search versions*/
  applicationKey: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface VersionsGetByApplicationKeyAndVersionParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  /*The version of tthis application to download, or the keyword latest to get the latest version*/
  version: string;
}

export interface VersionsPostByVersionParameters {
  body: io.apibuilder.api.v0.models.VersionForm;
  headers?: $HttpHeaders;
  orgKey: string;
  version: string;
}

export interface VersionsPutByApplicationKeyAndVersionParameters {
  body: io.apibuilder.api.v0.models.VersionForm;
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  version: string;
}

export interface VersionsDeleteByApplicationKeyAndVersionParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  version: string;
}

export interface VersionsGetExampleByApplicationKeyAndVersionAndTypeNameParameters {
  headers?: $HttpHeaders;
  orgKey: string;
  applicationKey: string;
  /*The version of this application to download, or the keyword latest to get the latest version*/
  version: string;
  /*The name of the type (e.g. model name) for which you would like to generate a sample json document*/
  type_name: string;
  /*The name of the sub-type for which you would like to generate a sample json document, e.g. a specific type of a union*/
  sub_type_name?: string;
  /*If true, we generate sample data for all optional fields. Otherwise the generated sample will contain only required fields, where applicable*/
  optional_fields?: boolean;
}

export interface WatchesGetParameters {
  headers?: $HttpHeaders;
  /*Find the watch with this guid.*/
  guid?: string;
  /*Find attributes for this user.*/
  user_guid?: string;
  /*Find attributes for this organization.*/
  organization_key?: string;
  /*Find attributes for this application.*/
  application_key?: string;
  /*The number of records to return*/
  limit?: number;
  /*Used to paginate. First page of results is 0.*/
  offset?: number;
}

export interface WatchesGetByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export interface WatchesGetCheckParameters {
  headers?: $HttpHeaders;
  /*The user for which we are checking. API returns false if the user guid is not provided*/
  user_guid?: string;
  organization_key: string;
  application_key: string;
}

export interface WatchesPostParameters {
  body: io.apibuilder.api.v0.models.WatchForm;
  headers?: $HttpHeaders;
}

export interface WatchesDeleteByGuidParameters {
  headers?: $HttpHeaders;
  guid: string;
}

export type ApplicationsGetMetadataAndVersionsByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.ApplicationMetadataVersion[]> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyResponse = $HttpOk<string> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type ApplicationsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Application[]>;
export type ApplicationsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Application> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ApplicationsPutByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Application> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ApplicationsDeleteByApplicationKeyResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type ApplicationsPostMoveByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Application> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type AttributesGetResponse = $HttpOk<io.apibuilder.api.v0.models.Attribute[]>;
export type AttributesGetByNameResponse = $HttpOk<io.apibuilder.api.v0.models.Attribute> | $HttpNotFound<undefined>;
export type AttributesPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Attribute> | $HttpUnauthorized<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type AttributesDeleteByNameResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type AuthenticationsGetSessionByIdResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpNotFound<undefined>;
export type BatchDownloadApplicationsPostResponse = $HttpCreated<io.apibuilder.api.v0.models.BatchDownloadApplications> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ChangesGetResponse = $HttpOk<io.apibuilder.api.v0.models.Change[]>;
export type CodePostFormResponse = $HttpOk<io.apibuilder.generator.v0.models.InvocationForm> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type CodeGetByGeneratorKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Code> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type CodePostByGeneratorKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Code> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type DomainsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Domain> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type DomainsDeleteByNameResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type EmailVerificationConfirmationFormsPostResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type GeneratorServicesGetResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorService[]>;
export type GeneratorServicesGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorService> | $HttpNotFound<undefined>;
export type GeneratorServicesPostResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorService> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type GeneratorServicesDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type GeneratorWithServicesGetResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorWithService[]>;
export type GeneratorWithServicesGetByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.GeneratorWithService> | $HttpNotFound<undefined>;
export type HealthchecksGetHealthcheckResponse = $HttpOk<io.apibuilder.generator.v0.models.Healthcheck>;
export type HealthchecksGetMigrateResponse = $HttpOk<Record<string, string>>;
export type ItemsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Item[]>;
export type ItemsGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Item> | $HttpNotFound<undefined>;
export type MembershipsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Membership[]>;
export type MembershipsGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Membership> | $HttpNotFound<undefined>;
export type MembershipsDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type MembershipRequestsGetResponse = $HttpOk<io.apibuilder.api.v0.models.MembershipRequest[]>;
export type MembershipRequestsPostResponse = $HttpOk<io.apibuilder.api.v0.models.MembershipRequest> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type MembershipRequestsPostAcceptByGuidResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type MembershipRequestsPostDeclineByGuidResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Organization[]>;
export type OrganizationsGetByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Organization> | $HttpNotFound<undefined>;
export type OrganizationsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Organization> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsPutByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Organization> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsDeleteByKeyResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type OrganizationsGetAttributesByKeyResponse = $HttpOk<io.apibuilder.api.v0.models.AttributeValue[]>;
export type OrganizationsGetAttributesByKeyAndNameResponse = $HttpOk<io.apibuilder.api.v0.models.AttributeValue> | $HttpNotFound<undefined>;
export type OrganizationsPutAttributesByKeyAndNameResponse = $HttpOk<io.apibuilder.api.v0.models.AttributeValue> | $HttpCreated<io.apibuilder.api.v0.models.AttributeValue> | $HttpNotFound<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type OrganizationsDeleteAttributesByKeyAndNameResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type PasswordResetsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type PasswordResetRequestsPostResponse = $HttpNoContent<undefined> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type SubscriptionsGetResponse = $HttpOk<io.apibuilder.api.v0.models.Subscription[]>;
export type SubscriptionsGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Subscription> | $HttpNotFound<undefined>;
export type SubscriptionsPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Subscription> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type SubscriptionsDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type TokensGetUsersByUserGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Token[]>;
export type TokensGetCleartextByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.CleartextToken> | $HttpNotFound<undefined>;
export type TokensPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Token> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type TokensDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type UsersGetResponse = $HttpOk<io.apibuilder.api.v0.models.User[]>;
export type UsersGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.User> | $HttpNotFound<undefined>;
export type UsersPostAuthenticateResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type UsersPostAuthenticateGithubResponse = $HttpOk<io.apibuilder.api.v0.models.Authentication> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type UsersPostResponse = $HttpOk<io.apibuilder.api.v0.models.User> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type UsersPutByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.User> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type ValidationsPostResponse = $HttpOk<io.apibuilder.api.v0.models.Validation>;
export type VersionsGetByApplicationKeyResponse = $HttpOk<io.apibuilder.api.v0.models.Version[]>;
export type VersionsGetByApplicationKeyAndVersionResponse = $HttpOk<io.apibuilder.api.v0.models.Version> | $HttpNotFound<undefined>;
export type VersionsPostByVersionResponse = $HttpOk<io.apibuilder.api.v0.models.Version> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type VersionsPutByApplicationKeyAndVersionResponse = $HttpOk<io.apibuilder.api.v0.models.Version> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type VersionsDeleteByApplicationKeyAndVersionResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;
export type VersionsGetExampleByApplicationKeyAndVersionAndTypeNameResponse = $HttpOk<any/*object*/> | $HttpNotFound<undefined>;
export type WatchesGetResponse = $HttpOk<io.apibuilder.api.v0.models.Watch[]>;
export type WatchesGetByGuidResponse = $HttpOk<io.apibuilder.api.v0.models.Watch> | $HttpNotFound<undefined>;
export type WatchesGetCheckResponse = $HttpOk<boolean>;
export type WatchesPostResponse = $HttpCreated<io.apibuilder.api.v0.models.Watch> | $HttpConflict<io.apibuilder.api.v0.models.Error[]>;
export type WatchesDeleteByGuidResponse = $HttpNoContent<undefined> | $HttpUnauthorized<undefined> | $HttpNotFound<undefined>;

export class ApplicationsResource extends $Resource {
  /*Returns the versions assocoated with the specified application. The latest version is the first result returned.*/
  public getMetadataAndVersionsByApplicationKey(params: ApplicationsGetMetadataAndVersionsByApplicationKeyParameters): Promise<ApplicationsGetMetadataAndVersionsByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/metadata/\${encodeURIComponent(params.applicationKey)}/versions\`,
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
      },
    });
  }

  /*Returns the latest version number as a string*/
  public getMetadataAndVersionsAndLatestTxtByApplicationKey(
    params: ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyParameters,
  ): Promise<ApplicationsGetMetadataAndVersionsAndLatestTxtByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/metadata/\${encodeURIComponent(params.applicationKey)}/versions/latest.txt\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Search all applications. Results are always paginated.*/
  public get(params: ApplicationsGetParameters): Promise<ApplicationsGetResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        has_version: params.has_version,
        key: params.key,
        limit: params.limit,
        name: params.name,
        offset: params.offset,
        order: params.order,
        sort_by: params.sort_by,
      },
    });
  }

  /*Create an application.*/
  public post(params: ApplicationsPostParameters): Promise<ApplicationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Updates an application.*/
  public putByApplicationKey(params: ApplicationsPutByApplicationKeyParameters): Promise<ApplicationsPutByApplicationKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes a specific application and its associated versions.*/
  public deleteByApplicationKey(params: ApplicationsDeleteByApplicationKeyParameters): Promise<ApplicationsDeleteByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }

  /*Moves application to a new organization.*/
  public postMoveByApplicationKey(params: ApplicationsPostMoveByApplicationKeyParameters): Promise<ApplicationsPostMoveByApplicationKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/move\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class AttributesResource extends $Resource {
  /*Search all attributes. Results are always paginated.*/
  public get(params: AttributesGetParameters): Promise<AttributesGetResponse> {
    return this.client.request({
      endpoint: '/attributes',
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        limit: params.limit,
        name: params.name,
        offset: params.offset,
      },
    });
  }

  /*Returns the attribute with this name.*/
  public getByName(params: AttributesGetByNameParameters): Promise<AttributesGetByNameResponse> {
    return this.client.request({
      endpoint: \`/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new attribute.*/
  public post(params: AttributesPostParameters): Promise<AttributesPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/attributes',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Deletes the attribute with this name. Only the user who created an attribute can delete it.*/
  public deleteByName(params: AttributesDeleteByNameParameters): Promise<AttributesDeleteByNameResponse> {
    return this.client.request({
      endpoint: \`/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class AuthenticationsResource extends $Resource {
  public getSessionById(params: AuthenticationsGetSessionByIdParameters): Promise<AuthenticationsGetSessionByIdResponse> {
    return this.client.request({
      endpoint: \`/authentications/session/\${encodeURIComponent(params.id)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class BatchDownloadApplicationsResource extends $Resource {
  /*Retrieve multiple applications in one api call.*/
  public post(params: BatchDownloadApplicationsPostParameters): Promise<BatchDownloadApplicationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/batch/download/applications\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class ChangesResource extends $Resource {
  public get(params: ChangesGetParameters): Promise<ChangesGetResponse> {
    return this.client.request({
      endpoint: '/changes',
      headers: params.headers,
      method: 'GET',

      query: {
        application_key: params.application_key,
        from: params.from,
        limit: params.limit,
        offset: params.offset,
        org_key: params.org_key,
        to: params.to,
        type: params.type,
      },
    });
  }
}

export class CodeResource extends $Resource {
  /*Create an invocation form. This is useful primarily for debugging when you want to see exactly what content is being forwarded to the generator*/
  public postForm(params: CodePostFormParameters): Promise<CodePostFormResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/form\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Generate code for a specific version of an application.*/
  public getByGeneratorKey(params: CodeGetByGeneratorKeyParameters): Promise<CodeGetByGeneratorKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/\${encodeURIComponent(params.generatorKey)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Generate code for a specific version of an application.*/
  public postByGeneratorKey(params: CodePostByGeneratorKeyParameters): Promise<CodePostByGeneratorKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/\${encodeURIComponent(params.generatorKey)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class DomainsResource extends $Resource {
  /*Add a domain to this organization*/
  public post(params: DomainsPostParameters): Promise<DomainsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/domains/\${encodeURIComponent(params.orgKey)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Remove this domain from this organization*/
  public deleteByName(params: DomainsDeleteByNameParameters): Promise<DomainsDeleteByNameResponse> {
    return this.client.request({
      endpoint: \`/domains/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class EmailVerificationConfirmationFormsResource extends $Resource {
  /*Validate an email address using a token.*/
  public post(params: EmailVerificationConfirmationFormsPostParameters): Promise<EmailVerificationConfirmationFormsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/email_verification_confirmations',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class GeneratorServicesResource extends $Resource {
  /*List all generator services*/
  public get(params: GeneratorServicesGetParameters): Promise<GeneratorServicesGetResponse> {
    return this.client.request({
      endpoint: '/generator_services',
      headers: params.headers,
      method: 'GET',

      query: {
        generator_key: params.generator_key,
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
        uri: params.uri,
      },
    });
  }

  public getByGuid(params: GeneratorServicesGetByGuidParameters): Promise<GeneratorServicesGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/generator_services/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  public post(params: GeneratorServicesPostParameters): Promise<GeneratorServicesPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/generator_services',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Deletes a generator service.*/
  public deleteByGuid(params: GeneratorServicesDeleteByGuidParameters): Promise<GeneratorServicesDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/generator_services/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class GeneratorWithServicesResource extends $Resource {
  /*List all available generators*/
  public get(params: GeneratorWithServicesGetParameters): Promise<GeneratorWithServicesGetResponse> {
    return this.client.request({
      endpoint: '/generators',
      headers: params.headers,
      method: 'GET',

      query: {
        attribute_name: params.attribute_name,
        guid: params.guid,
        key: params.key,
        limit: params.limit,
        offset: params.offset,
        service_guid: params.service_guid,
        service_uri: params.service_uri,
      },
    });
  }

  public getByKey(params: GeneratorWithServicesGetByKeyParameters): Promise<GeneratorWithServicesGetByKeyResponse> {
    return this.client.request({
      endpoint: \`/generators/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class HealthchecksResource extends $Resource {
  public getHealthcheck(params: HealthchecksGetHealthcheckParameters = {}): Promise<HealthchecksGetHealthcheckResponse> {
    return this.client.request({
      endpoint: '/_internal_/healthcheck',
      headers: params.headers,
      method: 'GET',
    });
  }

  public getMigrate(params: HealthchecksGetMigrateParameters = {}): Promise<HealthchecksGetMigrateResponse> {
    return this.client.request({
      endpoint: '/_internal_/migrate',
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class ItemsResource extends $Resource {
  public get(params: ItemsGetParameters): Promise<ItemsGetResponse> {
    return this.client.request({
      endpoint: '/items',
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
        q: params.q,
      },
    });
  }

  public getByGuid(params: ItemsGetByGuidParameters): Promise<ItemsGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/items/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }
}

export class MembershipsResource extends $Resource {
  /*Search all memberships. Results are always paginated.*/
  public get(params: MembershipsGetParameters): Promise<MembershipsGetResponse> {
    return this.client.request({
      endpoint: '/memberships',
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
        org_guid: params.org_guid,
        org_key: params.org_key,
        role: params.role,
        user_guid: params.user_guid,
      },
    });
  }

  public getByGuid(params: MembershipsGetByGuidParameters): Promise<MembershipsGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/memberships/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  public deleteByGuid(params: MembershipsDeleteByGuidParameters): Promise<MembershipsDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/memberships/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class MembershipRequestsResource extends $Resource {
  /*Search all membership requests. Results are always paginated.*/
  public get(params: MembershipRequestsGetParameters): Promise<MembershipRequestsGetResponse> {
    return this.client.request({
      endpoint: '/membership_requests',
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
        org_guid: params.org_guid,
        org_key: params.org_key,
        role: params.role,
        user_guid: params.user_guid,
      },
    });
  }

  /*Create a membership request*/
  public post(params: MembershipRequestsPostParameters): Promise<MembershipRequestsPostResponse> {
    return this.client.request({
      endpoint: '/membership_requests',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Accepts this membership request. User will become a member of the specified organization.*/
  public postAcceptByGuid(params: MembershipRequestsPostAcceptByGuidParameters): Promise<MembershipRequestsPostAcceptByGuidResponse> {
    return this.client.request({
      endpoint: \`/membership_requests/\${encodeURIComponent(params.guid)}/accept\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Declines this membership request. User will NOT become a member of the specified organization.*/
  public postDeclineByGuid(params: MembershipRequestsPostDeclineByGuidParameters): Promise<MembershipRequestsPostDeclineByGuidResponse> {
    return this.client.request({
      endpoint: \`/membership_requests/\${encodeURIComponent(params.guid)}/decline\`,
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class OrganizationsResource extends $Resource {
  /*Search all organizations. Results are always paginated.*/
  public get(params: OrganizationsGetParameters): Promise<OrganizationsGetResponse> {
    return this.client.request({
      endpoint: '/organizations',
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        key: params.key,
        limit: params.limit,
        name: params.name,
        namespace: params.namespace,
        offset: params.offset,
        user_guid: params.user_guid,
      },
    });
  }

  /*Returns the organization with this key.*/
  public getByKey(params: OrganizationsGetByKeyParameters): Promise<OrganizationsGetByKeyResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new organization.*/
  public post(params: OrganizationsPostParameters): Promise<OrganizationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/organizations',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Update an organization.*/
  public putByKey(params: OrganizationsPutByKeyParameters): Promise<OrganizationsPutByKeyResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes an organization and all of its associated applications.*/
  public deleteByKey(params: OrganizationsDeleteByKeyParameters): Promise<OrganizationsDeleteByKeyResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }

  /*Returns all attribute values for this organization. Results are always paginated.*/
  public getAttributesByKey(params: OrganizationsGetAttributesByKeyParameters): Promise<OrganizationsGetAttributesByKeyResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes\`,
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        name: params.name,
        offset: params.offset,
      },
    });
  }

  /*Returns the attribute value with this name.*/
  public getAttributesByKeyAndName(params: OrganizationsGetAttributesByKeyAndNameParameters): Promise<OrganizationsGetAttributesByKeyAndNameResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create or update a new attribute value.*/
  public putAttributesByKeyAndName(params: OrganizationsPutAttributesByKeyAndNameParameters): Promise<OrganizationsPutAttributesByKeyAndNameResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes the attribute value with the specified name. Only the user who created an attribute value can delete it.*/
  public deleteAttributesByKeyAndName(params: OrganizationsDeleteAttributesByKeyAndNameParameters): Promise<OrganizationsDeleteAttributesByKeyAndNameResponse> {
    return this.client.request({
      endpoint: \`/organizations/\${encodeURIComponent(params.key)}/attributes/\${encodeURIComponent(params.name)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class PasswordResetsResource extends $Resource {
  /*Change the password for this token. If the token is invalid, has been used, or otherwise no longer can be applied, errors will be returned as 409s. A 204 represents that the user has successfully changed their password.*/
  public post(params: PasswordResetsPostParameters): Promise<PasswordResetsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/password_resets',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class PasswordResetRequestsResource extends $Resource {
  /*Create a new password reset. This will send the user an email with a link to reset their password.*/
  public post(params: PasswordResetRequestsPostParameters): Promise<PasswordResetRequestsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/password_reset_requests',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class SubscriptionsResource extends $Resource {
  /*Search subscriptions. Always paginated.*/
  public get(params: SubscriptionsGetParameters): Promise<SubscriptionsGetResponse> {
    return this.client.request({
      endpoint: '/subscriptions',
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
        organization_key: params.organization_key,
        publication: params.publication,
        user_guid: params.user_guid,
      },
    });
  }

  /*Returns information about a specific subscription.*/
  public getByGuid(params: SubscriptionsGetByGuidParameters): Promise<SubscriptionsGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/subscriptions/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new subscription.*/
  public post(params: SubscriptionsPostParameters): Promise<SubscriptionsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/subscriptions',
      headers: params.headers,
      method: 'POST',
    });
  }

  public deleteByGuid(params: SubscriptionsDeleteByGuidParameters): Promise<SubscriptionsDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/subscriptions/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class TokensResource extends $Resource {
  public getUsersByUserGuid(params: TokensGetUsersByUserGuidParameters): Promise<TokensGetUsersByUserGuidResponse> {
    return this.client.request({
      endpoint: \`/tokens/users/\${encodeURIComponent(params.user_guid)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
      },
    });
  }

  /*Used to fetch the clear text token.*/
  public getCleartextByGuid(params: TokensGetCleartextByGuidParameters): Promise<TokensGetCleartextByGuidResponse> {
    return this.client.request({
      endpoint: \`/tokens/\${encodeURIComponent(params.guid)}/cleartext\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new API token for this user*/
  public post(params: TokensPostParameters): Promise<TokensPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/tokens',
      headers: params.headers,
      method: 'POST',
    });
  }

  public deleteByGuid(params: TokensDeleteByGuidParameters): Promise<TokensDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/tokens/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export class UsersResource extends $Resource {
  /*Search for a specific user. You must specify at least 1 parameter - either a guid, email or token - and will receive back either 0 or 1 users.*/
  public get(params: UsersGetParameters = {}): Promise<UsersGetResponse> {
    return this.client.request({
      endpoint: '/users',
      headers: params.headers,
      method: 'GET',

      query: {
        email: params.email,
        guid: params.guid,
        nickname: params.nickname,
        token: params.token,
      },
    });
  }

  /*Returns information about the user with this guid.*/
  public getByGuid(params: UsersGetByGuidParameters): Promise<UsersGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/users/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Used to authenticate a user with an email address and password. Successful authentication returns an instance of the user model. Failed authorizations of any kind are returned as a generic error with code user_authorization_failed.*/
  public postAuthenticate(params: UsersPostAuthenticateParameters): Promise<UsersPostAuthenticateResponse> {
    return this.client.request({
      endpoint: '/users/authenticate',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Used to authenticate a user using a github access token. This is equivalent to running the following command to get the user info: curl -H 'Authorization: Bearer code' https://api.github.com/user*/
  public postAuthenticateGithub(params: UsersPostAuthenticateGithubParameters): Promise<UsersPostAuthenticateGithubResponse> {
    return this.client.request({
      endpoint: '/users/authenticate_github',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Create a new user.*/
  public post(params: UsersPostParameters): Promise<UsersPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/users',
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Updates information about the user with the specified guid.*/
  public putByGuid(params: UsersPutByGuidParameters): Promise<UsersPutByGuidResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/users/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }
}

export class ValidationsResource extends $Resource {
  public post(params: ValidationsPostParameters): Promise<ValidationsPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/validations',
      headers: params.headers,
      method: 'POST',
    });
  }
}

export class VersionsResource extends $Resource {
  /*Search all versions of this application. Results are always paginated.*/
  public getByApplicationKey(params: VersionsGetByApplicationKeyParameters): Promise<VersionsGetByApplicationKeyResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        limit: params.limit,
        offset: params.offset,
      },
    });
  }

  /*Retrieve a specific version of an application.*/
  public getByApplicationKeyAndVersion(params: VersionsGetByApplicationKeyAndVersionParameters): Promise<VersionsGetByApplicationKeyAndVersionResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Create a new version for an application*/
  public postByVersion(params: VersionsPostByVersionParameters): Promise<VersionsPostByVersionResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'POST',
    });
  }

  /*Upsert a version of an application*/
  public putByApplicationKeyAndVersion(params: VersionsPutByApplicationKeyAndVersionParameters): Promise<VersionsPutByApplicationKeyAndVersionResponse> {
    return this.client.request({
      body: params.body,
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'PUT',
    });
  }

  /*Deletes a specific version.*/
  public deleteByApplicationKeyAndVersion(params: VersionsDeleteByApplicationKeyAndVersionParameters): Promise<VersionsDeleteByApplicationKeyAndVersionResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }

  /*Generates an example JSON document of the type with the specified name.*/
  public getExampleByApplicationKeyAndVersionAndTypeName(params: VersionsGetExampleByApplicationKeyAndVersionAndTypeNameParameters): Promise<VersionsGetExampleByApplicationKeyAndVersionAndTypeNameResponse> {
    return this.client.request({
      endpoint: \`/\${encodeURIComponent(params.orgKey)}/\${encodeURIComponent(params.applicationKey)}/\${encodeURIComponent(params.version)}/example/\${encodeURIComponent(params.type_name)}\`,
      headers: params.headers,
      method: 'GET',

      query: {
        optional_fields: params.optional_fields,
        sub_type_name: params.sub_type_name,
      },
    });
  }
}

export class WatchesResource extends $Resource {
  /*Search attributes. Always paginated.*/
  public get(params: WatchesGetParameters): Promise<WatchesGetResponse> {
    return this.client.request({
      endpoint: '/watches',
      headers: params.headers,
      method: 'GET',

      query: {
        application_key: params.application_key,
        guid: params.guid,
        limit: params.limit,
        offset: params.offset,
        organization_key: params.organization_key,
        user_guid: params.user_guid,
      },
    });
  }

  /*Returns information about a specific watch.*/
  public getByGuid(params: WatchesGetByGuidParameters): Promise<WatchesGetByGuidResponse> {
    return this.client.request({
      endpoint: \`/watches/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'GET',
    });
  }

  /*Quick check if a user is watching a specific application.*/
  public getCheck(params: WatchesGetCheckParameters): Promise<WatchesGetCheckResponse> {
    return this.client.request({
      endpoint: '/watches/check',
      headers: params.headers,
      method: 'GET',

      query: {
        application_key: params.application_key,
        organization_key: params.organization_key,
        user_guid: params.user_guid,
      },
    });
  }

  /*Create a new watch.*/
  public post(params: WatchesPostParameters): Promise<WatchesPostResponse> {
    return this.client.request({
      body: params.body,
      endpoint: '/watches',
      headers: params.headers,
      method: 'POST',
    });
  }

  public deleteByGuid(params: WatchesDeleteByGuidParameters): Promise<WatchesDeleteByGuidResponse> {
    return this.client.request({
      endpoint: \`/watches/\${encodeURIComponent(params.guid)}\`,
      headers: params.headers,
      method: 'DELETE',
    });
  }
}

export interface ClientInstance {
  applications: ApplicationsResource;
  attributes: AttributesResource;
  authentications: AuthenticationsResource;
  batchDownloadApplications: BatchDownloadApplicationsResource;
  changes: ChangesResource;
  code: CodeResource;
  domains: DomainsResource;
  emailVerificationConfirmationForms: EmailVerificationConfirmationFormsResource;
  generatorServices: GeneratorServicesResource;
  generatorWithServices: GeneratorWithServicesResource;
  healthchecks: HealthchecksResource;
  items: ItemsResource;
  memberships: MembershipsResource;
  membershipRequests: MembershipRequestsResource;
  organizations: OrganizationsResource;
  passwordResets: PasswordResetsResource;
  passwordResetRequests: PasswordResetRequestsResource;
  subscriptions: SubscriptionsResource;
  tokens: TokensResource;
  users: UsersResource;
  validations: ValidationsResource;
  versions: VersionsResource;
  watches: WatchesResource;
}

export function createClient(options: $HttpClientOptions): ClientInstance {
  return {
    applications: new ApplicationsResource(options),
    attributes: new AttributesResource(options),
    authentications: new AuthenticationsResource(options),
    batchDownloadApplications: new BatchDownloadApplicationsResource(options),
    changes: new ChangesResource(options),
    code: new CodeResource(options),
    domains: new DomainsResource(options),
    emailVerificationConfirmationForms: new EmailVerificationConfirmationFormsResource(options),
    generatorServices: new GeneratorServicesResource(options),
    generatorWithServices: new GeneratorWithServicesResource(options),
    healthchecks: new HealthchecksResource(options),
    items: new ItemsResource(options),
    memberships: new MembershipsResource(options),
    membershipRequests: new MembershipRequestsResource(options),
    organizations: new OrganizationsResource(options),
    passwordResets: new PasswordResetsResource(options),
    passwordResetRequests: new PasswordResetRequestsResource(options),
    subscriptions: new SubscriptionsResource(options),
    tokens: new TokensResource(options),
    users: new UsersResource(options),
    validations: new ValidationsResource(options),
    versions: new VersionsResource(options),
    watches: new WatchesResource(options),
  };
}"
`;
